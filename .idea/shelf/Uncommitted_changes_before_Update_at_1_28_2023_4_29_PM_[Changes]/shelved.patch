Index: app/src/main/res/layout/fragment_home.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/fragment_home.xml b/app/src/main/res/layout/fragment_home.xml
new file mode 100644
--- /dev/null	(date 1662127120000)
+++ b/app/src/main/res/layout/fragment_home.xml	(date 1662127120000)
@@ -0,0 +1,41 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<layout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools">
+
+
+    <RelativeLayout
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        tools:context=".HomeFragment">
+
+
+        <com.google.android.material.appbar.AppBarLayout
+            android:id="@+id/appbar"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:theme="@style/ThemeOverlay.AppCompat.Dark.ActionBar">
+
+
+            <com.google.android.material.tabs.TabLayout
+                android:id="@+id/tabs"
+                android:layout_width="match_parent"
+                android:layout_height="?attr/actionBarSize"
+                android:layout_gravity="bottom"
+                android:background="@color/purple_700"
+                app:tabGravity="fill"
+                app:tabIndicatorColor="@color/white"
+                app:tabMode="fixed"
+                app:tabTextAppearance="@style/MyTabLayoutTextAppearance"
+                app:tabTextColor="@color/white" />
+
+        </com.google.android.material.appbar.AppBarLayout>
+
+        <androidx.viewpager2.widget.ViewPager2
+            android:id="@+id/viewpager"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:layout_below="@id/appbar" />
+    </RelativeLayout>
+</layout>
Index: app/src/main/res/layout/fragment_live_group_chat.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/fragment_live_group_chat.xml b/app/src/main/res/layout/fragment_live_group_chat.xml
new file mode 100644
--- /dev/null	(date 1663328138000)
+++ b/app/src/main/res/layout/fragment_live_group_chat.xml	(date 1663328138000)
@@ -0,0 +1,154 @@
+<?xml version="1.0" encoding="utf-8"?>
+<layout xmlns:app="http://schemas.android.com/apk/res-auto">
+
+    <androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
+        xmlns:tools="http://schemas.android.com/tools"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:background="@color/chat_bg_color"
+        tools:context=".ui.fragments.LiveGroupChatFragment">
+
+        <RelativeLayout
+            android:id="@+id/toolbar_layout"
+            android:layout_width="match_parent"
+            android:layout_height="?actionBarSize"
+            android:background="@color/purple_700"
+            app:layout_constraintEnd_toEndOf="parent"
+            app:layout_constraintStart_toStartOf="parent"
+            app:layout_constraintTop_toTopOf="parent">
+
+            <ImageView
+                android:id="@+id/arrow_back_imgview"
+                android:layout_width="@dimen/_25sdp"
+                android:layout_height="@dimen/_20sdp"
+                android:layout_alignParentStart="true"
+                android:layout_centerVertical="true"
+                android:layout_marginStart="@dimen/_5sdp"
+                android:src="@drawable/ic_baseline_arrow_back_24" />
+
+            <de.hdodenhof.circleimageview.CircleImageView
+                android:id="@+id/receiver_imageview"
+                android:layout_width="@dimen/_25sdp"
+                android:layout_height="@dimen/_25sdp"
+                android:layout_centerVertical="true"
+                android:layout_toEndOf="@id/arrow_back_imgview"
+                android:src="@drawable/no_image" />
+
+            <LinearLayout
+                android:id="@+id/group_name_layout"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:layout_alignParentEnd="true"
+                android:layout_centerVertical="true"
+                android:layout_marginStart="@dimen/_5sdp"
+                android:layout_toEndOf="@id/receiver_imageview"
+                android:orientation="vertical">
+
+                <TextView
+                    android:id="@+id/receiver_name"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:text="Receiver Name"
+                    android:textColor="@color/white"
+                    android:textSize="@dimen/_14ssp"
+                    android:textStyle="bold" />
+
+                <TextView
+                    android:id="@+id/status_tv"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:text="@string/online"
+                    android:textColor="@color/white"
+                    android:textSize="@dimen/_8ssp" />
+
+            </LinearLayout>
+
+        </RelativeLayout>
+
+        <androidx.recyclerview.widget.RecyclerView
+            android:id="@+id/chatmessage_recycler_view"
+            android:layout_width="0dp"
+            android:layout_height="0dp"
+            app:layout_constraintBottom_toTopOf="@id/linear_bottom"
+            app:layout_constraintEnd_toEndOf="parent"
+            app:layout_constraintStart_toStartOf="parent"
+            app:layout_constraintTop_toBottomOf="@id/toolbar_layout" />
+        <androidx.constraintlayout.widget.ConstraintLayout
+            android:id="@+id/linear_bottom"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            app:layout_constraintStart_toStartOf="parent"
+            app:layout_constraintBottom_toBottomOf="parent"
+            app:layout_constraintEnd_toEndOf="parent">
+
+            <androidx.cardview.widget.CardView
+                android:id="@+id/rl_bottom"
+                android:layout_width="0dp"
+                android:layout_height="wrap_content"
+                android:layout_marginStart="@dimen/_10sdp"
+                android:layout_marginBottom="@dimen/_10sdp"
+                android:maxHeight="@dimen/_100sdp"
+                android:minHeight="@dimen/_30sdp"
+                app:cardBackgroundColor="@color/white"
+                app:cardCornerRadius="@dimen/_15sdp"
+                app:cardElevation="@dimen/_8sdp"
+                app:layout_constraintBottom_toBottomOf="parent"
+                app:layout_constraintEnd_toStartOf="@id/checkmark"
+                app:layout_constraintStart_toStartOf="parent">
+
+
+                <androidx.constraintlayout.widget.ConstraintLayout
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:layout_gravity="center_vertical">
+
+
+                    <com.hendraanggrian.appcompat.widget.SocialAutoCompleteTextView
+                        android:id="@+id/input_message"
+                        android:layout_width="match_parent"
+                        android:layout_height="wrap_content"
+                        android:layout_marginLeft="5dp"
+                        android:background="@null"
+                        android:gravity="center_vertical"
+                        android:hint="@string/message"
+                        android:paddingStart="@dimen/_5sdp"
+                        android:textColor="@color/black"
+                        android:textSize="14sp"
+                        app:mentionColor="@color/purple_700"
+                        app:socialFlags="mention"
+                        android:scrollbars="vertical"
+                        android:inputType="textCapSentences|textMultiLine"
+                        android:layout_marginHorizontal="@dimen/_5sdp"
+                        app:layout_constraintStart_toStartOf="parent"
+                        app:layout_constraintEnd_toEndOf="parent"
+                        app:layout_constraintTop_toTopOf="parent"
+                        app:layout_constraintBottom_toBottomOf="parent"
+                        android:maxHeight="@dimen/_100sdp"
+                        android:minHeight="@dimen/_30sdp"
+                        />
+
+                </androidx.constraintlayout.widget.ConstraintLayout>
+
+
+            </androidx.cardview.widget.CardView>
+
+            <ImageView
+                android:id="@+id/checkmark"
+                android:layout_width="@dimen/_35sdp"
+                android:layout_height="@dimen/_35sdp"
+                android:layout_alignParentRight="true"
+                android:layout_centerVertical="true"
+                android:paddingStart="@dimen/_5sdp"
+                android:paddingTop="@dimen/_5sdp"
+                android:paddingEnd="@dimen/_10sdp"
+                android:src="@drawable/send_icon"
+                app:layout_constraintBottom_toBottomOf="@id/rl_bottom"
+                app:layout_constraintEnd_toEndOf="parent" />
+
+
+        </androidx.constraintlayout.widget.ConstraintLayout>
+
+
+
+    </androidx.constraintlayout.widget.ConstraintLayout>
+</layout>
Index: app/src/main/res/layout/fragment_group_details.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/fragment_group_details.xml b/app/src/main/res/layout/fragment_group_details.xml
new file mode 100644
--- /dev/null	(date 1662127120000)
+++ b/app/src/main/res/layout/fragment_group_details.xml	(date 1662127120000)
@@ -0,0 +1,179 @@
+<?xml version="1.0" encoding="utf-8"?>
+<layout xmlns:app="http://schemas.android.com/apk/res-auto">
+
+    <androidx.core.widget.NestedScrollView xmlns:android="http://schemas.android.com/apk/res/android"
+        xmlns:tools="http://schemas.android.com/tools"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:fillViewport="true"
+        tools:context=".ui.fragments.GroupDetailsFragment">
+
+        <androidx.constraintlayout.widget.ConstraintLayout
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content">
+            <androidx.constraintlayout.widget.ConstraintLayout
+                android:id="@+id/header_layout"
+                android:layout_width="0dp"
+                android:layout_height="wrap_content"
+                android:layout_marginTop="@dimen/_10sdp"
+                app:layout_constraintEnd_toEndOf="parent"
+                app:layout_constraintStart_toStartOf="parent"
+                app:layout_constraintTop_toTopOf="parent">
+
+                <ImageView
+                    android:id="@+id/arrow_back_imgview"
+                    android:layout_width="@dimen/_25sdp"
+                    android:layout_height="@dimen/_20sdp"
+                    android:layout_marginStart="@dimen/_10sdp"
+                    android:layout_marginTop="@dimen/_8sdp"
+                    android:src="@drawable/ic_baseline_arrow_back_24"
+                    app:layout_constraintStart_toStartOf="parent"
+                    app:layout_constraintTop_toTopOf="parent"
+                    app:tint="@color/black" />
+
+
+                <de.hdodenhof.circleimageview.CircleImageView
+                    android:id="@+id/group_imageview"
+                    android:layout_width="@dimen/_50sdp"
+                    android:layout_height="@dimen/_50sdp"
+                    android:src="@drawable/ic_launcher_background"
+                    app:layout_constraintEnd_toEndOf="parent"
+                    app:layout_constraintStart_toStartOf="parent"
+                    app:layout_constraintTop_toTopOf="parent" />
+
+                <TextView
+                    android:id="@+id/group_name_tv"
+                    android:layout_width="0dp"
+                    android:layout_height="wrap_content"
+                    android:gravity="center"
+                    android:padding="@dimen/_5sdp"
+                    android:text="Group Name"
+                    android:textColor="@color/black"
+                    android:textSize="@dimen/_14ssp"
+                    android:textStyle="bold"
+                    app:layout_constraintEnd_toEndOf="parent"
+                    app:layout_constraintStart_toStartOf="parent"
+                    app:layout_constraintTop_toBottomOf="@id/group_imageview" />
+
+                <TextView
+                    android:id="@+id/group_participents_tv"
+                    android:layout_width="0dp"
+                    android:layout_height="wrap_content"
+                    android:gravity="center"
+                    android:text="30 Participents"
+                    android:textSize="@dimen/_10ssp"
+                    android:textStyle="bold"
+                    app:layout_constraintEnd_toEndOf="parent"
+                    app:layout_constraintStart_toStartOf="parent"
+                    app:layout_constraintTop_toBottomOf="@id/group_name_tv" />
+
+                <View
+
+                    android:layout_width="0dp"
+                    android:layout_height="1dp"
+                    android:layout_marginTop="@dimen/_10sdp"
+                    android:background="@color/line_color"
+                    app:layout_constraintBottom_toBottomOf="parent"
+                    app:layout_constraintEnd_toEndOf="parent"
+                    app:layout_constraintTop_toBottomOf="@id/group_participents_tv" />
+
+            </androidx.constraintlayout.widget.ConstraintLayout>
+
+            <LinearLayout
+                android:id="@+id/notification_layout"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                app:layout_constraintTop_toBottomOf="@id/header_layout"
+                app:layout_constraintStart_toStartOf="parent"
+                android:layout_marginTop="@dimen/_10sdp"
+                >
+
+                <ImageView
+                    android:id="@+id/mute_notification_imageview"
+                    android:layout_width="@dimen/_15sdp"
+                    android:layout_height="@dimen/_15sdp"
+                    android:layout_marginStart="@dimen/_10sdp"
+                    android:src="@drawable/ic_enable_notification"
+                    />
+
+                <TextView
+                    android:id="@+id/mute_notification_tv"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:text="@string/mute_notifications"
+                    android:textColor="@color/black"
+                    android:layout_marginStart="@dimen/_5sdp"
+                    />
+            </LinearLayout>
+
+            <RelativeLayout
+                android:id="@+id/add_participants_layout"
+                android:layout_width="0dp"
+                android:layout_height="wrap_content"
+                app:layout_constraintTop_toBottomOf="@id/notification_layout"
+                app:layout_constraintStart_toStartOf="@id/notification_layout"
+                app:layout_constraintEnd_toEndOf="parent"
+                android:layout_margin="@dimen/_10sdp"
+
+                >
+
+                <RelativeLayout
+                    android:id="@+id/add_person_layout"
+                    android:layout_width="@dimen/_30sdp"
+                    android:layout_height="@dimen/_30sdp"
+                    android:background="@drawable/blue_circle"
+                    >
+                    <ImageView
+                        android:layout_width="match_parent"
+                        android:layout_height="match_parent"
+                        android:src="@drawable/ic_add_person"
+                        android:layout_margin="@dimen/_7sdp"
+                        />
+                </RelativeLayout>
+
+                <TextView
+                    android:id="@+id/add_participants_tv"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:layout_alignTop="@id/add_person_layout"
+                    android:layout_alignBottom="@id/add_person_layout"
+                    android:layout_toEndOf="@id/add_person_layout"
+                    android:layout_marginStart="@dimen/_10sdp"
+                    android:text="@string/add_participants"
+                    android:gravity="center_vertical"
+                    android:textColor="@color/black"
+                    android:textSize="@dimen/_12ssp"
+                    />
+
+                <androidx.appcompat.widget.SearchView
+                    android:id="@+id/searchview"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:layout_alignTop="@id/add_person_layout"
+                    android:layout_alignBottom="@id/add_person_layout"
+                    android:layout_toEndOf="@id/add_participants_tv"
+                    android:layoutDirection="rtl"
+                    android:layout_alignParentEnd="true"/>
+
+            </RelativeLayout>
+
+            <androidx.recyclerview.widget.RecyclerView
+                android:id="@+id/participents_recyclerview"
+                android:layout_width="0dp"
+                android:layout_height="0dp"
+                app:layout_constraintStart_toStartOf="parent"
+                app:layout_constraintEnd_toEndOf="parent"
+                app:layout_constraintTop_toBottomOf="@id/add_participants_layout"
+                app:layout_constraintBottom_toBottomOf="parent"
+                android:layout_margin="@dimen/_10sdp"
+                android:nestedScrollingEnabled="false"
+                />
+        </androidx.constraintlayout.widget.ConstraintLayout>
+
+
+
+
+
+
+    </androidx.core.widget.NestedScrollView>
+</layout>
Index: app/src/main/res/layout/fragment_groups.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/fragment_groups.xml b/app/src/main/res/layout/fragment_groups.xml
new file mode 100644
--- /dev/null	(date 1662127120000)
+++ b/app/src/main/res/layout/fragment_groups.xml	(date 1662127120000)
@@ -0,0 +1,48 @@
+<?xml version="1.0" encoding="utf-8"?>
+<layout>
+
+<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    xmlns:app="http://schemas.android.com/apk/res-auto">
+
+    <androidx.recyclerview.widget.RecyclerView
+        android:id="@+id/groups_recyclerview"
+        android:layout_width="0dp"
+        android:layout_height="0dp"
+
+        app:layout_constraintTop_toTopOf="parent"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintEnd_toEndOf="parent"
+        />
+
+    <TextView
+        android:id="@+id/no_data_found_tv"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="@string/no_data_found"
+        app:layout_constraintTop_toTopOf="parent"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintEnd_toEndOf="parent"
+        android:textSize="@dimen/_14ssp"
+        android:visibility="gone"
+        />
+
+    <com.google.android.material.floatingactionbutton.FloatingActionButton
+        android:id="@+id/add_new_group_btn"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_marginEnd="@dimen/_10sdp"
+        android:layout_marginBottom="@dimen/_10sdp"
+        android:src="@drawable/ic_add_person"
+        app:backgroundTint="@color/purple_700"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintEnd_toEndOf="parent" />
+
+
+
+</androidx.constraintlayout.widget.ConstraintLayout>
+</layout>
Index: app/src/main/res/layout/fragment_organization.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/fragment_organization.xml b/app/src/main/res/layout/fragment_organization.xml
new file mode 100644
--- /dev/null	(date 1662127120000)
+++ b/app/src/main/res/layout/fragment_organization.xml	(date 1662127120000)
@@ -0,0 +1,51 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<layout xmlns:app="http://schemas.android.com/apk/res-auto">
+
+
+    <androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
+        xmlns:tools="http://schemas.android.com/tools"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent">
+
+
+        <androidx.cardview.widget.CardView
+            android:id="@+id/search_layout"
+            android:layout_width="0dp"
+            android:layout_height="wrap_content"
+            app:layout_constraintStart_toStartOf="parent"
+            app:layout_constraintEnd_toEndOf="parent"
+            app:layout_constraintTop_toTopOf="parent"
+
+            app:cardBackgroundColor="@color/white"
+            app:cardCornerRadius="@dimen/_20sdp"
+            app:cardElevation="@dimen/_8sdp"
+            android:layout_margin="@dimen/_10sdp"
+            >
+
+            <androidx.appcompat.widget.SearchView
+                android:id="@+id/searchview"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:background="@drawable/et_message"
+                android:layoutDirection="rtl"
+                app:queryHint="@string/search_by_name"
+                />
+
+        </androidx.cardview.widget.CardView>
+
+
+
+        <androidx.recyclerview.widget.RecyclerView
+            android:id="@+id/users_recyclerview"
+            android:layout_width="0dp"
+            android:layout_height="0dp"
+            app:layout_constraintStart_toStartOf="parent"
+            app:layout_constraintEnd_toEndOf="parent"
+            app:layout_constraintBottom_toBottomOf="parent"
+            app:layout_constraintTop_toBottomOf="@id/search_layout"
+            android:layout_margin="@dimen/_10sdp"
+            />
+
+    </androidx.constraintlayout.widget.ConstraintLayout>
+</layout>
Index: app/src/main/res/layout/fragment_profile.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/fragment_profile.xml b/app/src/main/res/layout/fragment_profile.xml
new file mode 100644
--- /dev/null	(date 1674049230014)
+++ b/app/src/main/res/layout/fragment_profile.xml	(date 1674049230014)
@@ -0,0 +1,212 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<layout xmlns:app="http://schemas.android.com/apk/res-auto">
+
+
+    <androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
+        xmlns:tools="http://schemas.android.com/tools"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        tools:context=".ui.fragments.ProfileFragment">
+
+        <androidx.constraintlayout.widget.ConstraintLayout
+            android:id="@+id/header_layout"
+            android:layout_width="0dp"
+            android:layout_height="wrap_content"
+            android:layout_marginTop="@dimen/_10sdp"
+            app:layout_constraintEnd_toEndOf="parent"
+            app:layout_constraintStart_toStartOf="parent"
+            app:layout_constraintTop_toTopOf="parent">
+
+            <ImageView
+                android:id="@+id/arrow_back_imgview"
+                android:layout_width="@dimen/_25sdp"
+                android:layout_height="@dimen/_20sdp"
+                android:layout_marginStart="@dimen/_10sdp"
+                android:layout_marginTop="@dimen/_8sdp"
+                android:src="@drawable/ic_baseline_arrow_back_24"
+                app:layout_constraintStart_toStartOf="parent"
+                app:layout_constraintTop_toTopOf="parent"
+                app:tint="@color/black" />
+
+
+            <de.hdodenhof.circleimageview.CircleImageView
+                android:id="@+id/group_imageview"
+                android:layout_width="@dimen/_70sdp"
+                android:layout_height="@dimen/_70sdp"
+                android:src="@drawable/ic_launcher_background"
+                app:layout_constraintEnd_toEndOf="parent"
+                app:layout_constraintStart_toStartOf="parent"
+                app:layout_constraintTop_toTopOf="parent" />
+
+            <TextView
+                android:id="@+id/user_name_tv"
+                android:layout_width="0dp"
+                android:layout_height="wrap_content"
+                android:gravity="center"
+                android:padding="@dimen/_5sdp"
+                android:text="User Name"
+                android:textColor="@color/black"
+                android:textSize="@dimen/_14ssp"
+                android:textStyle="bold"
+                app:layout_constraintEnd_toEndOf="parent"
+                app:layout_constraintStart_toStartOf="parent"
+                app:layout_constraintTop_toBottomOf="@id/group_imageview" />
+
+            <View
+
+                android:layout_width="0dp"
+                android:layout_height="1dp"
+                android:layout_marginTop="@dimen/_10sdp"
+                android:background="@color/line_color"
+                app:layout_constraintBottom_toBottomOf="parent"
+                app:layout_constraintEnd_toEndOf="parent"
+                app:layout_constraintTop_toBottomOf="@id/user_name_tv" />
+
+        </androidx.constraintlayout.widget.ConstraintLayout>
+
+        <com.google.android.material.textfield.TextInputLayout
+            android:id="@+id/bio_inputlayout"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            app:layout_constraintTop_toBottomOf="@id/header_layout"
+            android:hint="@string/bio"
+            app:boxBackgroundColor="@android:color/transparent"
+            android:background="@android:color/transparent"
+            android:layout_marginStart="@dimen/_20sdp"
+            android:layout_marginEnd="@dimen/_20sdp"
+            app:layout_constraintStart_toStartOf="parent"
+            app:layout_constraintEnd_toEndOf="parent"
+            android:layout_marginTop="@dimen/_20sdp"
+
+            >
+            <com.google.android.material.textfield.TextInputEditText
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+
+                android:focusable="false"
+              />
+
+        </com.google.android.material.textfield.TextInputLayout>
+        <com.google.android.material.textfield.TextInputLayout
+            android:id="@+id/email_inputlayout"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            app:layout_constraintTop_toBottomOf="@id/bio_inputlayout"
+            android:hint="@string/email"
+            app:boxBackgroundColor="@android:color/transparent"
+            android:background="@android:color/transparent"
+            android:layout_marginStart="@dimen/_20sdp"
+            android:layout_marginEnd="@dimen/_20sdp"
+            android:layout_marginTop="@dimen/_10sdp"
+            app:layout_constraintStart_toStartOf="parent"
+            app:layout_constraintEnd_toEndOf="parent"
+
+            >
+            <com.google.android.material.textfield.TextInputEditText
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+
+                android:focusable="false"
+              />
+
+        </com.google.android.material.textfield.TextInputLayout>
+        <com.google.android.material.textfield.TextInputLayout
+            android:id="@+id/organiztion_inputlayout"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            app:layout_constraintTop_toBottomOf="@id/email_inputlayout"
+            android:hint="@string/organizations"
+            app:boxBackgroundColor="@android:color/transparent"
+            android:background="@android:color/transparent"
+            android:layout_marginStart="@dimen/_20sdp"
+            android:layout_marginEnd="@dimen/_20sdp"
+            android:layout_marginTop="@dimen/_10sdp"
+            app:layout_constraintStart_toStartOf="parent"
+            app:layout_constraintEnd_toEndOf="parent"
+
+            >
+            <com.google.android.material.textfield.TextInputEditText
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+
+                android:focusable="false"
+              />
+
+        </com.google.android.material.textfield.TextInputLayout>
+
+        <com.google.android.material.textfield.TextInputLayout
+            android:id="@+id/region_inputlayout"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            app:layout_constraintTop_toBottomOf="@id/organiztion_inputlayout"
+            android:hint="@string/region"
+            app:boxBackgroundColor="@android:color/transparent"
+            android:background="@android:color/transparent"
+            android:layout_marginStart="@dimen/_20sdp"
+            android:layout_marginEnd="@dimen/_20sdp"
+            android:layout_marginTop="@dimen/_10sdp"
+            app:layout_constraintStart_toStartOf="parent"
+            app:layout_constraintEnd_toEndOf="parent"
+
+            >
+            <com.google.android.material.textfield.TextInputEditText
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+
+                android:focusable="false"
+                />
+
+        </com.google.android.material.textfield.TextInputLayout>
+
+        <com.google.android.material.textfield.TextInputLayout
+            android:id="@+id/position_inputlayout"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            app:layout_constraintTop_toBottomOf="@id/region_inputlayout"
+            android:hint="@string/position"
+            app:boxBackgroundColor="@android:color/transparent"
+            android:background="@android:color/transparent"
+            android:layout_marginStart="@dimen/_20sdp"
+            android:layout_marginEnd="@dimen/_20sdp"
+            android:layout_marginTop="@dimen/_10sdp"
+            app:layout_constraintStart_toStartOf="parent"
+            app:layout_constraintEnd_toEndOf="parent"
+
+            >
+            <com.google.android.material.textfield.TextInputEditText
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+
+                android:focusable="false"
+                />
+
+        </com.google.android.material.textfield.TextInputLayout>
+
+
+        <com.google.android.material.button.MaterialButton
+            android:id="@+id/start_chat_btn"
+            android:layout_width="@dimen/_150sdp"
+            android:layout_height="wrap_content"
+            app:layout_constraintStart_toStartOf="parent"
+            app:layout_constraintEnd_toEndOf="parent"
+            app:layout_constraintTop_toBottomOf="@id/position_inputlayout"
+            android:layout_marginTop="@dimen/_20sdp"
+            android:backgroundTint="@color/purple_700"
+            android:layout_marginBottom="@dimen/_10sdp"
+            app:cornerRadius="@dimen/_40sdp"
+            android:text="@string/start_chat"
+            android:textAllCaps="false"
+            />
+
+        <ImageView
+            android:layout_width="0dp"
+            android:layout_height="@dimen/_100sdp"
+            app:layout_constraintBottom_toBottomOf="parent"
+            app:layout_constraintStart_toStartOf="parent"
+            app:layout_constraintEnd_toEndOf="parent"
+            android:src="@drawable/profile_bg"
+            android:scaleType="fitXY"
+            />
+    </androidx.constraintlayout.widget.ConstraintLayout>
+</layout>
Index: app/src/main/res/layout/fragment_login.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/fragment_login.xml b/app/src/main/res/layout/fragment_login.xml
new file mode 100644
--- /dev/null	(date 1669815070232)
+++ b/app/src/main/res/layout/fragment_login.xml	(date 1669815070232)
@@ -0,0 +1,148 @@
+<?xml version="1.0" encoding="utf-8"?>
+<layout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools">
+
+    <androidx.constraintlayout.widget.ConstraintLayout
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:background="@color/white"
+        tools:context=".ui.fragments.LoginFragment">
+
+
+        <RelativeLayout
+            android:id="@+id/top_layout"
+            android:layout_width="match_parent"
+            android:layout_height="@dimen/_160sdp"
+            android:background="@color/purple_700"
+            app:layout_constraintEnd_toEndOf="parent"
+            app:layout_constraintStart_toStartOf="parent"
+            app:layout_constraintTop_toTopOf="parent">
+
+            <de.hdodenhof.circleimageview.CircleImageView
+                android:layout_width="@dimen/_100sdp"
+                android:layout_height="@dimen/_100sdp"
+                android:layout_centerInParent="true"
+                android:src="@drawable/app_logo" />
+
+        </RelativeLayout>
+
+        <androidx.constraintlayout.widget.Guideline
+            android:id="@+id/start_guidline"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:orientation="vertical"
+            app:layout_constraintGuide_begin="@dimen/_45sdp" />
+
+        <ScrollView
+            android:layout_width="0dp"
+            android:layout_height="wrap_content"
+            android:layout_marginTop="@dimen/_60sdp"
+            android:fillViewport="true"
+            app:layout_constraintEnd_toEndOf="@id/end_guidline"
+            app:layout_constraintStart_toStartOf="@id/start_guidline"
+            app:layout_constraintTop_toBottomOf="@id/top_layout"
+
+            >
+
+            <androidx.constraintlayout.widget.ConstraintLayout
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content">
+
+                <com.google.android.material.textfield.TextInputLayout
+                    android:id="@+id/username_inputlayout"
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:background="@android:color/transparent"
+                    android:hint="Email"
+                    app:boxBackgroundColor="@android:color/transparent"
+                    app:layout_constraintTop_toTopOf="parent"
+
+                    >
+
+                    <com.google.android.material.textfield.TextInputEditText
+                        android:layout_width="match_parent"
+                        android:layout_height="wrap_content"
+                        android:imeOptions="actionNext"
+                        android:inputType="text"
+                        android:maxLines="1" />
+
+                </com.google.android.material.textfield.TextInputLayout>
+
+                <com.google.android.material.textfield.TextInputLayout
+                    android:id="@+id/password_inputlayout"
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:layout_marginTop="@dimen/_10sdp"
+                    android:background="@android:color/transparent"
+                    android:hint="@string/password"
+                    app:boxBackgroundColor="@android:color/transparent"
+                    app:layout_constraintTop_toBottomOf="@id/username_inputlayout"
+                    app:passwordToggleEnabled="true">
+
+                    <com.google.android.material.textfield.TextInputEditText
+                        android:layout_width="match_parent"
+                        android:layout_height="wrap_content"
+                        android:imeOptions="actionDone"
+                        android:inputType="textPassword"
+                        android:maxLines="1" />
+
+
+
+                </com.google.android.material.textfield.TextInputLayout>
+
+
+                <CheckBox
+                    android:id="@+id/cb_privacy_policy"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:layout_weight="1"
+                    android:text="Privacy Policy"
+                    app:layout_constraintStart_toStartOf="parent"
+                    app:layout_constraintTop_toBottomOf="@id/password_inputlayout"
+                    />
+
+                <TextView
+                    android:id="@+id/terms_condition"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:layout_weight="1"
+                    android:text="@string/terms_amp_conditions"
+                    android:textColor="@color/purple_700"
+                    app:layout_constraintBottom_toBottomOf="@+id/cb_privacy_policy"
+                    app:layout_constraintEnd_toEndOf="parent"
+                    app:layout_constraintTop_toBottomOf="@id/password_inputlayout" />
+
+
+
+                <com.google.android.material.button.MaterialButton
+                    android:id="@+id/login_btn"
+                    android:layout_width="@dimen/_150sdp"
+                    android:layout_height="wrap_content"
+                    android:layout_marginTop="@dimen/_30sdp"
+                    android:layout_marginBottom="@dimen/_10sdp"
+                    android:backgroundTint="@color/purple_700"
+                    android:text="@string/log_in"
+                    android:textAllCaps="false"
+                    app:cornerRadius="@dimen/_40sdp"
+                    app:layout_constraintBottom_toBottomOf="parent"
+                    app:layout_constraintEnd_toEndOf="parent"
+                    app:layout_constraintStart_toStartOf="parent"
+                    app:layout_constraintTop_toBottomOf="@id/cb_privacy_policy" />
+
+
+
+
+
+            </androidx.constraintlayout.widget.ConstraintLayout>
+        </ScrollView>
+
+        <androidx.constraintlayout.widget.Guideline
+            android:id="@+id/end_guidline"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:orientation="vertical"
+            app:layout_constraintGuide_end="@dimen/_45sdp" />
+
+    </androidx.constraintlayout.widget.ConstraintLayout>
+</layout>
Index: app/src/main/res/layout/fragment_new_group.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/fragment_new_group.xml b/app/src/main/res/layout/fragment_new_group.xml
new file mode 100644
--- /dev/null	(date 1662127120000)
+++ b/app/src/main/res/layout/fragment_new_group.xml	(date 1662127120000)
@@ -0,0 +1,124 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<layout xmlns:app="http://schemas.android.com/apk/res-auto">
+
+
+    <androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
+        xmlns:tools="http://schemas.android.com/tools"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        tools:context=".ui.fragments.NewGroupFragment">
+
+        <RelativeLayout
+            android:id="@+id/toolbar_layout"
+            android:layout_width="match_parent"
+            android:layout_height="?actionBarSize"
+            android:background="@color/purple_700"
+            app:layout_constraintEnd_toEndOf="parent"
+            app:layout_constraintStart_toStartOf="parent"
+            app:layout_constraintTop_toTopOf="parent">
+
+            <ImageView
+                android:id="@+id/arrow_back_imgview"
+                android:layout_width="@dimen/_25sdp"
+                android:layout_height="@dimen/_20sdp"
+                android:layout_alignParentStart="true"
+                android:layout_centerVertical="true"
+                android:layout_marginStart="@dimen/_5sdp"
+                android:src="@drawable/ic_baseline_arrow_back_24" />
+
+            <LinearLayout
+                android:id="@+id/group_name_layout"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_centerVertical="true"
+                android:layout_marginStart="@dimen/_5sdp"
+                android:layout_toEndOf="@id/arrow_back_imgview"
+                android:orientation="vertical">
+
+                <TextView
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:text="@string/new_group"
+                    android:textColor="@color/white"
+                    android:textSize="@dimen/_14ssp"
+                    android:textStyle="bold" />
+
+                <TextView
+                    android:id="@+id/number_contacts_selected_tv"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:text=""
+                    android:textColor="@color/white"
+                    android:textSize="@dimen/_8ssp" />
+
+            </LinearLayout>
+
+            <androidx.appcompat.widget.SearchView
+                android:id="@+id/searchview"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:layout_alignTop="@id/group_name_layout"
+                android:layout_alignBottom="@id/group_name_layout"
+                android:layout_alignParentEnd="true"
+                android:layout_marginStart="@dimen/_10sdp"
+                android:layout_toEndOf="@id/group_name_layout"
+                android:layoutDirection="rtl"
+                app:searchIcon="@drawable/ic_baseline_search_24" />
+
+        </RelativeLayout>
+        <androidx.recyclerview.widget.RecyclerView
+            android:id="@+id/selected_contacts_recyclerview"
+            android:layout_width="0dp"
+            android:layout_height="@dimen/_50sdp"
+            android:layout_margin="@dimen/_5sdp"
+            app:layout_constraintEnd_toEndOf="parent"
+            app:layout_constraintStart_toStartOf="parent"
+            app:layout_constraintTop_toBottomOf="@id/toolbar_layout" />
+
+        <TextView
+            android:id="@+id/selected_users_tv"
+            android:layout_width="0dp"
+            android:layout_height="@dimen/_50sdp"
+            android:layout_margin="@dimen/_5sdp"
+            android:text="@string/no_user_selected"
+            android:gravity="center"
+            android:textSize="@dimen/_14ssp"
+            android:textColor="@color/purple_700"
+            app:layout_constraintEnd_toEndOf="parent"
+            app:layout_constraintStart_toStartOf="parent"
+            app:layout_constraintTop_toBottomOf="@id/toolbar_layout" />
+
+        <View
+            android:id="@+id/view1"
+            android:layout_width="0dp"
+            android:layout_height="1dp"
+            android:layout_marginTop="@dimen/_5sdp"
+            android:background="@color/line_color"
+            app:layout_constraintEnd_toEndOf="parent"
+            app:layout_constraintStart_toStartOf="parent"
+            app:layout_constraintTop_toBottomOf="@id/selected_contacts_recyclerview" />
+        <androidx.recyclerview.widget.RecyclerView
+            android:id="@+id/all_contacts_recyclerview"
+            android:layout_width="0dp"
+            android:layout_height="0dp"
+            android:layout_margin="@dimen/_5sdp"
+            app:layout_constraintBottom_toBottomOf="parent"
+            app:layout_constraintEnd_toEndOf="parent"
+            app:layout_constraintStart_toStartOf="parent"
+            app:layout_constraintTop_toBottomOf="@id/view1" />
+        <com.google.android.material.floatingactionbutton.FloatingActionButton
+            android:id="@+id/forward_btn"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_marginEnd="@dimen/_10sdp"
+            android:layout_marginBottom="@dimen/_10sdp"
+            android:src="@drawable/ic_baseline_arrow_forward_24"
+            app:backgroundTint="@color/purple_700"
+            app:layout_constraintBottom_toBottomOf="parent"
+            app:layout_constraintEnd_toEndOf="parent" />
+
+
+
+    </androidx.constraintlayout.widget.ConstraintLayout>
+</layout>
Index: app/src/main/res/layout/fragment_user_profile.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/fragment_user_profile.xml b/app/src/main/res/layout/fragment_user_profile.xml
new file mode 100644
--- /dev/null	(date 1663244358000)
+++ b/app/src/main/res/layout/fragment_user_profile.xml	(date 1663244358000)
@@ -0,0 +1,257 @@
+<?xml version="1.0" encoding="utf-8"?>
+<layout xmlns:tools="http://schemas.android.com/tools"
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto">
+
+    <androidx.constraintlayout.widget.ConstraintLayout
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        tools:context=".ui.fragments.UserProfile">
+
+        <androidx.constraintlayout.widget.ConstraintLayout
+            android:id="@+id/header_layout"
+            android:layout_width="0dp"
+            android:layout_height="wrap_content"
+            android:layout_marginTop="@dimen/_10sdp"
+            app:layout_constraintEnd_toEndOf="parent"
+            app:layout_constraintStart_toStartOf="parent"
+            app:layout_constraintTop_toTopOf="parent">
+
+            <!--            <ImageView-->
+            <!--                android:id="@+id/arrow_back_imgview"-->
+            <!--                android:layout_width="@dimen/_25sdp"-->
+            <!--                android:layout_height="@dimen/_20sdp"-->
+            <!--                android:layout_marginStart="@dimen/_10sdp"-->
+            <!--                android:layout_marginTop="@dimen/_8sdp"-->
+            <!--                android:src="@drawable/ic_baseline_arrow_back_24"-->
+            <!--                app:layout_constraintStart_toStartOf="parent"-->
+            <!--                app:layout_constraintTop_toTopOf="parent"-->
+            <!--                app:tint="@color/black" />-->
+
+
+            <!--            <de.hdodenhof.circleimageview.CircleImageView-->
+            <!--                android:id="@+id/profile_image"-->
+            <!--                android:layout_width="@dimen/_70sdp"-->
+            <!--                android:layout_height="@dimen/_70sdp"-->
+            <!--                android:src="@drawable/avatar"-->
+            <!--                app:civ_border_color="@color/black"-->
+            <!--                app:civ_border_width="2dp"-->
+            <!--                app:layout_constraintEnd_toEndOf="parent"-->
+            <!--                app:layout_constraintStart_toStartOf="parent"-->
+            <!--                app:layout_constraintTop_toTopOf="parent" />-->
+
+
+            <!--            <ImageView-->
+            <!--                android:layout_width="wrap_content"-->
+            <!--                android:layout_height="wrap_content"-->
+            <!--                android:src="@drawable/ic_camera_"-->
+            <!--                app:layout_constraintBottom_toBottomOf="@+id/profile_image"-->
+            <!--                app:layout_constraintEnd_toEndOf="@+id/profile_image" />-->
+
+
+            <!--            <TextView-->
+            <!--                android:id="@+id/user_name_tv"-->
+            <!--                android:layout_width="0dp"-->
+            <!--                android:layout_height="wrap_content"-->
+            <!--                android:gravity="center"-->
+            <!--                android:padding="@dimen/_5sdp"-->
+            <!--                android:text="User Name"-->
+            <!--                android:textColor="@color/black"-->
+            <!--                android:textSize="@dimen/_14ssp"-->
+            <!--                android:textStyle="bold"-->
+            <!--                app:layout_constraintEnd_toEndOf="parent"-->
+            <!--                app:layout_constraintStart_toStartOf="parent"-->
+            <!--                app:layout_constraintTop_toBottomOf="@id/profile_image" />-->
+
+            <!--            <View-->
+
+            <!--                android:layout_width="0dp"-->
+            <!--                android:layout_height="1dp"-->
+            <!--                android:layout_marginTop="@dimen/_10sdp"-->
+            <!--                -->
+            <!--                android:visibility="gone"-->
+            <!--                android:background="@color/line_color"-->
+            <!--                app:layout_constraintBottom_toBottomOf="parent"-->
+            <!--                app:layout_constraintEnd_toEndOf="parent"-->
+            <!--                app:layout_constraintTop_toBottomOf="@id/user_name_tv" />-->
+
+        </androidx.constraintlayout.widget.ConstraintLayout>
+
+
+        <com.google.android.material.textfield.TextInputLayout
+            android:id="@+id/bio_layout"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:layout_marginStart="@dimen/_20sdp"
+            android:layout_marginTop="@dimen/_20sdp"
+            android:layout_marginEnd="@dimen/_20sdp"
+            android:background="@android:color/transparent"
+            android:hint="@string/bio"
+            android:visibility="gone"
+            app:boxBackgroundColor="@android:color/transparent"
+            app:layout_constraintEnd_toEndOf="parent"
+            app:layout_constraintStart_toStartOf="parent"
+            app:layout_constraintTop_toBottomOf="@id/header_layout"
+
+            >
+
+            <com.google.android.material.textfield.TextInputEditText
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+
+                android:focusable="false" />
+
+        </com.google.android.material.textfield.TextInputLayout>
+
+        <com.google.android.material.textfield.TextInputLayout
+            android:id="@+id/email_inputlayout"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:layout_marginStart="@dimen/_20sdp"
+            android:layout_marginTop="@dimen/_10sdp"
+            android:layout_marginEnd="@dimen/_20sdp"
+            android:background="@android:color/transparent"
+            android:hint="@string/email"
+            android:visibility="gone"
+            app:boxBackgroundColor="@android:color/transparent"
+            app:layout_constraintEnd_toEndOf="parent"
+            app:layout_constraintStart_toStartOf="parent"
+            app:layout_constraintTop_toBottomOf="@id/bio_inputlayout"
+
+            >
+
+            <com.google.android.material.textfield.TextInputEditText
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+
+                android:focusable="false" />
+
+        </com.google.android.material.textfield.TextInputLayout>
+
+        <com.google.android.material.textfield.TextInputLayout
+            android:id="@+id/organiztion_inputlayout"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:layout_marginStart="@dimen/_20sdp"
+            android:layout_marginTop="@dimen/_10sdp"
+
+            android:layout_marginEnd="@dimen/_20sdp"
+            android:background="@android:color/transparent"
+            android:hint="@string/organizations"
+            android:visibility="gone"
+            app:boxBackgroundColor="@android:color/transparent"
+            app:layout_constraintEnd_toEndOf="parent"
+            app:layout_constraintStart_toStartOf="parent"
+            app:layout_constraintTop_toBottomOf="@id/email_inputlayout"
+
+            >
+
+            <com.google.android.material.textfield.TextInputEditText
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+
+                android:focusable="false" />
+
+        </com.google.android.material.textfield.TextInputLayout>
+
+
+        <ImageView
+            android:id="@+id/arrow_back_imgview"
+            android:layout_width="@dimen/_25sdp"
+            android:layout_height="@dimen/_20sdp"
+            android:layout_marginStart="@dimen/_10sdp"
+            android:layout_marginTop="@dimen/_8sdp"
+            android:src="@drawable/ic_baseline_arrow_back_24"
+            app:layout_constraintStart_toStartOf="parent"
+            app:layout_constraintTop_toTopOf="parent"
+            app:tint="@color/black" />
+
+
+
+        <de.hdodenhof.circleimageview.CircleImageView
+            android:id="@+id/profile_image"
+            android:layout_width="@dimen/_70sdp"
+            android:layout_height="@dimen/_70sdp"
+            android:layout_marginTop="@dimen/_100sdp"
+            android:src="@drawable/avatar"
+            app:civ_border_color="@color/black"
+            app:civ_border_width="2dp"
+            app:layout_constraintEnd_toEndOf="parent"
+            app:layout_constraintStart_toStartOf="parent"
+            app:layout_constraintTop_toTopOf="parent" />
+
+
+
+
+        <ImageView
+            android:id="@+id/camera_"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:src="@drawable/ic_camera_"
+            app:layout_constraintBottom_toBottomOf="@+id/profile_image"
+            app:layout_constraintEnd_toEndOf="@+id/profile_image" />
+
+
+        <TextView
+            android:id="@+id/user_name_tv"
+            android:layout_width="0dp"
+            android:layout_height="wrap_content"
+            android:gravity="center"
+            android:padding="@dimen/_5sdp"
+            android:text="User Name"
+            android:textColor="@color/black"
+            android:textSize="@dimen/_14ssp"
+            android:textStyle="bold"
+            app:layout_constraintEnd_toEndOf="parent"
+            app:layout_constraintStart_toStartOf="parent"
+            app:layout_constraintTop_toBottomOf="@id/profile_image" />
+
+
+        <com.google.android.material.textfield.TextInputLayout
+            android:id="@+id/bio_inputlayout"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:layout_marginStart="@dimen/_20sdp"
+            android:layout_marginTop="@dimen/_20sdp"
+            android:layout_marginEnd="@dimen/_20sdp"
+            android:background="@android:color/transparent"
+            android:hint="Update Bio"
+            app:boxBackgroundColor="@android:color/transparent"
+            app:layout_constraintEnd_toEndOf="parent"
+            app:layout_constraintStart_toStartOf="parent"
+            app:layout_constraintTop_toBottomOf="@id/user_name_tv"
+
+            >
+
+            <com.google.android.material.textfield.TextInputEditText
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                />
+
+        </com.google.android.material.textfield.TextInputLayout>
+
+
+        <com.google.android.material.button.MaterialButton
+            android:id="@+id/update_profile"
+            android:layout_width="@dimen/_150sdp"
+            android:layout_height="wrap_content"
+            android:layout_marginTop="@dimen/_30sdp"
+            android:layout_marginBottom="@dimen/_10sdp"
+            android:backgroundTint="@color/purple_700"
+            android:text="@string/update_profile"
+            android:textAllCaps="false"
+            app:cornerRadius="@dimen/_40sdp"
+            app:layout_constraintEnd_toEndOf="parent"
+            app:layout_constraintStart_toStartOf="parent"
+            app:layout_constraintTop_toBottomOf="@id/bio_inputlayout" />
+
+        <ImageView
+            android:layout_width="0dp"
+            android:layout_height="@dimen/_130sdp"
+            android:scaleType="fitXY"
+            android:src="@drawable/profile_bg"
+            app:layout_constraintBottom_toBottomOf="parent"
+            app:layout_constraintEnd_toEndOf="parent"
+            app:layout_constraintStart_toStartOf="parent" />
+    </androidx.constraintlayout.widget.ConstraintLayout>
+</layout>
Index: app/src/main/res/layout/info_message_item_layout.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/info_message_item_layout.xml b/app/src/main/res/layout/info_message_item_layout.xml
new file mode 100644
--- /dev/null	(date 1662127120000)
+++ b/app/src/main/res/layout/info_message_item_layout.xml	(date 1662127120000)
@@ -0,0 +1,27 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<layout>
+
+
+<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:padding="10dp">
+
+    <TextView
+        android:id="@+id/tv_msg"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text=""
+        android:gravity="center"
+        android:textColor="@color/black"
+        android:textSize="@dimen/_12ssp"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toTopOf="parent"
+         />
+
+</androidx.constraintlayout.widget.ConstraintLayout>
+</layout>
Index: app/src/main/res/layout/fragment_single_live_chat.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/fragment_single_live_chat.xml b/app/src/main/res/layout/fragment_single_live_chat.xml
new file mode 100644
--- /dev/null	(date 1663328138000)
+++ b/app/src/main/res/layout/fragment_single_live_chat.xml	(date 1663328138000)
@@ -0,0 +1,154 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<layout xmlns:app="http://schemas.android.com/apk/res-auto">
+
+
+    <androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
+        xmlns:tools="http://schemas.android.com/tools"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        tools:context=".ui.fragments.SingleLiveChatFragment">
+
+        <RelativeLayout
+            android:id="@+id/toolbar_layout"
+            android:layout_width="match_parent"
+            android:layout_height="?actionBarSize"
+            android:background="@color/purple_700"
+            app:layout_constraintEnd_toEndOf="parent"
+            app:layout_constraintStart_toStartOf="parent"
+            app:layout_constraintTop_toTopOf="parent">
+
+            <ImageView
+                android:id="@+id/arrow_back_imgview"
+                android:layout_width="@dimen/_25sdp"
+                android:layout_height="@dimen/_20sdp"
+                android:layout_alignParentStart="true"
+                android:layout_centerVertical="true"
+                android:layout_marginStart="@dimen/_5sdp"
+                android:src="@drawable/ic_baseline_arrow_back_24" />
+
+            <de.hdodenhof.circleimageview.CircleImageView
+                android:id="@+id/receiver_imageview"
+                android:layout_width="@dimen/_25sdp"
+                android:layout_height="@dimen/_25sdp"
+                android:layout_centerVertical="true"
+                android:layout_toEndOf="@id/arrow_back_imgview"
+                android:src="@drawable/no_image" />
+
+            <LinearLayout
+                android:id="@+id/group_name_layout"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:layout_alignParentEnd="true"
+                android:layout_centerVertical="true"
+                android:layout_marginStart="@dimen/_5sdp"
+                android:layout_toEndOf="@id/receiver_imageview"
+                android:orientation="vertical">
+
+                <TextView
+                    android:id="@+id/receiver_name"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:text="Receiver Name"
+                    android:textColor="@color/white"
+                    android:textSize="@dimen/_14ssp"
+                    android:textStyle="bold" />
+
+                <TextView
+                    android:id="@+id/status_tv"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:text="@string/online"
+                    android:textColor="@color/white"
+                    android:textSize="@dimen/_8ssp" />
+
+            </LinearLayout>
+
+        </RelativeLayout>
+
+        <androidx.recyclerview.widget.RecyclerView
+            android:id="@+id/chatmessage_recycler_view"
+            android:layout_width="0dp"
+            android:layout_height="0dp"
+            app:layout_constraintBottom_toTopOf="@id/linear_bottom"
+            app:layout_constraintEnd_toEndOf="parent"
+            app:layout_constraintStart_toStartOf="parent"
+            app:layout_constraintTop_toBottomOf="@id/toolbar_layout" />
+        <androidx.constraintlayout.widget.ConstraintLayout
+            android:id="@+id/linear_bottom"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            app:layout_constraintStart_toStartOf="parent"
+            app:layout_constraintBottom_toBottomOf="parent"
+            app:layout_constraintEnd_toEndOf="parent">
+
+            <androidx.cardview.widget.CardView
+                android:id="@+id/rl_bottom"
+                android:layout_width="0dp"
+                android:layout_height="wrap_content"
+                android:layout_marginStart="@dimen/_10sdp"
+                android:layout_marginBottom="@dimen/_10sdp"
+                android:maxHeight="@dimen/_100sdp"
+                android:minHeight="@dimen/_30sdp"
+                app:cardBackgroundColor="@color/white"
+                app:cardCornerRadius="@dimen/_15sdp"
+                app:cardElevation="@dimen/_8sdp"
+                app:layout_constraintBottom_toBottomOf="parent"
+                app:layout_constraintEnd_toStartOf="@id/checkmark"
+                app:layout_constraintStart_toStartOf="parent">
+
+
+                <androidx.constraintlayout.widget.ConstraintLayout
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:layout_gravity="center_vertical">
+
+
+                    <com.hendraanggrian.appcompat.widget.SocialAutoCompleteTextView
+                        android:id="@+id/input_message"
+                        android:layout_width="match_parent"
+                        android:layout_height="wrap_content"
+                        android:layout_marginLeft="5dp"
+                        android:background="@null"
+                        android:gravity="center_vertical"
+                        android:hint="@string/message"
+                        android:paddingStart="@dimen/_5sdp"
+                        android:textColor="@color/black"
+                        android:textSize="14sp"
+                        app:mentionColor="@color/purple_700"
+                        app:socialFlags="mention"
+                        android:scrollbars="vertical"
+                        android:inputType="textCapSentences|textMultiLine"
+                        android:layout_marginHorizontal="@dimen/_5sdp"
+                        app:layout_constraintStart_toStartOf="parent"
+                        app:layout_constraintEnd_toEndOf="parent"
+                        app:layout_constraintTop_toTopOf="parent"
+                        app:layout_constraintBottom_toBottomOf="parent"
+                        android:maxHeight="@dimen/_100sdp"
+                        android:minHeight="@dimen/_30sdp"
+                        />
+
+                </androidx.constraintlayout.widget.ConstraintLayout>
+
+
+            </androidx.cardview.widget.CardView>
+
+            <ImageView
+                android:id="@+id/checkmark"
+                android:layout_width="@dimen/_35sdp"
+                android:layout_height="@dimen/_35sdp"
+                android:layout_alignParentRight="true"
+                android:layout_centerVertical="true"
+                android:paddingStart="@dimen/_5sdp"
+                android:paddingTop="@dimen/_5sdp"
+                android:paddingEnd="@dimen/_10sdp"
+                android:src="@drawable/send_icon"
+                app:layout_constraintBottom_toBottomOf="@id/rl_bottom"
+                app:layout_constraintEnd_toEndOf="parent" />
+
+
+        </androidx.constraintlayout.widget.ConstraintLayout>
+
+
+    </androidx.constraintlayout.widget.ConstraintLayout>
+</layout>
Index: app/src/main/res/layout/fragment_subscription_status.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/fragment_subscription_status.xml b/app/src/main/res/layout/fragment_subscription_status.xml
new file mode 100644
--- /dev/null	(date 1665135792936)
+++ b/app/src/main/res/layout/fragment_subscription_status.xml	(date 1665135792936)
@@ -0,0 +1,45 @@
+<?xml version="1.0" encoding="utf-8"?>
+<layout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    xmlns:app="http://schemas.android.com/apk/res-auto">
+
+    <data>
+
+    </data>
+
+    <androidx.constraintlayout.widget.ConstraintLayout
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        tools:context=".ui.fragments.SubscriptionStatus">
+
+        <!-- TODO: Update blank fragment layout -->
+        <TextView
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="verifying subscription"
+            android:textAllCaps="true"
+            android:textStyle="bold"
+            android:textSize="22sp"
+            android:textColor="@color/black"
+            android:layout_marginTop="30dp"
+            app:layout_constraintStart_toStartOf="parent"
+            app:layout_constraintEnd_toEndOf="parent"
+            app:layout_constraintTop_toTopOf="parent"
+            />
+
+
+
+        <de.hdodenhof.circleimageview.CircleImageView
+            android:layout_width="@dimen/_100sdp"
+            android:layout_height="@dimen/_100sdp"
+            app:layout_constraintBottom_toBottomOf="parent"
+            app:layout_constraintStart_toStartOf="parent"
+            app:layout_constraintEnd_toEndOf="parent"
+            android:layout_marginBottom="40dp"
+            app:civ_circle_background_color="@color/purple_700"
+           app:civ_border_width="20dp"
+            app:civ_border_color="@color/purple_700"
+            android:src="@drawable/app_logo" />
+
+    </androidx.constraintlayout.widget.ConstraintLayout>
+</layout>
\ No newline at end of file
Index: app/src/main/res/layout/participent_grid_itemview.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/participent_grid_itemview.xml b/app/src/main/res/layout/participent_grid_itemview.xml
new file mode 100644
--- /dev/null	(date 1662127120000)
+++ b/app/src/main/res/layout/participent_grid_itemview.xml	(date 1662127120000)
@@ -0,0 +1,30 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<layout xmlns:android="http://schemas.android.com/apk/res/android">
+
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:orientation="vertical"
+        android:layout_marginTop="@dimen/_5sdp"
+        android:gravity="center">
+
+        <de.hdodenhof.circleimageview.CircleImageView
+            android:id="@+id/user_imageview"
+            android:layout_width="@dimen/_60sdp"
+            android:layout_height="@dimen/_60sdp"
+            android:src="@drawable/ic_launcher_background" />
+
+        <TextView
+            android:id="@+id/username_tv"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:text="ga"
+            android:textColor="@color/black"
+            android:textSize="@dimen/_14ssp"
+            android:padding="@dimen/_5sdp"
+            android:gravity="center" />
+
+    </LinearLayout>
+</layout>
Index: app/src/main/res/layout/selected_participent_itemview.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/selected_participent_itemview.xml b/app/src/main/res/layout/selected_participent_itemview.xml
new file mode 100644
--- /dev/null	(date 1662127120000)
+++ b/app/src/main/res/layout/selected_participent_itemview.xml	(date 1662127120000)
@@ -0,0 +1,42 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<layout xmlns:android="http://schemas.android.com/apk/res/android">
+
+
+    <RelativeLayout
+        android:layout_width="wrap_content"
+        android:layout_height="@dimen/_50sdp"
+        android:gravity="center"
+        android:padding="@dimen/_5sdp">
+
+        <de.hdodenhof.circleimageview.CircleImageView
+            android:id="@+id/user_imageview"
+            android:layout_width="@dimen/_30sdp"
+            android:layout_height="@dimen/_30sdp"
+            android:src="@drawable/ic_launcher_background"/>
+
+        <ImageView
+            android:id="@+id/selected_imageview"
+            android:layout_width="@dimen/_10sdp"
+            android:layout_height="@dimen/_10sdp"
+            android:src="@drawable/unselect_icon"
+            android:layout_alignEnd="@id/user_imageview"
+            android:layout_alignBottom="@id/user_imageview"
+            android:visibility="gone"
+            />
+
+
+        <TextView
+            android:id="@+id/username_tv"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:layout_below="@id/user_imageview"
+            android:layout_alignStart="@+id/user_imageview"
+            android:layout_alignEnd="@+id/user_imageview"
+            android:text="Jack"
+            android:textColor="@color/black"
+            android:textSize="@dimen/_6ssp"
+            android:gravity="center" />
+
+    </RelativeLayout>
+</layout>
Index: app/src/main/res/layout/particiepents_vertial_itemview.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/particiepents_vertial_itemview.xml b/app/src/main/res/layout/particiepents_vertial_itemview.xml
new file mode 100644
--- /dev/null	(date 1663161590000)
+++ b/app/src/main/res/layout/particiepents_vertial_itemview.xml	(date 1663161590000)
@@ -0,0 +1,95 @@
+<?xml version="1.0" encoding="utf-8"?>
+<layout xmlns:app="http://schemas.android.com/apk/res-auto">
+
+    <androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
+        android:layout_width="match_parent"
+        android:layout_height="@dimen/_50sdp">
+
+        <de.hdodenhof.circleimageview.CircleImageView
+            android:id="@+id/user_imageview"
+            android:layout_width="@dimen/_40sdp"
+            android:layout_height="@dimen/_40sdp"
+            app:layout_constraintTop_toTopOf="parent"
+            app:layout_constraintStart_toStartOf="parent"
+            app:layout_constraintBottom_toBottomOf="parent"
+            android:layout_marginStart="@dimen/_5sdp"
+            android:src="@drawable/ic_launcher_background"
+            />
+
+        <ImageView
+            android:id="@+id/selected_imageview"
+            android:layout_width="@dimen/_15sdp"
+            android:layout_height="@dimen/_15sdp"
+            android:src="@drawable/selcted"
+            android:visibility="gone"
+            app:layout_constraintEnd_toEndOf="@id/user_imageview"
+            app:layout_constraintBottom_toBottomOf="@id/user_imageview"
+            />
+
+
+        <RelativeLayout
+            android:layout_width="0dp"
+            android:layout_height="wrap_content"
+            app:layout_constraintTop_toTopOf="@id/user_imageview"
+            app:layout_constraintBottom_toBottomOf="@id/user_imageview"
+            app:layout_constraintStart_toEndOf="@id/user_imageview"
+            app:layout_constraintEnd_toEndOf="parent"
+            android:layout_marginEnd="@dimen/_5sdp"
+            android:layout_marginStart="@dimen/_10sdp"
+
+            >
+
+            <TextView
+                android:id="@+id/username_tv"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:text="Jack"
+                android:textColor="@color/black"
+                android:textSize="@dimen/_14ssp"
+                android:textStyle="bold" />
+
+            <TextView
+                android:id="@+id/user_bio_tv"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:layout_below="@id/username_tv"
+
+                android:text="Hey there! I'm using whtsapp" />
+
+            <TextView
+                android:id="@+id/admin_tv"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_alignTop="@id/username_tv"
+                android:layout_alignBottom="@id/username_tv"
+                android:layout_alignParentEnd="true"
+                android:layout_marginEnd="@dimen/_5sdp"
+                android:gravity="center"
+                android:insetTop="0dp"
+                android:insetBottom="0dp"
+                android:text="@string/group_admin"
+                android:textColor="@color/purple_700"
+                android:textSize="@dimen/_8ssp"
+
+                />
+
+
+            <TextView
+                android:id="@+id/tv_count"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_alignTop="@id/username_tv"
+                android:layout_alignBottom="@id/username_tv"
+                android:layout_alignParentEnd="true"
+                android:layout_marginEnd="@dimen/_5sdp"
+                android:background="@drawable/blue_circle"
+                android:paddingHorizontal="7dp"
+                android:paddingVertical="2dp"
+                android:text="0"
+                android:visibility="invisible"
+                android:textColor="@color/white" />
+
+        </RelativeLayout>
+
+    </androidx.constraintlayout.widget.ConstraintLayout>
+</layout>
Index: app/src/main/res/layout/participants_chats.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/participants_chats.xml b/app/src/main/res/layout/participants_chats.xml
new file mode 100644
--- /dev/null	(date 1663594314000)
+++ b/app/src/main/res/layout/participants_chats.xml	(date 1663594314000)
@@ -0,0 +1,87 @@
+<?xml version="1.0" encoding="utf-8"?>
+<layout xmlns:app="http://schemas.android.com/apk/res-auto">
+
+    <androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
+        android:layout_width="match_parent"
+        android:layout_height="@dimen/_50sdp">
+
+        <de.hdodenhof.circleimageview.CircleImageView
+            android:id="@+id/user_imageview"
+            android:layout_width="@dimen/_40sdp"
+            android:layout_height="@dimen/_40sdp"
+            android:layout_marginStart="@dimen/_5sdp"
+            android:src="@drawable/no_image"
+            app:layout_constraintBottom_toBottomOf="parent"
+            app:layout_constraintStart_toStartOf="parent"
+            app:layout_constraintTop_toTopOf="parent" />
+
+
+        <RelativeLayout
+            android:layout_width="0dp"
+            android:layout_height="wrap_content"
+            app:layout_constraintBottom_toBottomOf="@id/user_imageview"
+            app:layout_constraintEnd_toStartOf="@id/time_layout"
+            app:layout_constraintStart_toEndOf="@id/user_imageview"
+            app:layout_constraintTop_toTopOf="@id/user_imageview"
+            android:paddingStart="@dimen/_5sdp"
+
+
+            >
+
+            <TextView
+                android:id="@+id/username_tv"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:text="Jack"
+                android:textColor="@color/black"
+                android:textSize="@dimen/_14ssp"
+                android:textStyle="bold" />
+
+            <TextView
+                android:id="@+id/user_bio_tv"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:layout_below="@id/username_tv"
+                android:text="Hey there! I'm using whtsapp"
+                android:maxLines="1"
+                android:ellipsize="end"
+                />
+
+
+        </RelativeLayout>
+
+        <LinearLayout
+            android:id="@+id/time_layout"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_marginStart="@dimen/_10sdp"
+            android:layout_marginEnd="@dimen/_5sdp"
+            android:gravity="center"
+            android:orientation="vertical"
+            app:layout_constraintBottom_toBottomOf="parent"
+            app:layout_constraintEnd_toEndOf="parent"
+            app:layout_constraintTop_toTopOf="parent">
+
+            <TextView
+                android:id="@+id/tv_time"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:text="9:04 AM"
+                android:textColor="@color/purple_700" />
+
+            <TextView
+                android:id="@+id/tv_count"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_marginTop="5dp"
+                android:background="@drawable/blue_circle"
+                android:paddingHorizontal="7dp"
+                android:paddingVertical="2dp"
+                android:text="0"
+                android:visibility="invisible"
+                android:textColor="@color/white" />
+
+        </LinearLayout>
+
+    </androidx.constraintlayout.widget.ConstraintLayout>
+</layout>
Index: build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/build.gradle b/build.gradle
new file mode 100644
--- /dev/null	(date 1662127120000)
+++ b/build.gradle	(date 1662127120000)
@@ -0,0 +1,29 @@
+// Top-level build file where you can add configuration options common to all sub-projects/modules.
+
+
+buildscript
+        {
+            repositories {
+                google()
+                jcenter()
+                mavenCentral()
+            }
+            dependencies {
+                classpath 'com.google.gms:google-services:4.3.13'
+                def nav_version = "2.4.2"
+                classpath "androidx.navigation:navigation-safe-args-gradle-plugin:$nav_version"
+
+            }
+        }
+
+
+
+plugins {
+    id 'com.android.application' version '7.2.0' apply false
+    id 'com.android.library' version '7.2.0' apply false
+    id 'org.jetbrains.kotlin.android' version '1.7.10' apply false
+}
+
+task clean(type: Delete) {
+    delete rootProject.buildDir
+}
\ No newline at end of file
Index: app/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/build.gradle b/app/build.gradle
new file mode 100644
--- /dev/null	(date 1674049695279)
+++ b/app/build.gradle	(date 1674049695279)
@@ -0,0 +1,99 @@
+plugins {
+    id 'com.android.application'
+    id 'org.jetbrains.kotlin.android'
+    id 'androidx.navigation.safeargs'
+    id 'kotlin-android'
+    id 'kotlin-kapt'
+    id 'com.google.gms.google-services'
+}
+
+android {
+    compileSdk 32
+
+    defaultConfig {
+        applicationId "com.trimad.ichat"
+        minSdk 23
+        targetSdk 32
+        versionCode 5
+
+        versionName "1.1.5"
+
+        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
+    }
+    buildFeatures{
+        dataBinding = true
+    }
+
+    buildTypes {
+        release {
+            minifyEnabled false
+            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
+        }
+    }
+    compileOptions {
+        sourceCompatibility JavaVersion.VERSION_11
+        targetCompatibility JavaVersion.VERSION_11
+    }
+    kotlinOptions {
+        jvmTarget = '1.8'
+    }
+}
+
+dependencies {
+
+    implementation 'androidx.core:core-ktx:1.8.0'
+    implementation 'androidx.appcompat:appcompat:1.5.0'
+    implementation 'com.google.android.material:material:1.6.1'
+    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
+    testImplementation 'junit:junit:4.13.2'
+    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
+    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
+
+    implementation 'com.github.bumptech.glide:glide:4.13.2'
+    annotationProcessor 'com.github.bumptech.glide:compiler:4.13.2'
+
+    // sizes library
+    implementation 'com.intuit.sdp:sdp-android:1.0.6'
+    implementation 'com.intuit.ssp:ssp-android:1.0.6'
+
+    // animation library
+    implementation 'com.airbnb.android:lottie:4.2.2'
+    implementation 'de.hdodenhof:circleimageview:3.1.0'
+
+    implementation platform('com.google.firebase:firebase-bom:30.3.2')
+    implementation 'com.google.firebase:firebase-analytics'
+    implementation 'com.google.firebase:firebase-firestore'
+    implementation 'com.google.firebase:firebase-storage'
+    implementation 'com.google.firebase:firebase-messaging'
+    implementation 'com.google.firebase:firebase-auth'
+
+    // volley
+    implementation 'com.android.volley:volley:1.2.1'
+
+    implementation 'com.google.code.gson:gson:2.9.1'
+
+    implementation "com.hendraanggrian.appcompat:socialview-commons:+"
+    // Lifecycle dependency
+    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
+    implementation 'com.kaopiz:kprogresshud:1.2.0'
+    // Kotlin jetPack Navigation Ui
+    implementation "androidx.navigation:navigation-fragment-ktx:2.5.1"
+    implementation "androidx.navigation:navigation-ui-ktx:2.5.1"
+
+    implementation 'io.github.ParkSangGwon:tedimagepicker:1.2.8'
+
+
+    // for future api
+  //  implementation 'com.google.api:api-common:2.2.1'
+
+
+
+    // Coroutines dependency
+    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.9'
+    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.9'
+
+    // LiveData
+ //   implementation("androidx.lifecycle:lifecycle-livedata-ktx:2.6.0-alpha02")
+
+
+}
\ No newline at end of file
Index: app/src/main/res/layout/user_item_view.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/user_item_view.xml b/app/src/main/res/layout/user_item_view.xml
new file mode 100644
--- /dev/null	(date 1662127120000)
+++ b/app/src/main/res/layout/user_item_view.xml	(date 1662127120000)
@@ -0,0 +1,93 @@
+<?xml version="1.0" encoding="utf-8"?>
+<layout xmlns:app="http://schemas.android.com/apk/res-auto">
+
+    <androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
+        android:layout_width="match_parent"
+        android:layout_height="@dimen/_70sdp"
+        android:background="@color/white">
+
+
+        <de.hdodenhof.circleimageview.CircleImageView
+            android:id="@+id/user_imageview"
+            android:layout_width="@dimen/_50sdp"
+            android:layout_height="@dimen/_50sdp"
+            app:layout_constraintTop_toTopOf="parent"
+            app:layout_constraintStart_toStartOf="parent"
+            app:layout_constraintBottom_toBottomOf="parent"
+            android:layout_marginStart="@dimen/_15sdp"
+            android:src="@drawable/ic_launcher_background"
+            />
+
+        <LinearLayout
+            android:layout_width="0dp"
+            android:layout_height="0dp"
+            app:layout_constraintStart_toEndOf="@id/user_imageview"
+            app:layout_constraintEnd_toStartOf="@id/end_layout"
+            app:layout_constraintTop_toTopOf="@id/user_imageview"
+            app:layout_constraintBottom_toBottomOf="@id/user_imageview"
+            android:layout_marginStart="@dimen/_5sdp"
+            android:layout_marginEnd="@dimen/_5sdp"
+            android:gravity="center_vertical"
+            android:orientation="vertical"
+            >
+
+            <TextView
+                android:id="@+id/user_name_tv"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:text="User Name A"
+                android:textSize="@dimen/_16ssp"
+                android:textColor="@color/black"
+                android:textStyle="bold"
+                />
+            <TextView
+                android:id="@+id/user_last_msg_tv"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:text="last message"
+                android:textSize="@dimen/_12ssp"
+                android:textColor="@color/black"
+                android:maxLines="1"
+                />
+
+        </LinearLayout>
+
+        <LinearLayout
+            android:id="@+id/end_layout"
+            android:layout_width="wrap_content"
+            android:layout_height="0dp"
+            app:layout_constraintEnd_toEndOf="parent"
+            android:layout_marginEnd="@dimen/_15sdp"
+            app:layout_constraintTop_toTopOf="@id/user_imageview"
+            app:layout_constraintBottom_toBottomOf="@id/user_imageview"
+            android:orientation="vertical"
+            android:gravity="center"
+            >
+
+            <TextView
+                android:id="@+id/last_seen_tv"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:text="9:04 am"
+                android:textColor="@color/purple_700"
+                android:textSize="@dimen/_14ssp"
+                android:layout_marginBottom="@dimen/_5sdp"
+                />
+
+            <TextView
+                android:id="@+id/nmbr_notification_tv"
+                android:layout_width="@dimen/_15sdp"
+                android:layout_height="@dimen/_15sdp"
+                android:background="@drawable/blue_circle"
+                android:layout_gravity="end"
+                android:layout_marginTop="@dimen/_5sdp"
+                android:text="5"
+                android:gravity="center"
+                android:textColor="@color/white"
+                android:textSize="@dimen/_8ssp"
+                />
+
+        </LinearLayout>
+
+    </androidx.constraintlayout.widget.ConstraintLayout>
+</layout>
Index: app/src/main/res/layout/user_message_item_view.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/user_message_item_view.xml b/app/src/main/res/layout/user_message_item_view.xml
new file mode 100644
--- /dev/null	(date 1665469239974)
+++ b/app/src/main/res/layout/user_message_item_view.xml	(date 1665469239974)
@@ -0,0 +1,106 @@
+<?xml version="1.0" encoding="utf-8"?>
+<layout>
+
+<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:padding="10dp">
+
+    <de.hdodenhof.circleimageview.CircleImageView
+        android:id="@+id/iv_user"
+        android:layout_width="@dimen/_24sdp"
+        android:layout_height="@dimen/_24sdp"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintTop_toTopOf="parent" />
+    <androidx.cardview.widget.CardView
+        android:id="@+id/cv"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        app:cardCornerRadius="@dimen/_5sdp"
+        app:cardBackgroundColor="#F1F1F1"
+        android:layout_marginTop="@dimen/_3sdp"
+        android:layout_marginEnd="@dimen/_3sdp"
+
+        app:layout_constraintEnd_toStartOf="@+id/iv_user"
+        app:layout_constraintTop_toTopOf="@+id/iv_user"
+
+        >
+        <androidx.constraintlayout.widget.ConstraintLayout
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:padding="@dimen/_5sdp"
+            >
+
+
+            <TextView
+                android:id="@+id/tv_name"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:maxLines="1"
+                android:textColor="#FF0000"
+                android:text="ali ahmad"
+                android:visibility="gone"
+                app:layout_constraintTop_toTopOf="parent"
+                app:layout_constraintStart_toStartOf="parent"/>
+
+            <com.hendraanggrian.appcompat.widget.SocialTextView
+                android:id="@+id/tv_msg"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:text="jxhahsjsdjsjdjshdjsdsdsdsdjsdjsdjsjdjshdshdhhsa"
+                android:padding="@dimen/_3sdp"
+                app:socialFlags="mention"
+                android:maxWidth="@dimen/_150sdp"
+                app:mentionColor="@color/purple_700"
+                android:textColor="@color/black"
+                android:textSize="@dimen/_10ssp"
+                android:linksClickable="true"
+                android:autoLink="all"
+                android:textIsSelectable="true"
+                app:layout_constraintTop_toBottomOf="@id/tv_name"
+                app:layout_constraintStart_toStartOf="parent"
+                />
+
+            <ImageView
+                android:id="@+id/msg_status"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:src="@drawable/ic_receive"
+                app:layout_constraintTop_toTopOf="@id/tv_time"
+                app:layout_constraintEnd_toEndOf="parent"
+                app:layout_constraintBottom_toBottomOf="@id/tv_time"
+                />
+
+
+            <TextView
+                android:id="@+id/tv_time"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                app:layout_constraintTop_toBottomOf="@id/tv_msg"
+                app:layout_constraintEnd_toStartOf="@id/msg_status"
+                android:layout_marginEnd="@dimen/_2sdp"
+                android:text="12:04"/>
+
+
+
+        </androidx.constraintlayout.widget.ConstraintLayout>
+
+
+
+    </androidx.cardview.widget.CardView>
+
+    <TextView
+        android:id="@+id/tv_date"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        app:layout_constraintTop_toBottomOf="@id/cv"
+        app:layout_constraintEnd_toEndOf="@id/cv"
+        android:layout_marginEnd="@dimen/_2sdp"
+        android:textSize="10sp"
+        android:layout_marginTop="3dp"
+        android:text="12:04"/>
+
+</androidx.constraintlayout.widget.ConstraintLayout>
+</layout>
Index: settings.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/settings.gradle b/settings.gradle
new file mode 100644
--- /dev/null	(date 1662127120000)
+++ b/settings.gradle	(date 1662127120000)
@@ -0,0 +1,29 @@
+pluginManagement {
+    repositories {
+        gradlePluginPortal()
+        google()
+        mavenCentral()
+
+        maven {
+            url "https://maven.google.com"
+        }
+        jcenter()
+    }
+}
+dependencyResolutionManagement {
+    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
+    repositories {
+        google()
+        mavenCentral()
+
+        maven {
+            url "https://maven.google.com"
+        }
+
+        jcenter()
+
+        maven { url 'https://jitpack.io' }
+    }
+}
+rootProject.name = "ChatApp"
+include ':app'
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
--- /dev/null	(date 1663908303677)
+++ b/.idea/vcs.xml	(date 1663908303677)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: gradle/wrapper/gradle-wrapper.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
new file mode 100644
--- /dev/null	(date 1662127120000)
+++ b/gradle/wrapper/gradle-wrapper.properties	(date 1662127120000)
@@ -0,0 +1,6 @@
+#Sat Aug 13 10:22:56 PKT 2022
+distributionBase=GRADLE_USER_HOME
+distributionUrl=https\://services.gradle.org/distributions/gradle-7.3.3-bin.zip
+distributionPath=wrapper/dists
+zipStorePath=wrapper/dists
+zipStoreBase=GRADLE_USER_HOME
Index: app/google-services.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/google-services.json b/app/google-services.json
new file mode 100644
--- /dev/null	(date 1663689666000)
+++ b/app/google-services.json	(date 1663689666000)
@@ -0,0 +1,68 @@
+{
+  "project_info": {
+    "project_number": "824873785456",
+    "project_id": "chatapp-faeba",
+    "storage_bucket": "chatapp-faeba.appspot.com"
+  },
+  "client": [
+    {
+      "client_info": {
+        "mobilesdk_app_id": "1:824873785456:android:09fbb4414a38daaa2bfcb5",
+        "android_client_info": {
+          "package_name": "com.chat.app"
+        }
+      },
+      "oauth_client": [
+        {
+          "client_id": "824873785456-qre7k0nkr2jo04655lc01h6gr6p6gll3.apps.googleusercontent.com",
+          "client_type": 3
+        }
+      ],
+      "api_key": [
+        {
+          "current_key": "AIzaSyAhqGKSJw7uQqEwmt-TKHDnCPHVIRuXJT0"
+        }
+      ],
+      "services": {
+        "appinvite_service": {
+          "other_platform_oauth_client": [
+            {
+              "client_id": "824873785456-qre7k0nkr2jo04655lc01h6gr6p6gll3.apps.googleusercontent.com",
+              "client_type": 3
+            }
+          ]
+        }
+      }
+    },
+    {
+      "client_info": {
+        "mobilesdk_app_id": "1:824873785456:android:c87edcd5a895d3e92bfcb5",
+        "android_client_info": {
+          "package_name": "com.trimad.ichat"
+        }
+      },
+      "oauth_client": [
+        {
+          "client_id": "824873785456-qre7k0nkr2jo04655lc01h6gr6p6gll3.apps.googleusercontent.com",
+          "client_type": 3
+        }
+      ],
+      "api_key": [
+        {
+          "current_key": "AIzaSyAhqGKSJw7uQqEwmt-TKHDnCPHVIRuXJT0"
+        }
+      ],
+      "services": {
+        "appinvite_service": {
+          "other_platform_oauth_client": [
+            {
+              "client_id": "824873785456-qre7k0nkr2jo04655lc01h6gr6p6gll3.apps.googleusercontent.com",
+              "client_type": 3
+            }
+          ]
+        }
+      }
+    }
+  ],
+  "configuration_version": "1"
+}
\ No newline at end of file
Index: .idea/deploymentTargetDropDown.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/deploymentTargetDropDown.xml b/.idea/deploymentTargetDropDown.xml
new file mode 100644
--- /dev/null	(date 1666078160635)
+++ b/.idea/deploymentTargetDropDown.xml	(date 1666078160635)
@@ -0,0 +1,16 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="deploymentTargetDropDown">
+    <runningDeviceTargetsSelectedWithDialog>
+      <Target>
+        <type value="RUNNING_DEVICE_TARGET" />
+        <deviceKey>
+          <Key>
+            <type value="SERIAL_NUMBER" />
+            <value value="127.0.0.1:21503" />
+          </Key>
+        </deviceKey>
+      </Target>
+    </runningDeviceTargetsSelectedWithDialog>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/gradle.xml b/.idea/gradle.xml
new file mode 100644
--- /dev/null	(date 1664174476131)
+++ b/.idea/gradle.xml	(date 1664174476131)
@@ -0,0 +1,19 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="GradleMigrationSettings" migrationVersion="1" />
+  <component name="GradleSettings">
+    <option name="linkedExternalProjectsSettings">
+      <GradleProjectSettings>
+        <option name="testRunner" value="GRADLE" />
+        <option name="distributionType" value="DEFAULT_WRAPPED" />
+        <option name="externalProjectPath" value="$PROJECT_DIR$" />
+        <option name="modules">
+          <set>
+            <option value="$PROJECT_DIR$" />
+            <option value="$PROJECT_DIR$/app" />
+          </set>
+        </option>
+      </GradleProjectSettings>
+    </option>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/compiler.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/compiler.xml b/.idea/compiler.xml
new file mode 100644
--- /dev/null	(date 1663908303686)
+++ b/.idea/compiler.xml	(date 1663908303686)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="CompilerConfiguration">
+    <bytecodeTargetLevel target="11" />
+  </component>
+</project>
\ No newline at end of file
Index: app/src/main/res/navigation/nav_graph.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/navigation/nav_graph.xml b/app/src/main/res/navigation/nav_graph.xml
new file mode 100644
--- /dev/null	(date 1665467222436)
+++ b/app/src/main/res/navigation/nav_graph.xml	(date 1665467222436)
@@ -0,0 +1,168 @@
+<?xml version="1.0" encoding="utf-8"?>
+<navigation xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:id="@+id/nav_graph"
+    app:startDestination="@id/loginFragment">
+
+    <fragment
+        android:id="@+id/loginFragment"
+        android:name="com.trimad.ichat.ui.fragments.LoginFragment"
+        android:label="SplashFragment">
+        <action
+            android:id="@+id/action_loginFragment_to_homeFragment"
+            app:destination="@id/homeFragment"
+            app:popUpTo="@id/loginFragment"
+            app:popUpToInclusive="true" />
+        <action
+            android:id="@+id/action_loginFragment_to_subscriptionStatus"
+            app:destination="@id/subscriptionStatus"
+            app:popUpTo="@id/nav_graph"
+            app:launchSingleTop="true"
+            app:popUpToInclusive="true"
+            />
+    </fragment>
+    <fragment
+        android:id="@+id/homeFragment"
+        android:name="com.trimad.ichat.ui.fragments.HomeFragment"
+        android:label="fragment_home"
+        tools:layout="@layout/fragment_home">
+        <action
+            android:id="@+id/action_homeFragment_to_newGroupFragment"
+            app:destination="@id/newGroupFragment" />
+
+        <action
+            android:id="@+id/action_homeFragment_to_liveChatFragment"
+            app:destination="@id/liveGroupChatFragment" />
+        <action
+            android:id="@+id/action_homeFragment_to_profileFragment"
+            app:destination="@id/profileFragment" />
+        <action
+            android:id="@+id/action_homeFragment_to_singleLiveChatFragment"
+            app:destination="@id/singleLiveChatFragment" />
+        <action
+            android:id="@+id/action_homeFragment_to_userProfile"
+            app:destination="@id/userProfile" />
+    </fragment>
+    <fragment
+        android:id="@+id/chatFragment"
+        android:name="com.trimad.ichat.ui.fragments.ChatHomeFragment"
+        android:label="fragment_chat"
+        tools:layout="@layout/fragment_chat_home" />
+    <fragment
+        android:id="@+id/groupsFragment"
+        android:name="com.trimad.ichat.ui.fragments.GroupsFragment"
+        android:label="fragment_groups"
+        tools:layout="@layout/fragment_groups">
+
+    </fragment>
+    <fragment
+        android:id="@+id/organizationFragment"
+        android:name="com.trimad.ichat.ui.fragments.OrganizationFragment"
+        android:label="fragment_organization"
+        tools:layout="@layout/fragment_organization" />
+    <fragment
+        android:id="@+id/liveGroupChatFragment"
+        android:name="com.trimad.ichat.ui.fragments.LiveGroupChatFragment"
+        android:label="LiveGroupChatFragment">
+        <action
+            android:id="@+id/action_liveChatFragment_to_groupDetailsFragment"
+            app:destination="@id/groupDetailsFragment"
+            app:popUpTo="@id/liveGroupChatFragment"
+            app:popUpToInclusive="true" />
+        <action
+            android:id="@+id/action_liveGroupChatFragment_to_homeFragment"
+            app:destination="@id/homeFragment"
+            app:popUpTo="@id/nav_graph"
+            app:popUpToInclusive="true"
+            app:launchSingleTop="true"
+
+            />
+    </fragment>
+    <fragment
+        android:id="@+id/newGroupFragment"
+        android:name="com.trimad.ichat.ui.fragments.NewGroupFragment"
+        android:label="NewGroupFragment">
+        <action
+            android:id="@+id/action_newGroupFragment_to_detailsNewGroupFragment"
+            app:destination="@id/detailsNewGroupFragment"
+            app:popUpTo="@id/newGroupFragment"
+            app:popUpToInclusive="false" />
+    </fragment>
+    <fragment
+        android:id="@+id/detailsNewGroupFragment"
+        android:name="com.trimad.ichat.ui.fragments.DetailsNewGroupFragment"
+        android:label="DetailsNewGroupFragment">
+        <action
+            android:id="@+id/action_detailsNewGroupFragment_to_homeFragment"
+            app:destination="@id/homeFragment"
+            app:popUpTo="@id/detailsNewGroupFragment"
+            app:popUpToInclusive="true" />
+    </fragment>
+    <fragment
+        android:id="@+id/groupDetailsFragment"
+        android:name="com.trimad.ichat.ui.fragments.GroupDetailsFragment"
+        android:label="GroupDetailsFragment">
+        <action
+            android:id="@+id/action_groupDetailsFragment_to_addParticipentsFragment"
+            app:destination="@id/addParticipentsFragment"
+            app:popUpTo="@id/groupDetailsFragment"
+            app:popUpToInclusive="false" />
+    </fragment>
+    <fragment
+        android:id="@+id/addParticipentsFragment"
+        android:name="com.trimad.ichat.ui.fragments.AddParticipentsFragment"
+        android:label="AddParticipentsFragment" />
+    <fragment
+        android:id="@+id/profileFragment"
+        android:name="com.trimad.ichat.ui.fragments.ProfileFragment"
+        android:label="ProfileFragment">
+        <action
+            android:id="@+id/action_profileFragment_to_singleLiveChatFragment"
+            app:destination="@id/singleLiveChatFragment"
+            app:popUpTo="@id/profileFragment"
+            app:popUpToInclusive="true" />
+    </fragment>
+    <fragment
+        android:id="@+id/singleLiveChatFragment"
+        android:name="com.trimad.ichat.ui.fragments.SingleLiveChatFragment"
+        android:label="SingleLiveChatFragment" >
+        <action
+            android:id="@+id/action_singleLiveChatFragment_to_chatFragment"
+            app:destination="@id/chatFragment"
+            app:popUpToInclusive="true"
+            app:popUpTo="@id/nav_graph"
+            app:launchSingleTop="true"
+            />
+        <action
+            android:id="@+id/action_singleLiveChatFragment_to_homeFragment"
+            app:destination="@id/homeFragment"
+            app:popUpToInclusive="true"
+            app:popUpTo="@id/nav_graph"
+            app:launchSingleTop="true"
+            />
+    </fragment>
+    <fragment
+        android:id="@+id/userProfile"
+        android:name="com.trimad.ichat.ui.fragments.UserProfile"
+        android:label="UserProfile" />
+
+
+    <action
+        android:id="@+id/action_global_homeFragment"
+        app:destination="@id/homeFragment"
+        app:popUpTo="@id/nav_graph"
+        />
+    <fragment
+        android:id="@+id/subscriptionStatus"
+        android:name="com.trimad.ichat.ui.fragments.SubscriptionStatus"
+        android:label="SubscriptionStatus" >
+        <action
+            android:id="@+id/action_subscriptionStatus_to_homeFragment"
+            app:destination="@id/homeFragment"
+            app:popUpTo="@id/nav_graph"
+            app:launchSingleTop="true"
+            app:popUpToInclusive="true"
+            />
+    </fragment>
+</navigation>
\ No newline at end of file
Index: app/src/main/java/com/trimad/ichat/utils/Utils.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/trimad/ichat/utils/Utils.kt b/app/src/main/java/com/trimad/ichat/utils/Utils.kt
new file mode 100644
--- /dev/null	(date 1663689046000)
+++ b/app/src/main/java/com/trimad/ichat/utils/Utils.kt	(date 1663689046000)
@@ -0,0 +1,72 @@
+package com.trimad.ichat.utils
+
+import android.app.Activity
+import android.content.Context
+import android.net.ConnectivityManager
+import android.view.View
+import android.view.inputmethod.InputMethodManager
+import com.kaopiz.kprogresshud.KProgressHUD
+import com.trimad.ichat.models.UserModel
+import com.google.gson.Gson
+import java.util.regex.Pattern
+
+object Utils {
+    fun hideKeyboard(activity: Activity) {
+        val imm = activity.getSystemService(Activity.INPUT_METHOD_SERVICE) as InputMethodManager
+        //Find the currently focused view, so we can grab the correct window token from it.
+        var view = activity.currentFocus
+        //If no view currently has focus, create a new one, just so we can grab a window token from it
+        if (view == null) {
+            view = View(activity)
+        }
+        imm.hideSoftInputFromWindow(view.windowToken, 0)
+    }
+
+    fun isNetworkAvailable(context: Context): Boolean {
+        val connectivityManager =
+            context.getSystemService(Context.CONNECTIVITY_SERVICE) as ConnectivityManager
+        val activeNetworkInfo = connectivityManager.activeNetworkInfo
+        return activeNetworkInfo != null && activeNetworkInfo.isConnected
+    }
+
+    fun isEmailValid(email: String?): Boolean {
+        val expression = "^[\\w\\.-]+@([\\w\\-]+\\.)+[A-Z]{2,4}$"
+        val pattern = Pattern.compile(expression, Pattern.CASE_INSENSITIVE)
+        val matcher = pattern.matcher(email)
+        return matcher.matches()
+    }
+
+    fun getProgressDialog(
+        context: Context?,
+        message: String?
+    ): KProgressHUD {
+        return KProgressHUD.create(context)
+            .setStyle(KProgressHUD.Style.SPIN_INDETERMINATE)
+            .setCancellable(false)
+            .setLabel(message)
+    }
+
+    fun saveUserProfile(context: Context, userProfile: UserModel?) {
+        val gson = Gson()
+        val json = gson.toJson(userProfile)
+        SharedPref.getInstance(context)!!.APP_USER = json
+    }
+
+//    fun saveUserProfile2(context: Context, userProfile: UserModel?) {
+//        SharedPref.getInstance(context)!!.saveUser(userProfile!!)
+//    }
+
+    fun clearUserProfile(context: Context) {
+        SharedPref.getInstance(context)!!.clearUserProfile()
+    }
+//
+//    fun getUserProfile(context: Context): UserModel {
+//        val gson = Gson()
+//        val json = SharedPref.getInstance(context)!!.APP_USER
+//        return gson.fromJson(json, UserModel::class.java)
+//    }
+
+//    fun getUserProfile2(context: Context): UserModel {
+//         return SharedPref.getInstance(context)!!.getUser()
+//    }
+}
\ No newline at end of file
Index: app/src/main/java/com/trimad/ichat/utils/SharedPref.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/trimad/ichat/utils/SharedPref.kt b/app/src/main/java/com/trimad/ichat/utils/SharedPref.kt
new file mode 100644
--- /dev/null	(date 1663689046000)
+++ b/app/src/main/java/com/trimad/ichat/utils/SharedPref.kt	(date 1663689046000)
@@ -0,0 +1,59 @@
+package com.trimad.ichat.utils
+
+import android.content.Context
+import android.content.SharedPreferences
+import com.trimad.ichat.models.UserModel
+
+class SharedPref(private val ctx: Context) {
+    val USERNAME:String = "username"
+    val USERID:String = "userId"
+    val ORGID:String = "orgId"
+    val TOKEN:String = "userToken"
+
+
+    fun clearUserProfile() {
+        sharedPreferences.edit().clear().apply()
+    }
+
+    private val sharedPreferences: SharedPreferences = ctx.getSharedPreferences(PREFERENCE, 0)
+
+    private val USER = "user"
+
+    var APP_USER: String?
+        get() = sharedPreferences.getString(USER, "")
+        set(app_user) {
+            app_user?.let { sharedPreferences.edit().putString(USER, it).apply() }
+        }
+
+
+    fun saveUser(userProfile: UserModel) {
+        sharedPreferences.edit().apply {
+            putString(USERNAME,userProfile.user_name)
+            putString(USERID,userProfile.user_id)
+            putString(ORGID,userProfile.organization_id)
+            putString(TOKEN,userProfile.user_token)
+        }.apply()
+    }
+
+    fun getUser() : UserModel {
+        return UserModel(
+            user_id = sharedPreferences.getString(USERID, ""),
+            user_name = sharedPreferences.getString(USERNAME, ""),
+            organization_id = sharedPreferences.getString(ORGID, ""),
+            user_token = sharedPreferences.getString(TOKEN, ""),
+        )
+    }
+
+
+    companion object {
+        private var instance: SharedPref? = null
+        var PREFERENCE = "ChatApp"
+        fun getInstance(context: Context): SharedPref? {
+            if (instance == null) {
+                instance = SharedPref(context)
+            }
+            return instance
+        }
+    }
+
+}
\ No newline at end of file
Index: app/src/main/java/com/trimad/ichat/models/ChatModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/trimad/ichat/models/ChatModel.kt b/app/src/main/java/com/trimad/ichat/models/ChatModel.kt
new file mode 100644
--- /dev/null	(date 1663689044000)
+++ b/app/src/main/java/com/trimad/ichat/models/ChatModel.kt	(date 1663689044000)
@@ -0,0 +1,15 @@
+package com.trimad.ichat.models
+
+import com.google.firebase.Timestamp
+
+data class ChatModel(
+    val chat_id: String? = null,
+    val user_name: String? = null,
+    val type: String? = null,
+    val timestamp: Timestamp? = null,
+    val message:String?=null,
+    var user_one_name: String? = null,  // username will be group name or individaual person name
+    var user_two_name: String? = null,  // username will be group name or individaual person name
+    var sender_id: String? = null,
+    var receiver_id: String? = null,
+    )
Index: app/src/test/java/com/trimad/ichat/ExampleUnitTest.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/test/java/com/trimad/ichat/ExampleUnitTest.kt b/app/src/test/java/com/trimad/ichat/ExampleUnitTest.kt
new file mode 100644
--- /dev/null	(date 1663689044000)
+++ b/app/src/test/java/com/trimad/ichat/ExampleUnitTest.kt	(date 1663689044000)
@@ -0,0 +1,17 @@
+package com.trimad.ichat
+
+import org.junit.Test
+
+import org.junit.Assert.*
+
+/**
+ * Example local unit test, which will execute on the development machine (host).
+ *
+ * See [testing documentation](http://d.android.com/tools/testing).
+ */
+class ExampleUnitTest {
+    @Test
+    fun addition_isCorrect() {
+        assertEquals(4, 2 + 2)
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/trimad/ichat/models/Organization.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/trimad/ichat/models/Organization.kt b/app/src/main/java/com/trimad/ichat/models/Organization.kt
new file mode 100644
--- /dev/null	(date 1663689046000)
+++ b/app/src/main/java/com/trimad/ichat/models/Organization.kt	(date 1663689046000)
@@ -0,0 +1,12 @@
+package com.trimad.ichat.models
+
+/**
+ * Created by Usman Liaqat on 16,August,2022
+ * CodeCoy,
+ * Lahore, Pakistan.
+ */
+data class Organization(
+    var org_id: String? =null,
+    var org_name:String?=null,
+    var image: String?=null
+    )
Index: app/src/main/java/com/trimad/ichat/models/ChatInfoModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/trimad/ichat/models/ChatInfoModel.kt b/app/src/main/java/com/trimad/ichat/models/ChatInfoModel.kt
new file mode 100644
--- /dev/null	(date 1663689046000)
+++ b/app/src/main/java/com/trimad/ichat/models/ChatInfoModel.kt	(date 1663689046000)
@@ -0,0 +1,22 @@
+package com.trimad.ichat.models
+
+import com.google.firebase.Timestamp
+
+/**
+ * Created by Usman Liaqat on 01,September,2022
+ * CodeCoy,
+ * Lahore, Pakistan.
+ */
+data class ChatInfoModel(
+    var user_one_name: String? = null,  // username will be group name or individaual person name
+    var user_two_name: String? = null,  // username will be group name or individaual person name
+    var user_one_image: String? = null,  // username will be group name or individaual person name
+    var user_two_image: String? = null,  // username will be group name or individaual person name
+    var sender_id: String? = null,
+    var receiver_id: String? = null,
+    var message: String? = null,  // latest message text
+    var chat_id: String? = null,  /// group id or receiver id
+    var type: String? = null, // group or single
+    var timestamp: Timestamp? = null, // latest message timestamp
+
+)
Index: app/src/main/java/com/trimad/ichat/models/GroupModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/trimad/ichat/models/GroupModel.kt b/app/src/main/java/com/trimad/ichat/models/GroupModel.kt
new file mode 100644
--- /dev/null	(date 1663689048000)
+++ b/app/src/main/java/com/trimad/ichat/models/GroupModel.kt	(date 1663689048000)
@@ -0,0 +1,13 @@
+package com.trimad.ichat.models
+
+/**
+ * Created by Usman Liaqat on 22,August,2022
+ * CodeCoy,
+ * Lahore, Pakistan.
+ */
+data class GroupModel(
+    var group_id: String? = null,
+    var group_name: String? = null,
+    var group_image: String? = null,
+    var users_list:ArrayList<GroupMember>?=null
+)
Index: app/src/main/java/com/trimad/ichat/models/GroupMember.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/trimad/ichat/models/GroupMember.kt b/app/src/main/java/com/trimad/ichat/models/GroupMember.kt
new file mode 100644
--- /dev/null	(date 1663689046000)
+++ b/app/src/main/java/com/trimad/ichat/models/GroupMember.kt	(date 1663689046000)
@@ -0,0 +1,14 @@
+package com.trimad.ichat.models
+
+/**
+ * Created by Usman Liaqat on 22,August,2022
+ * CodeCoy,
+ * Lahore, Pakistan.
+ */
+data class GroupMember(
+    var user_id: String? = null,
+    var isAdmin: Boolean? = false,
+    var isnotify: Boolean? = true,
+    var isadded: Boolean? = true,
+
+)
\ No newline at end of file
Index: app/src/main/java/com/trimad/ichat/models/UserSelectModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/trimad/ichat/models/UserSelectModel.kt b/app/src/main/java/com/trimad/ichat/models/UserSelectModel.kt
new file mode 100644
--- /dev/null	(date 1663689046000)
+++ b/app/src/main/java/com/trimad/ichat/models/UserSelectModel.kt	(date 1663689046000)
@@ -0,0 +1,11 @@
+package com.trimad.ichat.models
+
+/**
+ * Created by Usman Liaqat on 22,August,2022
+ * CodeCoy,
+ * Lahore, Pakistan.
+ */
+data class UserSelectModel(
+    var userModel: UserModel?=null,
+    var isSelected: Boolean? = null,
+)
Index: app/src/main/java/com/trimad/ichat/models/ChatReadModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/trimad/ichat/models/ChatReadModel.kt b/app/src/main/java/com/trimad/ichat/models/ChatReadModel.kt
new file mode 100644
--- /dev/null	(date 1663689046000)
+++ b/app/src/main/java/com/trimad/ichat/models/ChatReadModel.kt	(date 1663689046000)
@@ -0,0 +1,11 @@
+package com.trimad.ichat.models
+
+/**
+ * Created by Usman Liaqat on 25,August,2022
+ * CodeCoy,
+ * Lahore, Pakistan.
+ */
+data class ChatReadModel(
+    var chat_sender_userModel: UserModel? = null,
+    var chatMessage: ChatMessage? = null,
+)
Index: app/src/main/java/com/trimad/ichat/models/GroupUserModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/trimad/ichat/models/GroupUserModel.kt b/app/src/main/java/com/trimad/ichat/models/GroupUserModel.kt
new file mode 100644
--- /dev/null	(date 1663689044000)
+++ b/app/src/main/java/com/trimad/ichat/models/GroupUserModel.kt	(date 1663689044000)
@@ -0,0 +1,11 @@
+package com.trimad.ichat.models
+
+/**
+ * Created by Usman Liaqat on 22,August,2022
+ * CodeCoy,
+ * Lahore, Pakistan.
+ */
+class GroupUserModel(
+    var userModel: UserModel?=null,
+    var isAdmin: Boolean? = null
+)
\ No newline at end of file
Index: app/src/main/java/com/trimad/ichat/ui/adapters/UsersAdapter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/trimad/ichat/ui/adapters/UsersAdapter.kt b/app/src/main/java/com/trimad/ichat/ui/adapters/UsersAdapter.kt
new file mode 100644
--- /dev/null	(date 1663689048000)
+++ b/app/src/main/java/com/trimad/ichat/ui/adapters/UsersAdapter.kt	(date 1663689048000)
@@ -0,0 +1,82 @@
+package com.trimad.ichat.ui.adapters
+
+import android.content.Context
+import android.view.LayoutInflater
+import android.view.View
+import android.view.ViewGroup
+import androidx.recyclerview.widget.RecyclerView
+import com.bumptech.glide.Glide
+import com.trimad.ichat.R
+import com.trimad.ichat.databinding.ParticiepentsVertialItemviewBinding
+import com.trimad.ichat.listeners.UserSelectListener
+import com.trimad.ichat.models.UserSelectModel
+import java.util.*
+
+
+/**
+ * Created by Usman Liaqat on 18,August,2022
+ * CodeCoy,
+ * Lahore, Pakistan.
+ */
+class UsersAdapter(
+    private var mList: List<UserSelectModel>,
+    private var tempList: List<UserSelectModel>,
+    val context: Context,
+    val userSelectListener: UserSelectListener
+):RecyclerView.Adapter<CategoriesViewHolder>() {
+    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): CategoriesViewHolder {
+        return CategoriesViewHolder(ParticiepentsVertialItemviewBinding.inflate(LayoutInflater.from(parent.context),parent,false))
+    }
+
+    override fun onBindViewHolder(holder: CategoriesViewHolder, position: Int) {
+        holder.particiepentsVertialItemviewBinding.adminTv.visibility=View.GONE
+
+        Glide.with(context)
+            .load(mList[position].userModel!!.user_image)
+            .error(R.drawable.no_image)
+            .into((holder.particiepentsVertialItemviewBinding.userImageview))
+
+        holder.particiepentsVertialItemviewBinding.usernameTv.text=mList[position].userModel!!.user_name
+        holder.particiepentsVertialItemviewBinding.userBioTv.text=mList[position].userModel!!.user_bio
+
+
+        if (mList[position].isSelected==true)
+        {
+            holder.particiepentsVertialItemviewBinding.selectedImageview.visibility=View.VISIBLE
+        }else{
+            holder.particiepentsVertialItemviewBinding.selectedImageview.visibility=View.GONE
+
+        }
+
+        holder.itemView.setOnClickListener {
+
+            mList[position].isSelected = mList[position].isSelected != true
+            userSelectListener.onUserSelect(mList[position])
+            notifyItemChanged(position)
+        }
+
+    }
+
+    override fun getItemCount(): Int {
+        return mList.size
+    }
+
+    fun onFilter(query: String?) {
+        val charSequenceString: String = query.toString()
+        mList = ArrayList()
+        if (query.equals(""))
+        {
+            mList = tempList
+        } else {
+            for (model in tempList) {
+                if (model.userModel!!.user_name.toString().lowercase()
+                        .contains(charSequenceString.lowercase(Locale.getDefault()))
+                ) {
+                    (mList as ArrayList<UserSelectModel>).add(model)
+                }
+            }
+        }
+        notifyDataSetChanged()
+    }
+}
+class CategoriesViewHolder(val particiepentsVertialItemviewBinding: ParticiepentsVertialItemviewBinding) : RecyclerView.ViewHolder(particiepentsVertialItemviewBinding.root)
\ No newline at end of file
Index: app/src/main/java/com/trimad/ichat/models/ChatGroupInfoModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/trimad/ichat/models/ChatGroupInfoModel.kt b/app/src/main/java/com/trimad/ichat/models/ChatGroupInfoModel.kt
new file mode 100644
--- /dev/null	(date 1663689044000)
+++ b/app/src/main/java/com/trimad/ichat/models/ChatGroupInfoModel.kt	(date 1663689044000)
@@ -0,0 +1,18 @@
+package com.trimad.ichat.models
+
+import com.google.firebase.Timestamp
+
+/**
+ * Created by Usman Liaqat on 01,September,2022
+ * CodeCoy,
+ * Lahore, Pakistan.
+ */
+data class ChatGroupInfoModel(
+    var user_name: String? = null,  // username will be group name or individaual person name
+    var message: String? = null,  // latest message text
+    var chat_id: String? = null,  /// group id or receiver id
+    var type: String? = null, // group or single
+    var group_img: String? = null, // group or single
+    var timestamp: Timestamp? = null, // latest message timestamp
+
+)
Index: app/src/main/java/com/trimad/ichat/constants/ConstantsData.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/trimad/ichat/constants/ConstantsData.kt b/app/src/main/java/com/trimad/ichat/constants/ConstantsData.kt
new file mode 100644
--- /dev/null	(date 1663689046000)
+++ b/app/src/main/java/com/trimad/ichat/constants/ConstantsData.kt	(date 1663689046000)
@@ -0,0 +1,36 @@
+package com.trimad.ichat.constants
+
+interface ConstantsData {
+    companion object {
+
+        const val from = "From"
+
+
+        const val users = "Users"
+        const val groups = "Groups"
+
+        const val chatGroupId = "group_id"
+        const val chatSenderId = "sender_id"
+
+        // notification type
+        const val message_group_type = "group"
+        const val message_single_type = "single"
+
+        ///// message status
+        const val status_sent="Sent"  // by default single tick
+        const val status_deliverd="Delivered"  // double tick
+        const val status_seen="Seen"   // blue tick
+
+
+        const val organizations = "Organizations"
+        const val message = "Messages"
+        const val chatMessage = "ChatMessages"
+
+        const val FIREBASE_NOTIFICATION_URL = "https://fcm.googleapis.com/fcm/send"
+        const val FIREBASE_NOTIFICATION_CONTENT_TYPE = "application/json"
+        const val FIREBASE_NOTIFICATION_SERVER_KEY =
+            "key=AAAAwA5PGHA:APA91bHKhG4MlnY9jeFirKWu1hkjQtKz2ZOj6TWuDkeaB8J66fi3C9Jgzo87uDEIRMN-cf58QEpD7TkKwmg3TiiBiOV275yJk7GqZqGK1EQm5mok8OmrTHvkrDvf-DgnUq5ToCkvBNq6"
+
+
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/trimad/ichat/ui/fragments/UserProfile.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/trimad/ichat/ui/fragments/UserProfile.kt b/app/src/main/java/com/trimad/ichat/ui/fragments/UserProfile.kt
new file mode 100644
--- /dev/null	(date 1663689046000)
+++ b/app/src/main/java/com/trimad/ichat/ui/fragments/UserProfile.kt	(date 1663689046000)
@@ -0,0 +1,155 @@
+package com.trimad.ichat.ui.fragments
+
+
+import android.app.Activity
+import android.content.Context
+import android.content.Intent
+import android.net.Uri
+import android.os.Bundle
+import android.provider.MediaStore
+import android.view.LayoutInflater
+import android.view.View
+import android.view.ViewGroup
+import androidx.activity.result.contract.ActivityResultContracts
+import androidx.databinding.DataBindingUtil
+import androidx.fragment.app.Fragment
+import androidx.navigation.fragment.findNavController
+import com.bumptech.glide.Glide
+import com.trimad.ichat.R
+import com.trimad.ichat.databasecontroller.DatabaseAddresses
+import com.trimad.ichat.databasecontroller.Repoistory
+import com.trimad.ichat.databinding.FragmentUserProfileBinding
+import com.trimad.ichat.listeners.OnGetUserDataListener
+import com.trimad.ichat.models.UserModel
+import com.trimad.ichat.ui.activities.MainActivity
+import com.trimad.ichat.utils.Utils
+import com.google.firebase.auth.FirebaseAuth
+import com.kaopiz.kprogresshud.KProgressHUD
+import gun0912.tedimagepicker.util.ToastUtil
+
+
+class UserProfile : Fragment() {
+    private lateinit var binding: FragmentUserProfileBinding
+    private lateinit var auth: FirebaseAuth
+    private var uri : Uri? = null
+    private lateinit var mContext:MainActivity
+
+    private var progressHUD: KProgressHUD? = null
+
+    private var resultLauncher =
+        registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { result ->
+            if (result.resultCode == Activity.RESULT_OK) {
+                // There are no request codes
+                uri = result.data!!.data!!
+                val bitmap = MediaStore.Images.Media.getBitmap(mContext.getContentResolver(), uri!!)
+                binding.profileImage.setImageBitmap(bitmap)
+
+              //  ToastUtil.showToast(uri.toString())
+            }
+        }
+
+
+    override fun onCreateView(
+        inflater: LayoutInflater, container: ViewGroup?,
+        savedInstanceState: Bundle?
+    ): View? {
+        // Inflate the layout for this fragment
+        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_user_profile, container, false)
+        progressHUD = Utils.getProgressDialog(requireContext(), getString(com.trimad.ichat.R.string.please_wait))
+        auth = FirebaseAuth.getInstance()
+        getUserProfile()
+        setListeners()
+
+
+        return binding.root
+    }
+
+    private fun getUserProfile(){
+        Repoistory.getUserProfilee(auth.uid.toString(), object :OnGetUserDataListener{
+            override fun onTaskSuccess(userModel: UserModel?) {
+                     updateViews(userModel!!)
+            }
+
+            override fun onTaskError(message: String?) {
+
+            }
+
+            override fun onTaskEmpty() {
+
+            }
+
+        })
+
+
+    }
+
+    private fun updateViews(userModel: UserModel) {
+        if(uri == null) {
+            Glide.with(mContext)
+                .load(userModel?.user_image)
+                .error(R.drawable.no_image)
+                .into(binding.profileImage)
+        }
+
+        binding.userNameTv.text= userModel.user_name
+        binding.bioInputlayout.editText?.setText(userModel.user_bio)
+        binding.emailInputlayout.editText?.setText(userModel.user_email)
+        binding.organiztionInputlayout.editText?.setText(userModel.organization_id)
+    }
+
+    private fun setListeners(){
+
+
+        binding.updateProfile.setOnClickListener {
+            if (uri != null)
+            {
+                progressHUD?.show()
+               Repoistory.updateUserProfile(auth.uid.toString(), uri!! , binding.bioInputlayout.editText?.text.toString() ,object :OnGetUserDataListener{
+                   override fun onTaskSuccess(userModel: UserModel?) {
+                       progressHUD?.dismiss()
+
+                   }
+
+                   override fun onTaskError(message: String?) {
+                       progressHUD?.dismiss()
+                   }
+
+                   override fun onTaskEmpty() {
+                       progressHUD?.dismiss()
+                   }
+
+               })
+
+            }else{
+                DatabaseAddresses.getSingleUserReference(auth.uid.toString())
+                    .update("user_bio",binding.bioInputlayout.editText?.text.toString())
+                ToastUtil.showToast("Bio updated Successfully!")
+            }
+        }
+
+
+        binding.profileImage.setOnClickListener {
+            val intent = Intent()
+            intent.type = "image/*"
+            intent.action = Intent.ACTION_GET_CONTENT
+            resultLauncher.launch(intent)
+        }
+
+        binding.arrowBackImgview.setOnClickListener {
+            findNavController().popBackStack()
+        }
+    }
+
+
+    override fun onAttach(context: Context) {
+        super.onAttach(context)
+        mContext = context as MainActivity
+    }
+
+
+
+
+
+
+
+}
\ No newline at end of file
Index: app/src/main/java/com/trimad/ichat/listeners/OnGetChatMessages.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/trimad/ichat/listeners/OnGetChatMessages.kt b/app/src/main/java/com/trimad/ichat/listeners/OnGetChatMessages.kt
new file mode 100644
--- /dev/null	(date 1663689048000)
+++ b/app/src/main/java/com/trimad/ichat/listeners/OnGetChatMessages.kt	(date 1663689048000)
@@ -0,0 +1,14 @@
+package com.trimad.ichat.listeners
+
+import com.trimad.ichat.models.ChatMessage
+
+/**
+ * Created by Usman Liaqat on 25,August,2022
+ * CodeCoy,
+ * Lahore, Pakistan.
+ */
+interface OnGetChatMessages {
+    fun onTaskSuccess(chatMessageList: List<ChatMessage>)
+    fun onTaskError(message: String?)
+    fun onTaskEmpty()
+}
\ No newline at end of file
Index: app/src/main/java/com/trimad/ichat/listeners/OnGroupMemberClick.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/trimad/ichat/listeners/OnGroupMemberClick.kt b/app/src/main/java/com/trimad/ichat/listeners/OnGroupMemberClick.kt
new file mode 100644
--- /dev/null	(date 1663689046000)
+++ b/app/src/main/java/com/trimad/ichat/listeners/OnGroupMemberClick.kt	(date 1663689046000)
@@ -0,0 +1,5 @@
+package com.trimad.ichat.listeners
+
+interface OnGroupMemberClick {
+    fun onMemberClick(pos:Int)
+}
\ No newline at end of file
Index: app/src/main/java/com/trimad/ichat/singlton/ApplicationClass.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/trimad/ichat/singlton/ApplicationClass.kt b/app/src/main/java/com/trimad/ichat/singlton/ApplicationClass.kt
new file mode 100644
--- /dev/null	(date 1663690090000)
+++ b/app/src/main/java/com/trimad/ichat/singlton/ApplicationClass.kt	(date 1663690090000)
@@ -0,0 +1,17 @@
+package com.trimad.ichat.singlton
+
+import android.app.Application
+import android.content.Context
+
+class ApplicationClass : Application() {
+    override fun onCreate() {
+        super.onCreate()
+        appContext = applicationContext
+
+    }
+
+    companion object {
+        var appContext: Context? = null
+            private set
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/trimad/ichat/ui/fragments/GroupsFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/trimad/ichat/ui/fragments/GroupsFragment.kt b/app/src/main/java/com/trimad/ichat/ui/fragments/GroupsFragment.kt
new file mode 100644
--- /dev/null	(date 1665144393474)
+++ b/app/src/main/java/com/trimad/ichat/ui/fragments/GroupsFragment.kt	(date 1665144393474)
@@ -0,0 +1,151 @@
+package com.trimad.ichat.ui.fragments
+
+import android.content.Context
+import android.os.Bundle
+import android.util.Log
+import androidx.fragment.app.Fragment
+import android.view.LayoutInflater
+import android.view.View
+import android.view.ViewGroup
+import android.widget.Toast
+import androidx.navigation.fragment.findNavController
+import androidx.recyclerview.widget.LinearLayoutManager
+import androidx.recyclerview.widget.RecyclerView
+import com.trimad.ichat.R
+import com.trimad.ichat.databasecontroller.Repoistory
+import com.trimad.ichat.databinding.FragmentGroupsBinding
+import com.trimad.ichat.listeners.OnGroupClickListener
+import com.trimad.ichat.models.APIResponse
+import com.trimad.ichat.models.GroupModel
+import com.trimad.ichat.ui.activities.MainActivity
+import com.trimad.ichat.ui.adapters.AllGroupsAdapter
+import com.trimad.ichat.utils.Utils
+import com.google.firebase.auth.FirebaseAuth
+import com.google.firebase.firestore.EventListener
+import com.google.firebase.firestore.QuerySnapshot
+import com.kaopiz.kprogresshud.KProgressHUD
+import com.trimad.ichat.databasecontroller.DatabaseAddresses
+import com.trimad.ichat.utils.MyApp
+
+class GroupsFragment : Fragment(), OnGroupClickListener {
+
+    private val TAG = "GroupsFragment"
+    private var mBinding: FragmentGroupsBinding? = null
+    private val binding get() = mBinding!!
+    private var progressHUD: KProgressHUD? = null
+    private var mAuth: FirebaseAuth? = null
+
+    private var mGroupList: ArrayList<GroupModel>? = null
+    private var mAdapter: AllGroupsAdapter? = null
+    private lateinit var mContext:MainActivity
+
+
+    override fun onCreateView(
+        inflater: LayoutInflater, container: ViewGroup?,
+        savedInstanceState: Bundle?
+    ): View? {
+        // Inflate the layout for this fragment
+        mBinding = FragmentGroupsBinding.inflate(inflater, container, false)
+        return mBinding!!.root
+    }
+
+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
+        super.onViewCreated(view, savedInstanceState)
+
+        mAuth = FirebaseAuth.getInstance()
+
+        progressHUD = Utils.getProgressDialog(requireContext(), getString(R.string.please_wait))
+
+        setUpRecyclerView()
+        if (!MyApp.isCheckUserGroups) {
+            getGroups(mAuth?.currentUser!!.uid)
+        }else{
+            mGroupList?.clear()
+            mGroupList?.addAll(MyApp.group_list)
+            mAdapter?.notifyDataSetChanged()
+        }
+
+
+        binding.addNewGroupBtn.setOnClickListener {
+            findNavController().navigate(R.id.action_homeFragment_to_newGroupFragment)
+        }
+    }
+
+    fun getGroups(user_id: String?) {
+        if (!progressHUD!!.isShowing) {
+            progressHUD!!.show()
+        }
+
+        DatabaseAddresses.getGroupsRefrence()
+            .addSnapshotListener(EventListener<QuerySnapshot?> { value, e ->
+                if (e != null) {
+                    Log.i("TAGTAGTAG", "Listen failed.", e)
+                    if (progressHUD!!.isShowing) {
+                        progressHUD!!.dismiss()
+                    }
+
+
+                    return@EventListener
+                }
+                if (progressHUD!!.isShowing) {
+                    progressHUD!!.dismiss()
+                }
+
+                MyApp.isCheckUserGroups = true
+
+                val group_list: ArrayList<GroupModel> = ArrayList<GroupModel>()
+                val myGroup_list: ArrayList<String> = ArrayList<String>()
+                for (doc in value!!) {
+                    val groupModel: GroupModel = doc.toObject(GroupModel::class.java)
+                    for (i in groupModel.users_list?.indices!!) {
+                        if (groupModel.users_list!![i].user_id == user_id) {
+                            group_list.add(groupModel)
+                            myGroup_list.add(groupModel.group_id.toString())
+                        }
+                    }
+                }
+                if (group_list.size > 0) {
+                    MyApp.myGroup_list.clear()
+                    MyApp.group_list.clear()
+
+
+                    MyApp.myGroup_list = myGroup_list
+                    MyApp.group_list = group_list
+
+                    mGroupList?.clear()
+                    mGroupList?.addAll(group_list)
+                    mAdapter?.notifyDataSetChanged()
+
+                } else {
+                    MyApp.myGroup_list.clear()
+                    MyApp.group_list.clear()
+
+                }
+            })
+    }
+
+
+
+
+    private fun setUpRecyclerView() {
+        mGroupList = ArrayList()
+        mAdapter = AllGroupsAdapter(mGroupList!!, requireContext(), mAuth!!.uid.toString() ,this)
+        val linearLayoutManager = LinearLayoutManager(context, RecyclerView.VERTICAL, false)
+        binding.groupsRecyclerview.layoutManager = linearLayoutManager
+        binding.groupsRecyclerview.adapter = mAdapter
+    }
+
+    override fun onGroupSelect(groupModel: GroupModel) {
+        val bundle = Bundle()
+        bundle.putString("group_id", groupModel.group_id)
+        bundle.putString("type", "group")
+        findNavController().navigate(R.id.action_homeFragment_to_liveChatFragment, bundle)
+    }
+
+    override fun onAttach(context: Context) {
+        super.onAttach(context)
+        mContext = context as MainActivity
+    }
+
+
+}
\ No newline at end of file
Index: app/src/main/java/com/trimad/ichat/listeners/UserRemoveListener.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/trimad/ichat/listeners/UserRemoveListener.kt b/app/src/main/java/com/trimad/ichat/listeners/UserRemoveListener.kt
new file mode 100644
--- /dev/null	(date 1663689046000)
+++ b/app/src/main/java/com/trimad/ichat/listeners/UserRemoveListener.kt	(date 1663689046000)
@@ -0,0 +1,12 @@
+package com.trimad.ichat.listeners
+
+import com.trimad.ichat.models.UserModel
+
+/**
+ * Created by Usman Liaqat on 22,August,2022
+ * CodeCoy,
+ * Lahore, Pakistan.
+ */
+interface UserRemoveListener {
+    fun onUserRemove(userModel: UserModel)
+}
\ No newline at end of file
Index: app/src/main/java/com/trimad/ichat/listeners/UserSelectListener.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/trimad/ichat/listeners/UserSelectListener.kt b/app/src/main/java/com/trimad/ichat/listeners/UserSelectListener.kt
new file mode 100644
--- /dev/null	(date 1663689046000)
+++ b/app/src/main/java/com/trimad/ichat/listeners/UserSelectListener.kt	(date 1663689046000)
@@ -0,0 +1,12 @@
+package com.trimad.ichat.listeners
+
+import com.trimad.ichat.models.UserSelectModel
+
+/**
+ * Created by Usman Liaqat on 19,August,2022
+ * CodeCoy,
+ * Lahore, Pakistan.
+ */
+interface UserSelectListener {
+    fun onUserSelect(userModel: UserSelectModel)
+}
\ No newline at end of file
Index: app/src/main/java/com/trimad/ichat/listeners/UnSeenMessageCount.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/trimad/ichat/listeners/UnSeenMessageCount.kt b/app/src/main/java/com/trimad/ichat/listeners/UnSeenMessageCount.kt
new file mode 100644
--- /dev/null	(date 1665463699954)
+++ b/app/src/main/java/com/trimad/ichat/listeners/UnSeenMessageCount.kt	(date 1665463699954)
@@ -0,0 +1,8 @@
+package com.trimad.ichat.listeners
+
+import com.trimad.ichat.models.ChatMessage
+
+interface UnSeenMessageCount {
+    fun onMessageCount(pos:Int ,count:List<ChatMessage>)
+
+}
\ No newline at end of file
Index: app/src/main/java/com/trimad/ichat/ui/adapters/AllGroupsAdapter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/trimad/ichat/ui/adapters/AllGroupsAdapter.kt b/app/src/main/java/com/trimad/ichat/ui/adapters/AllGroupsAdapter.kt
new file mode 100644
--- /dev/null	(date 1665463813384)
+++ b/app/src/main/java/com/trimad/ichat/ui/adapters/AllGroupsAdapter.kt	(date 1665463813384)
@@ -0,0 +1,82 @@
+package com.trimad.ichat.ui.adapters
+
+import android.content.Context
+import android.view.LayoutInflater
+import android.view.View
+import android.view.ViewGroup
+import androidx.recyclerview.widget.RecyclerView
+import com.bumptech.glide.Glide
+import com.trimad.ichat.R
+import com.trimad.ichat.databasecontroller.Repoistory
+import com.trimad.ichat.databinding.ParticiepentsVertialItemviewBinding
+import com.trimad.ichat.listeners.OnGroupClickListener
+import com.trimad.ichat.listeners.UnSeenMessageCount
+import com.trimad.ichat.models.ChatMessage
+import com.trimad.ichat.models.GroupModel
+
+/**
+ * Created by Usman Liaqat on 22,August,2022
+ * CodeCoy,
+ * Lahore, Pakistan.
+ */
+class AllGroupsAdapter(
+    private var mList: List<GroupModel>,
+    val context: Context,
+ val rid: String,
+    val onGroupClickListener: OnGroupClickListener
+) : RecyclerView.Adapter<AllGroups_ViewHolder>() {
+    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): AllGroups_ViewHolder {
+        return AllGroups_ViewHolder(
+            ParticiepentsVertialItemviewBinding.inflate(
+                LayoutInflater.from(
+                    parent.context
+                ), parent, false
+            )
+        )
+
+    }
+
+    override fun onBindViewHolder(holder: AllGroups_ViewHolder, position: Int) {
+        Repoistory.getChatCount(mList[position].group_id.toString(),"123","group", rid ,position,object :
+            UnSeenMessageCount {
+            override fun onMessageCount(pos: Int,count:List<ChatMessage>) {
+                if(!count.isEmpty()){
+                    holder.particiepentsVertialItemviewBinding.tvCount.text= count.size.toString()
+                    holder.particiepentsVertialItemviewBinding.tvCount.visibility = View.VISIBLE
+                }else{
+                    //  holder.particiepentsVertialItemviewBinding.tvCount.text=mList[position].msg_count.toString()
+                    holder.particiepentsVertialItemviewBinding.tvCount.visibility = View.INVISIBLE
+                }
+            }
+
+        })
+
+
+
+
+        holder.particiepentsVertialItemviewBinding.adminTv.visibility = View.GONE
+        holder.particiepentsVertialItemviewBinding.selectedImageview.visibility = View.GONE
+        holder.particiepentsVertialItemviewBinding.userBioTv.visibility = View.GONE
+
+
+        Glide.with(context)
+            .load(mList[position].group_image)
+            .error(R.drawable.no_image)
+            .into((holder.particiepentsVertialItemviewBinding.userImageview))
+
+        holder.particiepentsVertialItemviewBinding.usernameTv.text = mList[position].group_name
+
+        holder.itemView.setOnClickListener {
+            onGroupClickListener.onGroupSelect(mList[position])
+
+        }
+
+    }
+
+    override fun getItemCount(): Int {
+        return mList.size
+    }
+}
+
+class AllGroups_ViewHolder(val particiepentsVertialItemviewBinding: ParticiepentsVertialItemviewBinding) :
+    RecyclerView.ViewHolder(particiepentsVertialItemviewBinding.root)
\ No newline at end of file
Index: app/src/main/java/com/trimad/ichat/listeners/OnGroupsLoadListener.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/trimad/ichat/listeners/OnGroupsLoadListener.kt b/app/src/main/java/com/trimad/ichat/listeners/OnGroupsLoadListener.kt
new file mode 100644
--- /dev/null	(date 1663689046000)
+++ b/app/src/main/java/com/trimad/ichat/listeners/OnGroupsLoadListener.kt	(date 1663689046000)
@@ -0,0 +1,14 @@
+package com.trimad.ichat.listeners
+
+import com.trimad.ichat.models.GroupModel
+
+/**
+ * Created by Usman Liaqat on 22,August,2022
+ * CodeCoy,
+ * Lahore, Pakistan.
+ */
+interface OnGroupsLoadListener {
+    fun onTaskSuccess(userModelList: List<GroupModel>)
+    fun onTaskError(message: String?)
+    fun onTaskEmpty()
+}
\ No newline at end of file
Index: app/src/main/java/com/trimad/ichat/listeners/OnFileUploadListener.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/trimad/ichat/listeners/OnFileUploadListener.kt b/app/src/main/java/com/trimad/ichat/listeners/OnFileUploadListener.kt
new file mode 100644
--- /dev/null	(date 1663689048000)
+++ b/app/src/main/java/com/trimad/ichat/listeners/OnFileUploadListener.kt	(date 1663689048000)
@@ -0,0 +1,9 @@
+package com.trimad.ichat.listeners
+
+import com.google.firebase.storage.UploadTask
+
+interface OnFileUploadListener {
+    fun onFileUploaded(url: String?)
+    fun onProgress(snapshot: UploadTask.TaskSnapshot?)
+    fun onFailure(e: String?)
+}
\ No newline at end of file
Index: app/src/main/java/com/trimad/ichat/ui/fragments/ProfileFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/trimad/ichat/ui/fragments/ProfileFragment.kt b/app/src/main/java/com/trimad/ichat/ui/fragments/ProfileFragment.kt
new file mode 100644
--- /dev/null	(date 1674049695287)
+++ b/app/src/main/java/com/trimad/ichat/ui/fragments/ProfileFragment.kt	(date 1674049695287)
@@ -0,0 +1,114 @@
+package com.trimad.ichat.ui.fragments
+
+import android.os.Bundle
+import androidx.fragment.app.Fragment
+import android.view.LayoutInflater
+import android.view.View
+import android.view.ViewGroup
+import android.widget.Toast
+import androidx.navigation.fragment.findNavController
+import com.bumptech.glide.Glide
+import com.trimad.ichat.R
+import com.trimad.ichat.databasecontroller.Repoistory
+import com.trimad.ichat.databinding.FragmentProfileBinding
+import com.trimad.ichat.listeners.OnOrganizationLoadListener
+import com.trimad.ichat.models.Organization
+import com.trimad.ichat.models.UserModel
+import com.trimad.ichat.utils.Utils
+import com.google.gson.Gson
+import com.kaopiz.kprogresshud.KProgressHUD
+
+class ProfileFragment : Fragment() {
+    private var mBinding: FragmentProfileBinding? = null
+    private val binding get() = mBinding!!
+    private var friendModel: UserModel? = null
+ //   private var userModel: UserModel? = null
+    private var progressHUD: KProgressHUD? = null
+    private var mOrganization:Organization?=null
+    private  val TAG = "ProfileFragment"
+    override fun onCreateView(
+        inflater: LayoutInflater, container: ViewGroup?,
+        savedInstanceState: Bundle?
+    ): View? {
+
+        mBinding=FragmentProfileBinding.inflate(inflater,container,false)
+        progressHUD = Utils.getProgressDialog(requireContext(), getString(R.string.please_wait))
+        val gson = Gson()
+        val jsonInString = arguments?.getString("user_model")
+        friendModel = gson.fromJson(
+            jsonInString,
+            UserModel::class.java
+        )
+
+    //    userModel = Utils.getUserProfile2(requireContext())
+
+        // Inflate the layout for this fragment
+        return mBinding!!.root
+    }
+
+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
+        super.onViewCreated(view, savedInstanceState)
+
+       getOrganiztionData()
+
+        binding.startChatBtn.setOnClickListener {
+            if (mOrganization!=null)
+            {
+                val bundle = Bundle()
+                bundle.putString("receiver_id", friendModel?.user_id)
+                bundle.putString("type", "single")
+                findNavController().navigate(R.id.action_profileFragment_to_singleLiveChatFragment, bundle)
+
+            }
+        }
+
+        binding.arrowBackImgview.setOnClickListener {
+            findNavController().navigateUp()
+        }
+
+    }
+
+    private fun getOrganiztionData()
+    {
+        progressHUD?.show()
+        Repoistory.getOrganizationDetails(friendModel?.organization_id,
+        object: OnOrganizationLoadListener{
+            override fun onTaskSuccess(organization: Organization?) {
+               progressHUD?.dismiss()
+                mOrganization=organization
+                setDataOnViews()
+            }
+
+            override fun onTaskError(message: String?) {
+                progressHUD!!.dismiss()
+                Toast.makeText(requireContext(), message, Toast.LENGTH_SHORT).show()
+            }
+
+            override fun onTaskEmpty() {
+                progressHUD!!.dismiss()
+                Toast.makeText(requireContext(), getString(R.string.no_data_found), Toast.LENGTH_SHORT).show()
+            }
+
+        })
+    }
+
+    private fun setDataOnViews() {
+        if (isAdded)
+        {
+            Glide.with(requireContext())
+                .load(friendModel?.user_image)
+                .error(R.drawable.no_image)
+                .into((binding.groupImageview))
+
+            binding.userNameTv.text=friendModel?.user_name
+            binding.bioInputlayout.editText?.setText(friendModel?.user_bio)
+            binding.emailInputlayout.editText?.setText(friendModel?.user_email)
+            binding.regionInputlayout.editText?.setText(friendModel?.user_province)
+            binding.positionInputlayout.editText?.setText(friendModel?.user_bussiness)
+            binding.organiztionInputlayout.editText?.setText(mOrganization?.org_name)
+
+        }
+
+    }
+
+}
\ No newline at end of file
Index: app/src/main/java/com/trimad/ichat/ui/fragments/NewGroupFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/trimad/ichat/ui/fragments/NewGroupFragment.kt b/app/src/main/java/com/trimad/ichat/ui/fragments/NewGroupFragment.kt
new file mode 100644
--- /dev/null	(date 1663689046000)
+++ b/app/src/main/java/com/trimad/ichat/ui/fragments/NewGroupFragment.kt	(date 1663689046000)
@@ -0,0 +1,249 @@
+package com.trimad.ichat.ui.fragments
+
+
+import android.os.Build
+import android.os.Bundle
+import android.util.Log
+import android.view.LayoutInflater
+import android.view.View
+import android.view.ViewGroup
+import android.widget.Toast
+import androidx.annotation.RequiresApi
+import androidx.appcompat.widget.SearchView
+import androidx.fragment.app.Fragment
+import androidx.navigation.fragment.findNavController
+import androidx.recyclerview.widget.LinearLayoutManager
+import androidx.recyclerview.widget.RecyclerView
+import com.trimad.ichat.R
+import com.trimad.ichat.databasecontroller.Repoistory
+import com.trimad.ichat.databinding.FragmentNewGroupBinding
+import com.trimad.ichat.listeners.OnGetSameOrgUserListener
+import com.trimad.ichat.listeners.UserRemoveListener
+import com.trimad.ichat.listeners.UserSelectListener
+import com.trimad.ichat.models.UserModel
+import com.trimad.ichat.models.UserSelectModel
+import com.trimad.ichat.ui.adapters.UsersAdapter
+import com.trimad.ichat.ui.adapters.UsersSelectedAdapter
+import com.trimad.ichat.utils.MyApp
+import com.trimad.ichat.utils.Utils
+import com.google.firebase.auth.FirebaseAuth
+import com.google.gson.Gson
+import com.kaopiz.kprogresshud.KProgressHUD
+import java.util.*
+import java.util.stream.Collectors
+
+
+class NewGroupFragment : Fragment(), UserSelectListener,UserRemoveListener {
+
+    private val TAG = "NewGroupFragment"
+    private var mBinding: FragmentNewGroupBinding? = null
+
+    private val binding get() = mBinding!!
+
+    private var progressHUD: KProgressHUD? = null
+    private var mAuth: FirebaseAuth? = null
+   // private var userModel: UserModel? = null
+
+    private var all_users_adapter: UsersAdapter? = null
+    private var selected_users_adapter: UsersSelectedAdapter? = null
+
+    private lateinit var all_user_list: ArrayList<UserSelectModel>
+    private lateinit var select_list: ArrayList<UserModel>
+    override fun onCreateView(
+        inflater: LayoutInflater, container: ViewGroup?,
+        savedInstanceState: Bundle?
+    ): View? {
+        // Inflate the layout for this fragment
+        mBinding = FragmentNewGroupBinding.inflate(inflater, container, false);
+
+        return mBinding!!.root
+    }
+
+    @RequiresApi(Build.VERSION_CODES.N)
+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
+        super.onViewCreated(view, savedInstanceState)
+
+        mAuth = FirebaseAuth.getInstance()
+    //    userModel = Utils.getUserProfile2(requireContext())
+
+        progressHUD = Utils.getProgressDialog(requireContext(), getString(R.string.loading))
+
+        setRecyclerviews()
+
+        loadOrganizationUsers(MyApp.userModel!!.organization_id)
+
+        binding.arrowBackImgview.setOnClickListener {
+            findNavController().navigateUp()
+        }
+        binding.forwardBtn.setOnClickListener {
+            if (select_list.size>0)
+            {
+                val gson = Gson()
+                val jsonString = gson.toJson(select_list)
+
+                val  bundle=Bundle()
+                bundle.putString("user_list",jsonString)
+                findNavController().navigate(R.id.action_newGroupFragment_to_detailsNewGroupFragment,bundle)
+
+            }else{
+                Toast.makeText(requireContext(),getString(R.string.please_select_user),Toast.LENGTH_LONG).show()
+            }
+        }
+
+        binding.searchview.setOnQueryTextListener(object : SearchView.OnQueryTextListener {
+            override fun onQueryTextSubmit(query: String?): Boolean {
+                all_users_adapter!!.onFilter(query)
+                return true
+            }
+
+            override fun onQueryTextChange(newText: String?): Boolean {
+                all_users_adapter!!.onFilter(newText)
+                return true
+            }
+        })
+
+    }
+
+    private fun setRecyclerviews() {
+
+        /// for top recyclerview which shows selected users
+        select_list = ArrayList<UserModel>()
+        val linearLayoutManager_horizontal = LinearLayoutManager(context, RecyclerView.HORIZONTAL, false)
+        binding.selectedContactsRecyclerview.layoutManager = linearLayoutManager_horizontal
+        selected_users_adapter =
+            UsersSelectedAdapter(select_list, requireContext(),this)
+        binding.selectedContactsRecyclerview.adapter = selected_users_adapter
+
+        /// for below recyclerview which shows all users
+        all_user_list = ArrayList<UserSelectModel>()
+        val linearLayoutManager = LinearLayoutManager(context, RecyclerView.VERTICAL, false)
+        binding.allContactsRecyclerview.layoutManager = linearLayoutManager
+        all_users_adapter =
+            UsersAdapter(all_user_list, all_user_list, requireContext(), this)
+        binding.allContactsRecyclerview.adapter = all_users_adapter
+    }
+
+    @RequiresApi(Build.VERSION_CODES.N)
+    private fun loadOrganizationUsers(org_id: String?) {
+        Log.i(TAG, "loadOrganizationUsers: orglist:" + org_id)
+        val list = ArrayList<UserModel>()
+        progressHUD!!.show()
+        Repoistory.getUserByOrganization(org_id,
+            object : OnGetSameOrgUserListener {
+                override fun onTaskSuccess(userModelList: List<UserModel>) {
+
+                    list.addAll(userModelList)
+
+                    progressHUD!!.dismiss()
+                    Log.i(TAG, "loadOrganizationUsers: totalSize:" + list.size)
+
+                    proceedDataToViews(list)
+                }
+
+                override fun onTaskError(message: String?) {
+                    progressHUD!!.dismiss()
+                    Log.i(TAG, "onTaskError: exception:$message")
+
+                }
+
+                override fun onTaskEmpty() {
+                    progressHUD!!.dismiss()
+                    Log.i(TAG, "onTaskEmpty: ")
+                }
+
+            })
+    }
+
+    @RequiresApi(Build.VERSION_CODES.N)
+    private fun proceedDataToViews(list: ArrayList<UserModel>)
+    {
+
+        Log.i(TAG, "proceedDataToViews: before_list:" + list.size)
+
+
+        val new_list = ArrayList<UserModel>()
+        all_user_list.clear()
+        for (j in list.indices) {
+            if (!mAuth!!.uid.equals(list[j].user_id)) {
+                if (!new_list.contains(list[j])) {
+                    new_list.add(list[j])
+                }
+
+                if (j == list.size - 1) {
+                    val nameSet: MutableSet<String> = HashSet()
+                    val employeesDistinctById: List<UserModel> = new_list.stream()
+                        .filter { e -> nameSet.add(e.user_id.toString()) }
+                        .collect(Collectors.toList())
+                    Log.i(TAG, "proceedDataToViews: newList:" + new_list.size)
+                    Log.i(TAG, "proceedDataToViews: newLatestList:" + employeesDistinctById.size)
+
+                    for (k in employeesDistinctById.indices)
+                    {
+                        val userSelectModel = UserSelectModel()
+                        userSelectModel.isSelected = false
+                        userSelectModel.userModel = employeesDistinctById[k]
+                        all_user_list.add(userSelectModel)
+                        all_users_adapter!!.notifyDataSetChanged()
+                    }
+
+                    val text=select_list.size.toString() +" "+ getString(R.string.of)+" " + all_user_list.size.toString() +" "+getString(R.string.selected)
+                    binding.numberContactsSelectedTv.text=text
+                }
+
+            }
+
+
+        }
+
+    }
+
+
+    override fun onUserSelect(userModel: UserSelectModel) {
+        Log.i(TAG, "onUserSelect: userselect:" + userModel.isSelected)
+
+        if (userModel.isSelected==true)
+        {
+            userModel.userModel?.let { select_list.add(it) }
+
+        }else{
+            select_list.remove(userModel.userModel)
+        }
+        updateSelectedUserRecyclerview()
+    }
+
+    override fun onUserRemove(userModel: UserModel) {
+        select_list.remove(userModel)
+        for (i in all_user_list.indices)
+        {
+            if (all_user_list[i].userModel?.user_id == userModel.user_id)
+            {
+                all_user_list[i].isSelected=false
+                all_users_adapter?.notifyItemChanged(i)
+                break
+            }
+        }
+
+        updateSelectedUserRecyclerview()
+    }
+
+    private fun updateSelectedUserRecyclerview() {
+        if (select_list.size>0)
+        {
+            binding.selectedUsersTv.visibility=View.GONE
+            val text=select_list.size.toString() +" "+ getString(R.string.of)+" " + all_user_list.size.toString() +" "+getString(R.string.selected)
+            binding.numberContactsSelectedTv.text=text
+        }else{
+            binding.selectedUsersTv.visibility=View.VISIBLE
+
+            val text=select_list.size.toString() +" "+ getString(R.string.of)+" " + all_user_list.size.toString() +" "+getString(R.string.selected)
+            binding.numberContactsSelectedTv.text=text
+        }
+
+        selected_users_adapter!!.notifyDataSetChanged()
+    }
+
+    override fun onDestroyView() {
+        super.onDestroyView()
+        mBinding = null;
+    }
+}
\ No newline at end of file
Index: app/src/androidTest/java/com/trimad/ichat/ExampleInstrumentedTest.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/androidTest/java/com/trimad/ichat/ExampleInstrumentedTest.kt b/app/src/androidTest/java/com/trimad/ichat/ExampleInstrumentedTest.kt
new file mode 100644
--- /dev/null	(date 1663689046000)
+++ b/app/src/androidTest/java/com/trimad/ichat/ExampleInstrumentedTest.kt	(date 1663689046000)
@@ -0,0 +1,24 @@
+package com.trimad.ichat
+
+import androidx.test.platform.app.InstrumentationRegistry
+import androidx.test.ext.junit.runners.AndroidJUnit4
+
+import org.junit.Test
+import org.junit.runner.RunWith
+
+import org.junit.Assert.*
+
+/**
+ * Instrumented test, which will execute on an Android device.
+ *
+ * See [testing documentation](http://d.android.com/tools/testing).
+ */
+@RunWith(AndroidJUnit4::class)
+class ExampleInstrumentedTest {
+    @Test
+    fun useAppContext() {
+        // Context of the app under test.
+        val appContext = InstrumentationRegistry.getInstrumentation().targetContext
+        assertEquals("com.chat.app", appContext.packageName)
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/trimad/ichat/listeners/OnGetUserDataListener.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/trimad/ichat/listeners/OnGetUserDataListener.kt b/app/src/main/java/com/trimad/ichat/listeners/OnGetUserDataListener.kt
new file mode 100644
--- /dev/null	(date 1663689048000)
+++ b/app/src/main/java/com/trimad/ichat/listeners/OnGetUserDataListener.kt	(date 1663689048000)
@@ -0,0 +1,9 @@
+package com.trimad.ichat.listeners
+
+import com.trimad.ichat.models.UserModel
+
+interface OnGetUserDataListener {
+    fun onTaskSuccess(userModel: UserModel?)
+    fun onTaskError(message: String?)
+    fun onTaskEmpty()
+}
\ No newline at end of file
Index: app/src/main/java/com/trimad/ichat/listeners/OnGetGroupDataListener.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/trimad/ichat/listeners/OnGetGroupDataListener.kt b/app/src/main/java/com/trimad/ichat/listeners/OnGetGroupDataListener.kt
new file mode 100644
--- /dev/null	(date 1663689046000)
+++ b/app/src/main/java/com/trimad/ichat/listeners/OnGetGroupDataListener.kt	(date 1663689046000)
@@ -0,0 +1,14 @@
+package com.trimad.ichat.listeners
+
+import com.trimad.ichat.models.GroupModel
+
+/**
+ * Created by Usman Liaqat on 22,August,2022
+ * CodeCoy,
+ * Lahore, Pakistan.
+ */
+interface OnGetGroupDataListener {
+    fun onTaskSuccess(groupModel: GroupModel?)
+    fun onTaskError(message: String?)
+    fun onTaskEmpty()
+}
\ No newline at end of file
Index: app/src/main/java/com/trimad/ichat/listeners/OnGroupClickListener.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/trimad/ichat/listeners/OnGroupClickListener.kt b/app/src/main/java/com/trimad/ichat/listeners/OnGroupClickListener.kt
new file mode 100644
--- /dev/null	(date 1663689048000)
+++ b/app/src/main/java/com/trimad/ichat/listeners/OnGroupClickListener.kt	(date 1663689048000)
@@ -0,0 +1,12 @@
+package com.trimad.ichat.listeners
+
+import com.trimad.ichat.models.GroupModel
+
+/**
+ * Created by Usman Liaqat on 22,August,2022
+ * CodeCoy,
+ * Lahore, Pakistan.
+ */
+interface OnGroupClickListener {
+    fun onGroupSelect(groupModel: GroupModel)
+}
\ No newline at end of file
Index: app/src/main/java/com/trimad/ichat/ui/adapters/ChatMessageAdapter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/trimad/ichat/ui/adapters/ChatMessageAdapter.kt b/app/src/main/java/com/trimad/ichat/ui/adapters/ChatMessageAdapter.kt
new file mode 100644
--- /dev/null	(date 1663689046000)
+++ b/app/src/main/java/com/trimad/ichat/ui/adapters/ChatMessageAdapter.kt	(date 1663689046000)
@@ -0,0 +1,261 @@
+package com.trimad.ichat.ui.adapters
+
+import android.content.Context
+import android.graphics.Color
+import android.text.method.LinkMovementMethod
+import android.util.Log
+import android.view.LayoutInflater
+import android.view.View
+import android.view.ViewGroup
+import androidx.databinding.DataBindingUtil
+import androidx.databinding.ViewDataBinding
+import androidx.recyclerview.widget.RecyclerView
+import com.bumptech.glide.Glide
+import com.trimad.ichat.R
+import com.trimad.ichat.databasecontroller.Repoistory
+import com.trimad.ichat.databinding.FriendMessageItemViewBinding
+import com.trimad.ichat.databinding.InfoMessageItemLayoutBinding
+import com.trimad.ichat.databinding.UserMessageItemViewBinding
+import com.trimad.ichat.models.ChatReadModel
+import com.trimad.ichat.utils.MyApp
+import com.google.firebase.Timestamp
+import java.text.SimpleDateFormat
+import java.util.*
+import kotlin.collections.ArrayList
+
+/**
+ * Created by Usman Liaqat on 25,August,2022
+ * CodeCoy,
+ * Lahore, Pakistan.
+ */
+
+/** Modified by Ali ahmad on 8,September,2022
+ * update isSeen status
+ */
+class ChatMessageAdapter(
+    private var list: ArrayList<ChatReadModel>,
+    private var context: Context,
+    private var uid: String,
+) : RecyclerView.Adapter<ChatMessageViewHolder>() {
+    private var mMessages: ArrayList<ChatReadModel> = ArrayList<ChatReadModel>()
+    private val mContext: Context
+    private var mUid: String = ""
+
+    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ChatMessageViewHolder {
+
+        val inflater = LayoutInflater.from(parent.context)
+        val binding: ViewDataBinding
+        when (viewType) {
+            VIEW_TYPE_USER_MESSAGE -> {
+                binding =
+                    DataBindingUtil.inflate(
+                        inflater,
+                        R.layout.user_message_item_view,
+                        parent,
+                        false
+                    )
+                return ChatMessageViewHolder(binding as UserMessageItemViewBinding)
+            }
+            VIEW_TYPE_FRIEND_MESSAGE -> {
+                binding =
+                    DataBindingUtil.inflate(
+                        inflater,
+                        R.layout.friend_message_item_view,
+                        parent,
+                        false
+                    )
+                return ChatMessageViewHolder(binding as FriendMessageItemViewBinding)
+            }
+            VIEW_TYPE_INFO_MESSAGE -> {
+                binding =
+                    DataBindingUtil.inflate(
+                        inflater,
+                        R.layout.info_message_item_layout,
+                        parent,
+                        false
+                    )
+                return ChatMessageViewHolder(binding as InfoMessageItemLayoutBinding)
+            }
+
+            else -> {
+                return throw IllegalArgumentException("Invalid type")
+            }
+        }
+
+    }
+
+    override fun onBindViewHolder(holder: ChatMessageViewHolder, position: Int) {
+       var msg_type =mMessages[position].chatMessage?.message_type.toString()
+       var msg_id =mMessages[position].chatMessage?.message_id.toString()
+        var msg_receiver: Map<String, String>? = mMessages[position].chatMessage?.msg_receivers
+        when (holder.itemViewType) {
+            VIEW_TYPE_USER_MESSAGE -> {
+                val userBinding: UserMessageItemViewBinding = holder.userMessageItemViewBinding!!
+                userBinding.tvMsg.text = mMessages[position].chatMessage?.message_.toString()
+
+                userBinding.tvMsg.movementMethod = LinkMovementMethod.getInstance()
+                userBinding.tvMsg.setLinkTextColor(Color.BLUE)
+
+                userBinding.tvTime.text = getDate(mMessages[position].chatMessage?.timestamp!!)
+
+                if ( msg_type == "single") {
+                    if (mMessages[position].chatMessage?.message_staus == "Sent") {
+                        userBinding.msgStatus.setImageDrawable(context.getDrawable(R.drawable.ic_receive))
+                    } else {
+                        userBinding.msgStatus.setImageDrawable(context.getDrawable(R.drawable.ic_seen))
+                    }
+                }else{
+                    Log.v("TAG8", "group Sent :" + msg_receiver.toString())
+                    if(msg_receiver != null && msg_receiver.containsValue("Sent")){
+                        Log.v("TAG8", "group contain value Sent on sender side ")
+                        userBinding.msgStatus.setImageDrawable(context.getDrawable(R.drawable.ic_receive))
+                    }else{
+                        Log.v("TAG8", "group not contain value Sent on sender side ")
+                        userBinding.msgStatus.setImageDrawable(context.getDrawable(R.drawable.ic_seen))
+                        if(mMessages[position].chatMessage?.message_staus == "Sent") {
+                            Repoistory.updateSingleSeenReceiverStatus(
+                                groupId = mMessages[position].chatMessage?.group_id.toString(),
+                                docId = mMessages[position].chatMessage?.message_id.toString()
+                            )
+                        }
+                    }
+                }
+
+                Glide.with(mContext)
+                    .load(MyApp.userModel?.user_image)
+                    .error(R.drawable.no_image)
+                    .into(userBinding.ivUser)
+
+//                if (mMessages[position].chat_sender_userModel?.user_image?.isNotEmpty() == true) {
+//                    Glide.with(mContext)
+//                        .load(mMessages[position].chat_sender_userModel?.user_image)
+//                        .error(R.drawable.no_image)
+//                        .into(userBinding.ivUser)
+//                }
+            }
+            VIEW_TYPE_FRIEND_MESSAGE -> {
+                val friendBinding: FriendMessageItemViewBinding =
+                    holder.friendMessageItemViewBinding!!
+                friendBinding.tvMsg.text = mMessages[position].chatMessage?.message_.toString()
+                friendBinding.tvMsg.movementMethod = LinkMovementMethod.getInstance()
+                friendBinding.tvMsg.setLinkTextColor(Color.BLUE)
+                friendBinding.tvTime.text = getDate(mMessages[position].chatMessage?.timestamp!!)
+
+                if (msg_type == "group") {
+                    Log.v("TAG8", "group receive :" + msg_receiver.toString())
+                    // check whether group  message is receiving by group member or not?
+                    if(msg_receiver != null && msg_receiver.containsKey(mUid)){
+                        Log.v("TAG8", "group contain key msg id:"+msg_id)
+                        if(msg_receiver.getValue(mUid) == "Sent"){
+                            Log.v("TAG8", "group contain key value Sent :")
+
+                            Repoistory.updateGroupSeenReceiverStatus(
+                                groupId = mMessages[position].chatMessage?.group_id.toString(),
+                                docId = mMessages[position].chatMessage?.message_id.toString(),
+                                rid = mUid
+                            )
+                        }
+
+                    }
+                    friendBinding.tvName.visibility = View.VISIBLE
+                    friendBinding.tvName.text = mMessages[position].chatMessage?.sender_name.toString()
+
+                    if(msg_receiver != null && msg_receiver.containsValue("Sent")){ }else{
+             // for updating status of msg over document
+                        if(mMessages[position].chatMessage?.message_staus == "Sent") {
+                            Repoistory.updateSingleSeenReceiverStatus(
+                                groupId = mMessages[position].chatMessage?.group_id.toString(),
+                                docId = mMessages[position].chatMessage?.message_id.toString()
+                            )
+                        }
+                    }
+
+
+                }else{
+                    // check whether P2P message is receiving receiver or not?
+                    if(mMessages[position].chatMessage?.sender_id.toString() != mUid) {
+                        // if yes
+                        Repoistory.updateSingleSeenReceiverStatus(
+                            groupId = mMessages[position].chatMessage?.group_id.toString(),
+                            docId = mMessages[position].chatMessage?.message_id.toString()
+                        )
+                    }
+                }
+
+
+                Glide.with(mContext)
+                    .load(mMessages[position].chatMessage!!.sender_image)
+                    .error(R.drawable.no_image)
+                    .into(friendBinding.ivUser)
+
+//                if (mMessages[position].chat_sender_userModel?.user_image?.isNotEmpty() == true) {
+//
+//                    Glide.with(mContext)
+//                        .load(mMessages[position].chat_sender_userModel?.user_image)
+//                        .error(R.drawable.no_image)
+//                        .into(friendBinding.ivUser)
+//                }
+            }
+            VIEW_TYPE_INFO_MESSAGE -> {
+
+            }
+        }
+    }
+
+    override fun getItemCount(): Int {
+        return mMessages.size
+    }
+
+    override fun getItemViewType(position: Int): Int {
+        return if (mMessages.size > 0) {
+
+            if (mMessages[position].chatMessage!!.sender_id == uid) {
+                VIEW_TYPE_USER_MESSAGE
+            } else {
+                VIEW_TYPE_FRIEND_MESSAGE
+            }
+
+        } else {
+            VIEW_TYPE_USER_MESSAGE
+        }
+    }
+
+    companion object {
+        const val VIEW_TYPE_USER_MESSAGE = 0
+        const val VIEW_TYPE_FRIEND_MESSAGE = 1
+        const val VIEW_TYPE_INFO_MESSAGE = 2
+    }
+
+    init {
+        mMessages = list
+        mContext = context
+        mUid = uid
+    }
+
+    private fun getDate(timestamp: Timestamp): String? {
+        val date: Date = timestamp.toDate()
+        val df =
+            SimpleDateFormat("hh:mm a", Locale.getDefault())
+        return df.format(date)
+    }
+}
+
+class ChatMessageViewHolder : RecyclerView.ViewHolder {
+    var userMessageItemViewBinding: UserMessageItemViewBinding? = null
+    var friendMessageItemViewBinding: FriendMessageItemViewBinding? = null
+    var infoMessageItemLayoutBinding: InfoMessageItemLayoutBinding? = null
+
+    constructor(itemView: UserMessageItemViewBinding) : super(itemView.root) {
+        userMessageItemViewBinding = itemView
+    }
+
+    constructor(itemView: FriendMessageItemViewBinding) : super(itemView.root) {
+        friendMessageItemViewBinding = itemView
+    }
+
+    constructor(itemView: InfoMessageItemLayoutBinding) : super(itemView.root) {
+        infoMessageItemLayoutBinding = itemView
+
+    }
+
+}
Index: app/src/main/java/com/trimad/ichat/ui/adapters/UsersSelectedAdapter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/trimad/ichat/ui/adapters/UsersSelectedAdapter.kt b/app/src/main/java/com/trimad/ichat/ui/adapters/UsersSelectedAdapter.kt
new file mode 100644
--- /dev/null	(date 1663689044000)
+++ b/app/src/main/java/com/trimad/ichat/ui/adapters/UsersSelectedAdapter.kt	(date 1663689044000)
@@ -0,0 +1,48 @@
+package com.trimad.ichat.ui.adapters
+
+import android.content.Context
+import android.view.LayoutInflater
+import android.view.View
+import android.view.ViewGroup
+import androidx.recyclerview.widget.RecyclerView
+import com.bumptech.glide.Glide
+import com.trimad.ichat.R
+import com.trimad.ichat.databinding.SelectedParticipentItemviewBinding
+import com.trimad.ichat.listeners.UserRemoveListener
+import com.trimad.ichat.models.UserModel
+
+/**
+ * Created by Usman Liaqat on 22,August,2022
+ * CodeCoy,
+ * Lahore, Pakistan.
+ */
+class UsersSelectedAdapter(
+    private var mList: List<UserModel>,
+    val context: Context,
+    val userRemoveListener: UserRemoveListener
+): RecyclerView.Adapter<UserSelectedViewHolder>() {
+    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): UserSelectedViewHolder {
+        return UserSelectedViewHolder(SelectedParticipentItemviewBinding.inflate(LayoutInflater.from(parent.context),parent,false))
+    }
+
+    override fun onBindViewHolder(holder: UserSelectedViewHolder, position: Int) {
+        holder.selectedParticipentItemviewBinding.selectedImageview.visibility= View.VISIBLE
+
+        Glide.with(context)
+            .load(mList[position].user_image)
+            .error(R.drawable.no_image)
+            .into((holder.selectedParticipentItemviewBinding.userImageview))
+
+        holder.selectedParticipentItemviewBinding.usernameTv.text=mList[position].user_name
+
+        holder.selectedParticipentItemviewBinding.selectedImageview.setOnClickListener {
+            userRemoveListener.onUserRemove(mList[position])
+        }
+    }
+
+    override fun getItemCount(): Int {
+       return mList.size
+    }
+}
+
+class UserSelectedViewHolder(val selectedParticipentItemviewBinding: SelectedParticipentItemviewBinding): RecyclerView.ViewHolder(selectedParticipentItemviewBinding.root)
\ No newline at end of file
Index: app/src/main/java/com/trimad/ichat/ui/fragments/GroupDetailsFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/trimad/ichat/ui/fragments/GroupDetailsFragment.kt b/app/src/main/java/com/trimad/ichat/ui/fragments/GroupDetailsFragment.kt
new file mode 100644
--- /dev/null	(date 1663689048000)
+++ b/app/src/main/java/com/trimad/ichat/ui/fragments/GroupDetailsFragment.kt	(date 1663689048000)
@@ -0,0 +1,262 @@
+package com.trimad.ichat.ui.fragments
+
+import android.app.AlertDialog
+import android.content.DialogInterface
+import android.os.Bundle
+import android.util.Log
+import android.view.LayoutInflater
+import android.view.View
+import android.view.ViewGroup
+import android.widget.Toast
+import androidx.appcompat.widget.SearchView
+import androidx.fragment.app.Fragment
+import androidx.navigation.fragment.findNavController
+import androidx.recyclerview.widget.LinearLayoutManager
+import androidx.recyclerview.widget.RecyclerView
+import com.bumptech.glide.Glide
+import com.trimad.ichat.R
+import com.trimad.ichat.databasecontroller.DatabaseAddresses
+import com.trimad.ichat.databasecontroller.Repoistory
+import com.trimad.ichat.databinding.FragmentGroupDetailsBinding
+import com.trimad.ichat.listeners.OnGetGroupDataListener
+import com.trimad.ichat.listeners.OnGetUserDataListener
+import com.trimad.ichat.listeners.OnGroupMemberClick
+import com.trimad.ichat.models.GroupModel
+import com.trimad.ichat.models.GroupUserModel
+import com.trimad.ichat.models.UserModel
+import com.trimad.ichat.ui.adapters.AllGroupUsersAdapter
+import com.google.firebase.auth.FirebaseAuth
+import com.google.gson.Gson
+import com.kaopiz.kprogresshud.KProgressHUD
+import gun0912.tedimagepicker.util.ToastUtil
+
+
+class GroupDetailsFragment : Fragment() , OnGroupMemberClick {
+
+
+    private  val TAG = "GroupDetailsFragment"
+    private  var mBinding:FragmentGroupDetailsBinding?=null
+
+    private val binding get() = mBinding!!
+    private var progressHUD: KProgressHUD? = null
+    private var mAuth: FirebaseAuth? = null
+
+    private var mGroupID:String?=null
+    private var mGroupModel:GroupModel?=null
+
+    private var mGroupUsersList:ArrayList<GroupUserModel>?=null
+    private var mAdapter:AllGroupUsersAdapter?=null
+
+    override fun onCreateView(
+        inflater: LayoutInflater, container: ViewGroup?,
+        savedInstanceState: Bundle?
+    ): View? {
+        // Inflate the layout for this fragment
+        mBinding=FragmentGroupDetailsBinding.inflate(inflater,container,false)
+        
+        mGroupID= arguments?.getString("group_id")
+
+        Log.i(TAG, "onCreateView: group_id$mGroupID")
+
+
+        
+        return mBinding!!.root
+    }
+
+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
+        super.onViewCreated(view, savedInstanceState)
+
+        Log.i(TAG, "onViewCreated: group_id$mGroupID")
+
+        mAuth = FirebaseAuth.getInstance()
+
+       setupRecyclerView()
+
+        getGroupDetails()
+
+        setListeners()
+
+    }
+
+    private fun setupRecyclerView() {
+        mGroupUsersList= ArrayList()
+
+        mAdapter= AllGroupUsersAdapter(mGroupUsersList!!,mGroupUsersList!!,requireContext() , this , mAuth!!.uid.toString())
+        val linearLayoutManager = LinearLayoutManager(context, RecyclerView.VERTICAL, false)
+        binding.participentsRecyclerview.layoutManager=linearLayoutManager
+        binding.participentsRecyclerview.adapter=mAdapter
+    }
+
+    private fun setListeners() {
+        binding.arrowBackImgview.setOnClickListener {
+            findNavController().navigateUp()
+        }
+
+        binding.searchview.setOnQueryTextListener(object : SearchView.OnQueryTextListener {
+            override fun onQueryTextSubmit(query: String?): Boolean {
+                mAdapter!!.onFilter(query)
+                return true
+            }
+
+            override fun onQueryTextChange(newText: String?): Boolean {
+                mAdapter!!.onFilter(newText)
+                return true
+            }
+        })
+
+        binding.addPersonLayout.setOnClickListener {
+
+            mAdapter?.myAdmin?.let {
+                if(mAdapter?.myAdmin == mAuth!!.uid.toString()){
+
+                    val bundle=Bundle()
+                    val gson = Gson()
+                    val jsonStr = gson.toJson(mGroupModel)
+                    bundle.putString("group_model",jsonStr)
+
+                    findNavController().navigate(R.id.action_groupDetailsFragment_to_addParticipentsFragment,bundle)
+                }else{
+                    ToastUtil.showToast("Only Admin can add group members!")
+                }
+            } ?: ToastUtil.showToast("please wait...")
+
+
+        }
+    }
+
+    private fun getGroupDetails() {
+        Repoistory.getSingleGroupDetails(mGroupID,
+        object : OnGetGroupDataListener{
+            override fun onTaskSuccess(groupModel: GroupModel?) {
+                Log.v("TAG9","onTaskSuccess  before :${mGroupModel?.users_list?.size}")
+                if(mGroupModel != null)
+                    mGroupModel = null
+
+                mGroupModel=groupModel
+
+                Log.v("TAG9","onTaskSuccess  after :${mGroupModel?.users_list?.size}")
+                progressHUD?.dismiss()
+                setDataonViews()
+            }
+
+            override fun onTaskError(message: String?) {
+                progressHUD?.dismiss()
+                Toast.makeText(requireContext(),message,Toast.LENGTH_SHORT).show()
+            }
+
+            override fun onTaskEmpty() {
+                progressHUD?.dismiss()
+            Toast.makeText(requireContext(),getString(R.string.no_data_found),Toast.LENGTH_SHORT).show()
+            }
+
+        })
+    }
+
+    private fun setDataonViews() {
+        if (isAdded)
+        {
+            Glide.with(requireContext())
+                .load(mGroupModel?.group_image)
+                .error(R.drawable.no_image)
+                .into((binding.groupImageview))
+
+            binding.groupNameTv.text = mGroupModel?.group_name
+            binding.groupParticipentsTv.text =
+                getString(R.string.participants)+" "+  mGroupModel?.users_list?.size.toString()
+
+            mGroupUsersList?.clear()
+
+            Log.v("TAG9","setDataonViews  mGroupUsersList :${mGroupUsersList?.size}")
+            Log.v("TAG9","setDataonViews  users_list :${ mGroupModel?.users_list?.size}")
+
+            for (i in mGroupModel?.users_list?.indices!!)
+            {
+                val memberModel = mGroupModel?.users_list!![i]
+
+                val groupUserModel=GroupUserModel()
+                groupUserModel.isAdmin=memberModel.isAdmin
+                Repoistory.getUser(
+                    memberModel.user_id,
+                    object : OnGetUserDataListener
+                    {
+                        override fun onTaskSuccess(userModel: UserModel?) {
+                            groupUserModel.userModel=userModel
+                            mGroupUsersList?.add(groupUserModel)
+                            mAdapter?.notifyDataSetChanged()
+                            ////
+                        }
+                        override fun onTaskError(message: String?) {
+                            Log.i(TAG, "onTaskEmpty: error: "+message +memberModel.user_id)
+
+                        }
+                        override fun onTaskEmpty() {
+                            Log.i(TAG, "onTaskEmpty: data not found: "+memberModel.user_id)
+
+                        }
+
+                    }
+                )
+            }
+//            mAdapter!!.updateData(mGroupUsersList!!)
+//            mAdapter!!.notifyDataSetChanged()
+
+        }
+
+
+    }
+
+    override fun onMemberClick(pos: Int) {
+
+
+
+        AlertDialog.Builder(context)
+            .setTitle("Delete Confirmation!")
+            .setMessage("Are you sure you want to delete this member?") // Specifying a listener allows you to take an action before dismissing the dialog.
+            // The dialog is automatically dismissed when a dialog button is clicked.
+            .setPositiveButton(android.R.string.yes,
+                DialogInterface.OnClickListener { dialog, which ->
+                    // Continue with delete operation
+//                    val groupMember: GroupMember = GroupMember()
+//                    groupMember.user_id=    mGroupModel?.users_list!![pos].user_id
+//                    groupMember.isAdmin=mGroupModel?.users_list!![pos].isAdmin
+//                    groupMember.isnotify=mGroupModel?.users_list!![pos].isnotify
+//                    groupMember.isadded= false
+                    mGroupModel?.users_list!!.removeAt(pos)
+                    mGroupUsersList!!.removeAt(pos)
+                  //  mAdapter = null
+                  //  setupRecyclerView()
+                       mAdapter?.notifyDataSetChanged()
+
+//        val list =ArrayList<GroupMember>()
+//
+//        list.addAll(   mGroupModel?.users_list!!.removeAt(pos))
+
+
+                    DatabaseAddresses.getSingleGroupsRefrence(mGroupID!!).
+                    update("users_list",mGroupModel?.users_list)
+
+
+                }) // A null listener allows the button to dismiss the dialog and take no further action.
+            .setNegativeButton(android.R.string.no, null)
+            .setIcon(android.R.drawable.ic_dialog_alert)
+            .show()
+
+
+
+    }
+
+    override fun onPause() {
+        super.onPause()
+        mAdapter = null
+        mGroupUsersList = null
+        mGroupID = null
+        mGroupModel = null
+
+    }
+
+    override fun onResume() {
+        super.onResume()
+     //   setupRecyclerView()
+    }
+
+}
\ No newline at end of file
Index: app/src/main/java/com/trimad/ichat/ui/adapters/AllGroupUsersAdapter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/trimad/ichat/ui/adapters/AllGroupUsersAdapter.kt b/app/src/main/java/com/trimad/ichat/ui/adapters/AllGroupUsersAdapter.kt
new file mode 100644
--- /dev/null	(date 1664190489282)
+++ b/app/src/main/java/com/trimad/ichat/ui/adapters/AllGroupUsersAdapter.kt	(date 1664190489282)
@@ -0,0 +1,99 @@
+package com.trimad.ichat.ui.adapters
+
+import android.content.Context
+import android.view.LayoutInflater
+import android.view.View
+import android.view.ViewGroup
+import androidx.recyclerview.widget.RecyclerView
+import com.bumptech.glide.Glide
+import com.trimad.ichat.R
+import com.trimad.ichat.databinding.ParticiepentsVertialItemviewBinding
+import com.trimad.ichat.listeners.OnGroupMemberClick
+import com.trimad.ichat.models.GroupUserModel
+import gun0912.tedimagepicker.util.ToastUtil
+import java.util.*
+import kotlin.collections.ArrayList
+
+/**
+ * Created by Usman Liaqat on 22,August,2022
+ * CodeCoy,
+ * Lahore, Pakistan.
+ */
+class AllGroupUsersAdapter(
+    private var mList: ArrayList<GroupUserModel>,
+    private var tempList: ArrayList<GroupUserModel>,
+    val context: Context,
+    val callbacks: OnGroupMemberClick,
+    val uid:String
+): RecyclerView.Adapter<AllGroupUsers_ViewHolder>() {
+    var myAdmin:String? = null
+
+
+    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): AllGroupUsers_ViewHolder {
+        return AllGroupUsers_ViewHolder(ParticiepentsVertialItemviewBinding.inflate(LayoutInflater.from(parent.context),parent,false))
+
+    }
+
+    override fun onBindViewHolder(holder: AllGroupUsers_ViewHolder, position: Int) {
+        Glide.with(context)
+            .load(mList[position].userModel?.user_image)
+            .error(R.drawable.no_image)
+            .into((holder.participentGridItemviewBinding.userImageview))
+
+        holder.participentGridItemviewBinding.usernameTv.text=mList[position].userModel?.user_name
+        holder.participentGridItemviewBinding.userBioTv.text=mList[position].userModel?.user_bio
+
+        if (mList[position].isAdmin==true)
+        {
+            myAdmin = mList[position].userModel!!.user_id
+            holder.participentGridItemviewBinding.adminTv.visibility=View.VISIBLE
+        }else{
+            holder.participentGridItemviewBinding.adminTv.visibility=View.GONE
+        }
+
+//        holder.itemView.setOnClickListener {
+//            ToastUtil.showToast("$position click")
+//        }
+        holder.itemView.setOnLongClickListener {
+            if(myAdmin == uid){
+            callbacks.onMemberClick(position)
+            }else{
+                ToastUtil.showToast("Only Admin can delete group members!")
+            }
+
+            true
+        }
+    }
+
+//    fun updateData(list:ArrayList<GroupUserModel>){
+//        mList.clear()
+//        tempList.clear()
+//        mList.addAll(list)
+//        tempList.addAll(list)
+//
+//    }
+
+    override fun getItemCount(): Int {
+        return  mList.size
+    }
+
+    fun onFilter(query: String?) {
+        val charSequenceString: String = query.toString()
+        mList = ArrayList()
+        if (query.equals(""))
+        {
+            mList = tempList
+        } else {
+            for (model in tempList) {
+                if (model.userModel!!.user_name.toString().lowercase()
+                        .contains(charSequenceString.lowercase(Locale.getDefault()))
+                ) {
+                    (mList as ArrayList<GroupUserModel>).add(model)
+                }
+            }
+        }
+        notifyDataSetChanged()
+    }
+}
+
+class AllGroupUsers_ViewHolder(val participentGridItemviewBinding: ParticiepentsVertialItemviewBinding):RecyclerView.ViewHolder(participentGridItemviewBinding.root)
\ No newline at end of file
Index: app/src/main/java/com/trimad/ichat/listeners/OnUserDataSaveListener.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/trimad/ichat/listeners/OnUserDataSaveListener.kt b/app/src/main/java/com/trimad/ichat/listeners/OnUserDataSaveListener.kt
new file mode 100644
--- /dev/null	(date 1663689048000)
+++ b/app/src/main/java/com/trimad/ichat/listeners/OnUserDataSaveListener.kt	(date 1663689048000)
@@ -0,0 +1,6 @@
+package com.trimad.ichat.listeners
+
+interface OnUserDataSaveListener {
+    fun onTaskSuccess()
+    fun onTaskFailure(message: String?)
+}
\ No newline at end of file
Index: app/src/main/java/com/trimad/ichat/listeners/OnGetSameOrgUserListener.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/trimad/ichat/listeners/OnGetSameOrgUserListener.kt b/app/src/main/java/com/trimad/ichat/listeners/OnGetSameOrgUserListener.kt
new file mode 100644
--- /dev/null	(date 1663689044000)
+++ b/app/src/main/java/com/trimad/ichat/listeners/OnGetSameOrgUserListener.kt	(date 1663689044000)
@@ -0,0 +1,15 @@
+package com.trimad.ichat.listeners
+
+import com.trimad.ichat.models.UserModel
+
+/**
+ * Created by Usman Liaqat on 18,August,2022
+ * CodeCoy,
+ * Lahore, Pakistan.
+ */
+interface OnGetSameOrgUserListener {
+
+    fun onTaskSuccess(userModelList: List<UserModel>)
+    fun onTaskError(message: String?)
+    fun onTaskEmpty()
+}
\ No newline at end of file
Index: app/src/main/java/com/trimad/ichat/ui/adapters/OrganizationUsersAdapter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/trimad/ichat/ui/adapters/OrganizationUsersAdapter.kt b/app/src/main/java/com/trimad/ichat/ui/adapters/OrganizationUsersAdapter.kt
new file mode 100644
--- /dev/null	(date 1663689046000)
+++ b/app/src/main/java/com/trimad/ichat/ui/adapters/OrganizationUsersAdapter.kt	(date 1663689046000)
@@ -0,0 +1,69 @@
+package com.trimad.ichat.ui.adapters
+
+import android.content.Context
+import android.view.LayoutInflater
+import android.view.View
+import android.view.ViewGroup
+import androidx.recyclerview.widget.RecyclerView
+import com.bumptech.glide.Glide
+import com.trimad.ichat.R
+import com.trimad.ichat.databinding.ParticiepentsVertialItemviewBinding
+import com.trimad.ichat.listeners.Org_UserSelecteListener
+import com.trimad.ichat.models.UserModel
+import java.util.*
+
+/**
+ * Created by Usman Liaqat on 31,August,2022
+ * CodeCoy,
+ * Lahore, Pakistan.
+ */
+class OrganizationUsersAdapter(
+    private var mList: List<UserModel>,
+    private var tempList: List<UserModel>,
+    val context: Context,
+    val userSelectListener: Org_UserSelecteListener
+): RecyclerView.Adapter<OrganizationUsersViewHolder>() {
+    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): OrganizationUsersViewHolder {
+        return OrganizationUsersViewHolder(ParticiepentsVertialItemviewBinding.inflate(LayoutInflater.from(parent.context),parent,false))
+    }
+
+    override fun onBindViewHolder(holder: OrganizationUsersViewHolder, position: Int) {
+        holder.particiepentsVertialItemviewBinding.adminTv.visibility= View.GONE
+
+        Glide.with(context)
+            .load(mList[position].user_image)
+            .error(R.drawable.no_image)
+            .into((holder.particiepentsVertialItemviewBinding.userImageview))
+
+        holder.particiepentsVertialItemviewBinding.usernameTv.text=mList[position].user_name
+        holder.particiepentsVertialItemviewBinding.userBioTv.text=mList[position].user_bio
+
+
+        holder.itemView.setOnClickListener {
+            userSelectListener.onUserSelect(mList[position])
+        }
+    }
+
+    override fun getItemCount(): Int {
+        return mList.size
+    }
+
+    fun onFilter(query: String?) {
+        val charSequenceString: String = query.toString()
+        mList = ArrayList()
+        if (query.equals(""))
+        {
+            mList = tempList
+        } else {
+            for (model in tempList) {
+                if (model.user_name.toString().lowercase()
+                        .contains(charSequenceString.lowercase(Locale.getDefault()))
+                ) {
+                    (mList as ArrayList<UserModel>).add(model)
+                }
+            }
+        }
+        notifyDataSetChanged()
+    }
+}
+class OrganizationUsersViewHolder(val particiepentsVertialItemviewBinding: ParticiepentsVertialItemviewBinding) : RecyclerView.ViewHolder(particiepentsVertialItemviewBinding.root)
\ No newline at end of file
Index: app/src/main/java/com/trimad/ichat/ui/fragments/OrganizationFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/trimad/ichat/ui/fragments/OrganizationFragment.kt b/app/src/main/java/com/trimad/ichat/ui/fragments/OrganizationFragment.kt
new file mode 100644
--- /dev/null	(date 1663689046000)
+++ b/app/src/main/java/com/trimad/ichat/ui/fragments/OrganizationFragment.kt	(date 1663689046000)
@@ -0,0 +1,231 @@
+package com.trimad.ichat.ui.fragments
+
+import android.content.Context
+import android.os.Bundle
+import android.util.Log
+import androidx.fragment.app.Fragment
+import android.view.LayoutInflater
+import android.view.View
+import android.view.ViewGroup
+import android.widget.Toast
+import androidx.appcompat.widget.SearchView
+import androidx.navigation.fragment.findNavController
+
+import androidx.recyclerview.widget.LinearLayoutManager
+import androidx.recyclerview.widget.RecyclerView
+import com.trimad.ichat.R
+import com.trimad.ichat.databasecontroller.DatabaseAddresses
+import com.trimad.ichat.databasecontroller.Repoistory
+import com.trimad.ichat.databinding.FragmentOrganizationBinding
+import com.trimad.ichat.listeners.OnGetSameOrgUserListener
+import com.trimad.ichat.models.UserModel
+import com.trimad.ichat.listeners.Org_UserSelecteListener
+import com.trimad.ichat.ui.activities.MainActivity
+import com.trimad.ichat.ui.adapters.OrganizationUsersAdapter
+import com.trimad.ichat.utils.MyApp
+import com.trimad.ichat.utils.Utils
+import com.google.firebase.auth.FirebaseAuth
+import com.google.gson.Gson
+import com.kaopiz.kprogresshud.KProgressHUD
+import gun0912.tedimagepicker.util.ToastUtil
+
+
+class OrganizationFragment : Fragment(), Org_UserSelecteListener {
+
+    private  val TAG = "OrganizationFragment"
+    private var mBinding: FragmentOrganizationBinding? = null
+    private val binding get() = mBinding!!
+    private var progressHUD: KProgressHUD? = null
+    private var mAuth: FirebaseAuth? = null
+  //  private var userModel: UserModel? = null
+    private var mList: ArrayList<UserModel>? = null
+    private var mAdapter: OrganizationUsersAdapter? = null
+    private var mContext: MainActivity? = null
+
+    override fun onCreateView(
+        inflater: LayoutInflater, container: ViewGroup?,
+        savedInstanceState: Bundle?
+    ): View? {
+        // Inflate the layout for this fragment
+
+
+        mBinding=FragmentOrganizationBinding.inflate(inflater,container,false)
+
+        mAuth = FirebaseAuth.getInstance()
+
+//        userModel = Utils.getUserProfile2(requireContext())
+        progressHUD = Utils.getProgressDialog(requireContext(),"Loading")
+
+        return mBinding!!.root
+    }
+
+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
+        super.onViewCreated(view, savedInstanceState)
+
+        setUpRecyclerView()
+
+           loadGroupsData()
+
+
+       // loadGroupsData()
+
+        binding.searchview.setOnQueryTextListener(object : SearchView.OnQueryTextListener {
+            override fun onQueryTextSubmit(query: String?): Boolean {
+                mAdapter!!.onFilter(query)
+                return true
+            }
+
+            override fun onQueryTextChange(newText: String?): Boolean {
+                mAdapter!!.onFilter(newText)
+                return true
+            }
+        })
+    }
+
+//    private fun loadGroupsData() {
+//        if(mAuth == null)
+//            mAuth = FirebaseAuth.getInstance()
+//
+//
+//        progressHUD!!.show()
+//        if(userModel != null && userModel!!.organization_id != null && userModel!!.organization_id != ""){
+//            Log.v("TAG9","id not null")
+//            Repoistory.getLiveUserByOrganization(mAuth!!.currentUser!!.uid.toString(),userModel!!.organization_id,requireContext() ,
+//                object : OnGetSameOrgUserListener {
+//                    override fun onTaskSuccess(userModelList: List<UserModel>) {
+//                        mList?.clear()
+//                        mList?.addAll(userModelList)
+//                        progressHUD!!.dismiss()
+//                        Log.i(TAG, "loadOrganizationUsers: totalSize:" + mList?.size)
+//
+//                        mAdapter?.notifyDataSetChanged()
+//                    }
+//
+//                    override fun onTaskError(message: String?) {
+//                        progressHUD!!.dismiss()
+//                        Log.i(TAG, "onTaskError: exception:$message")
+//
+//                    }
+//
+//                    override fun onTaskEmpty() {
+//                        progressHUD!!.dismiss()
+//                        Log.i(TAG, "onTaskEmpty: ")
+//                    }
+//
+//                })
+//
+//        }else{
+//            Log.v("TAG9","id null ${mAuth!!.currentUser!!.uid.toString()}")
+//        Repoistory.getSingleUser(mAuth!!.currentUser!!.uid.toString(),requireContext(),
+//            object : OnGetSameOrgUserListener {
+//                override fun onTaskSuccess(userModelList: List<UserModel>) {
+//                    mList?.clear()
+//                    mList?.addAll(userModelList)
+//                    progressHUD!!.dismiss()
+//                    Log.i(TAG, "loadOrganizationUsers: totalSize:" + mList?.size)
+//
+//                    mAdapter?.notifyDataSetChanged()
+//                }
+//
+//                override fun onTaskError(message: String?) {
+//                    progressHUD!!.dismiss()
+//                    Log.i(TAG, "onTaskError: exception:$message")
+//
+//                }
+//
+//                override fun onTaskEmpty() {
+//                    progressHUD!!.dismiss()
+//                    Log.i(TAG, "onTaskEmpty: ")
+//                }
+//
+//            })
+//
+//        }
+//
+//
+//    }
+
+
+    private fun getChats(){
+        progressHUD!!.show()
+        Repoistory.getLiveUserByOrganization(mAuth!!.currentUser!!.uid.toString(),MyApp.userModel!!.organization_id,requireContext() ,
+            object : OnGetSameOrgUserListener {
+                override fun onTaskSuccess(userModelList: List<UserModel>) {
+                    mList?.clear()
+                    mList?.addAll(userModelList)
+                    progressHUD!!.dismiss()
+                    Log.i(TAG, "loadOrganizationUsers: totalSize:" + mList?.size)
+
+                    mAdapter?.notifyDataSetChanged()
+                }
+
+                override fun onTaskError(message: String?) {
+                    progressHUD!!.dismiss()
+                    Log.i(TAG, "onTaskError: exception:$message")
+
+                }
+
+                override fun onTaskEmpty() {
+                    progressHUD!!.dismiss()
+                    Log.i(TAG, "onTaskEmpty: ")
+                }
+
+            })
+    }
+
+    private fun loadGroupsData() {
+        if(MyApp.userModel != null){
+            Log.v("TAG9","id not null")
+          getChats()
+        }
+        else{
+            DatabaseAddresses.getSingleUserReference(mAuth?.currentUser!!.uid)
+                .get()
+                .addOnSuccessListener {
+                    if (it.exists()) {
+                        MyApp.userModel = it.toObject(UserModel::class.java)!!
+                      getChats()
+                    }
+                }
+                .addOnFailureListener {
+                    ToastUtil.showToast("Network Error!")
+                }
+
+            Toast.makeText(mContext,"please wait...",Toast.LENGTH_SHORT).show()
+        }
+
+    }
+
+    private fun setUpRecyclerView() {
+        mList = ArrayList()
+        mAdapter = OrganizationUsersAdapter(mList!!,mList!!, requireContext(),this)
+        val linearLayoutManager = LinearLayoutManager(context, RecyclerView.VERTICAL, false)
+        binding.usersRecyclerview.layoutManager = linearLayoutManager
+        binding.usersRecyclerview.adapter = mAdapter
+    }
+
+    override fun onUserSelect(userModel: UserModel) {
+        val bundle= Bundle()
+        val gson = Gson()
+        val jsonStr = gson.toJson(userModel)
+        bundle.putString("user_model",jsonStr)
+        findNavController().navigate(R.id.action_homeFragment_to_profileFragment,bundle)
+    }
+
+    override fun onResume() {
+        super.onResume()
+       // loadGroupsData()
+    }
+
+
+    override fun onAttach(context: Context) {
+        super.onAttach(context)
+        mContext = context as MainActivity
+    }
+
+    override fun onDestroy() {
+        mList?.clear()
+        super.onDestroy()
+    }
+
+}
\ No newline at end of file
Index: app/src/main/java/com/trimad/ichat/listeners/Org_UserSelecteListener.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/trimad/ichat/listeners/Org_UserSelecteListener.kt b/app/src/main/java/com/trimad/ichat/listeners/Org_UserSelecteListener.kt
new file mode 100644
--- /dev/null	(date 1663689048000)
+++ b/app/src/main/java/com/trimad/ichat/listeners/Org_UserSelecteListener.kt	(date 1663689048000)
@@ -0,0 +1,12 @@
+package com.trimad.ichat.listeners
+
+import com.trimad.ichat.models.UserModel
+
+/**
+ * Created by Usman Liaqat on 31,August,2022
+ * CodeCoy,
+ * Lahore, Pakistan.
+ */
+interface Org_UserSelecteListener {
+    fun onUserSelect(userModel: UserModel)
+}
\ No newline at end of file
Index: app/src/main/java/com/trimad/ichat/listeners/OnOrganizationLoadListener.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/trimad/ichat/listeners/OnOrganizationLoadListener.kt b/app/src/main/java/com/trimad/ichat/listeners/OnOrganizationLoadListener.kt
new file mode 100644
--- /dev/null	(date 1663689046000)
+++ b/app/src/main/java/com/trimad/ichat/listeners/OnOrganizationLoadListener.kt	(date 1663689046000)
@@ -0,0 +1,14 @@
+package com.trimad.ichat.listeners
+
+import com.trimad.ichat.models.Organization
+
+/**
+ * Created by Usman Liaqat on 31,August,2022
+ * CodeCoy,
+ * Lahore, Pakistan.
+ */
+interface OnOrganizationLoadListener {
+    fun onTaskSuccess(organization: Organization?)
+    fun onTaskError(message: String?)
+    fun onTaskEmpty()
+}
\ No newline at end of file
Index: app/src/main/java/com/trimad/ichat/ui/adapters/ChildFragmentStateAdapter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/trimad/ichat/ui/adapters/ChildFragmentStateAdapter.kt b/app/src/main/java/com/trimad/ichat/ui/adapters/ChildFragmentStateAdapter.kt
new file mode 100644
--- /dev/null	(date 1663689048000)
+++ b/app/src/main/java/com/trimad/ichat/ui/adapters/ChildFragmentStateAdapter.kt	(date 1663689048000)
@@ -0,0 +1,24 @@
+package com.trimad.ichat.ui.adapters
+
+import androidx.fragment.app.Fragment
+import androidx.viewpager2.adapter.FragmentStateAdapter
+import com.trimad.ichat.ui.fragments.ChatHomeFragment
+import com.trimad.ichat.ui.fragments.GroupsFragment
+import com.trimad.ichat.ui.fragments.OrganizationFragment
+
+class ChildFragmentStateAdapter(private val fragment: Fragment) :
+    FragmentStateAdapter(fragment) {
+
+    override fun getItemCount(): Int = 3
+
+    override fun createFragment(position: Int): Fragment {
+
+        return when (position) {
+            0 -> ChatHomeFragment()
+            1 -> GroupsFragment()
+            2 -> OrganizationFragment()
+            else -> ChatHomeFragment()
+        }
+    }
+
+}
\ No newline at end of file
Index: app/src/main/java/com/trimad/ichat/ui/fragments/AddParticipentsFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/trimad/ichat/ui/fragments/AddParticipentsFragment.kt b/app/src/main/java/com/trimad/ichat/ui/fragments/AddParticipentsFragment.kt
new file mode 100644
--- /dev/null	(date 1663689046000)
+++ b/app/src/main/java/com/trimad/ichat/ui/fragments/AddParticipentsFragment.kt	(date 1663689046000)
@@ -0,0 +1,304 @@
+package com.trimad.ichat.ui.fragments
+
+import android.os.Build
+import android.os.Bundle
+import android.util.Log
+import android.view.LayoutInflater
+import android.view.View
+import android.view.ViewGroup
+import android.widget.Toast
+import androidx.annotation.RequiresApi
+import androidx.appcompat.widget.SearchView
+import androidx.fragment.app.Fragment
+import androidx.navigation.fragment.findNavController
+import androidx.recyclerview.widget.LinearLayoutManager
+import androidx.recyclerview.widget.RecyclerView
+import com.trimad.ichat.R
+import com.trimad.ichat.databasecontroller.DatabaseUploader
+import com.trimad.ichat.databasecontroller.Repoistory
+import com.trimad.ichat.databinding.FragmentAddParticipentsBinding
+import com.trimad.ichat.listeners.OnGetSameOrgUserListener
+import com.trimad.ichat.listeners.OnUserDataSaveListener
+import com.trimad.ichat.listeners.UserRemoveListener
+import com.trimad.ichat.listeners.UserSelectListener
+import com.trimad.ichat.models.GroupMember
+import com.trimad.ichat.models.GroupModel
+import com.trimad.ichat.models.UserModel
+import com.trimad.ichat.models.UserSelectModel
+import com.trimad.ichat.ui.adapters.UsersAdapter
+import com.trimad.ichat.ui.adapters.UsersSelectedAdapter
+import com.trimad.ichat.utils.MyApp
+import com.trimad.ichat.utils.Utils
+import com.google.firebase.auth.FirebaseAuth
+import com.google.gson.Gson
+import com.kaopiz.kprogresshud.KProgressHUD
+import java.util.stream.Collectors
+
+
+class AddParticipentsFragment : Fragment(), UserSelectListener, UserRemoveListener {
+
+    private  val TAG = "AddParticipentsFragment"
+    private var mBinding: FragmentAddParticipentsBinding? = null
+
+    private val binding get() = mBinding!!
+
+    private var progressHUD: KProgressHUD? = null
+    private var mAuth: FirebaseAuth? = null
+  //  private var userModel: UserModel? = null
+
+
+    private var all_users_adapter: UsersAdapter? = null
+    private var selected_users_adapter: UsersSelectedAdapter? = null
+
+    private lateinit var all_user_list: ArrayList<UserSelectModel>
+    private lateinit var select_list: ArrayList<UserModel>
+
+
+    private var mGroupModel:GroupModel?=null
+
+    override fun onCreateView(
+        inflater: LayoutInflater, container: ViewGroup?,
+        savedInstanceState: Bundle?
+    ): View? {
+        mBinding=FragmentAddParticipentsBinding.inflate(inflater,container,false)
+        // Inflate the layout for this fragment
+
+        val gson = Gson()
+        val jsonInString = arguments?.getString("group_model")
+        mGroupModel = gson.fromJson(
+            jsonInString,
+            GroupModel::class.java
+        )
+        Log.i(TAG, "onCreateView: group_id:${mGroupModel?.group_name}")
+
+        return mBinding!!.root
+    }
+
+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
+        super.onViewCreated(view, savedInstanceState)
+
+
+        mAuth = FirebaseAuth.getInstance()
+
+        progressHUD = Utils.getProgressDialog(requireContext(), getString(R.string.loading))
+
+       // val org_id= userModel!!.organization_id
+
+        setRecyclerviews()
+
+        loadOrganizationUsers(MyApp.userModel!!.organization_id.toString())
+
+        binding.arrowBackImgview.setOnClickListener {
+            findNavController().navigateUp()
+        }
+
+        binding.doneBtn.setOnClickListener {
+
+            if (select_list.size>0)
+            {
+                Log.i(TAG, "onViewCreated:aaa old list:"+mGroupModel?.users_list?.size)
+
+                for (i in select_list.indices)
+                {
+                    val groupMember: GroupMember = GroupMember()
+                    groupMember.user_id= select_list[i].user_id
+                    groupMember.isAdmin=false
+                    mGroupModel?.users_list?.add(groupMember)
+                }
+
+                Log.i(TAG, "onViewCreated:aaa new list:"+mGroupModel?.users_list?.size)
+
+                progressHUD?.show()
+                DatabaseUploader.saveGroup(mGroupModel!!,
+                    object : OnUserDataSaveListener {
+                        override fun onTaskSuccess() {
+                            progressHUD?.dismiss()
+                            Toast.makeText(requireContext(),getString(R.string.data_update_successfully),
+                                Toast.LENGTH_SHORT).show()
+                            findNavController().popBackStack()
+                        }
+                        override fun onTaskFailure(message: String?) {
+                            progressHUD?.dismiss()
+                        }
+                    })
+            }else{
+                Toast.makeText(requireContext(),getString(R.string.please_select_user),Toast.LENGTH_LONG).show()
+            }
+
+        }
+
+        binding.searchview.setOnQueryTextListener(object : SearchView.OnQueryTextListener {
+            override fun onQueryTextSubmit(query: String?): Boolean {
+                all_users_adapter!!.onFilter(query)
+                return true
+            }
+
+            override fun onQueryTextChange(newText: String?): Boolean {
+                all_users_adapter!!.onFilter(newText)
+                return true
+            }
+        })
+    }
+
+    private fun setRecyclerviews() {
+
+        /// for top recyclerview which shows selected users
+        select_list = ArrayList<UserModel>()
+        val linearLayoutManager_horizontal = LinearLayoutManager(context, RecyclerView.HORIZONTAL, false)
+        binding.selectedContactsRecyclerview.layoutManager = linearLayoutManager_horizontal
+        selected_users_adapter =
+            UsersSelectedAdapter(select_list, requireContext(),this)
+        binding.selectedContactsRecyclerview.adapter = selected_users_adapter
+
+        /// for below recyclerview which shows all users
+        all_user_list = ArrayList<UserSelectModel>()
+        val linearLayoutManager = LinearLayoutManager(context, RecyclerView.VERTICAL, false)
+        binding.allContactsRecyclerview.layoutManager = linearLayoutManager
+        all_users_adapter =
+            UsersAdapter(all_user_list, all_user_list, requireContext(), this)
+        binding.allContactsRecyclerview.adapter = all_users_adapter
+    }
+
+    @RequiresApi(Build.VERSION_CODES.N)
+    private fun loadOrganizationUsers( org_id:String) {
+        Log.i(TAG, "loadOrganizationUsers: orglist:" + org_id)
+        val list = ArrayList<UserModel>()
+        progressHUD!!.show()
+
+        Repoistory.getUserByOrganization(org_id,
+            object : OnGetSameOrgUserListener {
+                override fun onTaskSuccess(userModelList: List<UserModel>) {
+                    list.addAll(userModelList)
+                    progressHUD!!.dismiss()
+                    Log.i(TAG, "loadOrganizationUsers: totalSize:" + list.size)
+
+                    proceedDataToViews(list)
+                }
+
+                override fun onTaskError(message: String?) {
+                    progressHUD!!.dismiss()
+                    Log.i(TAG, "onTaskError: exception:$message")
+
+                }
+
+                override fun onTaskEmpty() {
+                    progressHUD!!.dismiss()
+                    Log.i(TAG, "onTaskEmpty: ")
+                }
+
+            })
+    }
+
+    @RequiresApi(Build.VERSION_CODES.N)
+    private fun proceedDataToViews(list: ArrayList<UserModel>)
+    {
+
+        Log.i(TAG, "proceedDataToViews: before_list:" + list.size)
+        val new_list = ArrayList<UserModel>()
+        all_user_list.clear()
+        for (j in list.indices) {
+            if (!mAuth!!.uid.equals(list[j].user_id)) {
+                if (!new_list.contains(list[j])) {
+                    new_list.add(list[j])
+                }
+
+                if (j == list.size - 1)
+                {
+                    val nameSet: MutableSet<String> = HashSet()
+                    val employeesDistinctById: List<UserModel> = new_list.stream()
+                        .filter { e -> nameSet.add(e.user_id.toString()) }
+                        .collect(Collectors.toList())
+                    Log.i(TAG, "proceedDataToViews: newList:" + new_list.size)
+                    Log.i(TAG, "proceedDataToViews: newLatestList:" + employeesDistinctById.size)
+
+                    for (k in employeesDistinctById.indices)
+                    {
+                        val userSelectModel = UserSelectModel()
+                        userSelectModel.userModel = employeesDistinctById[k]
+
+                        for (l in mGroupModel?.users_list?.indices!!)
+                        {
+                            if (mGroupModel?.users_list!![l].user_id== employeesDistinctById[k].user_id)
+                            {
+                                userSelectModel.isSelected = true
+                                break
+                            }
+                        }
+
+                        Log.i(TAG, "proceedDataToViews:isTrue: "+userSelectModel.isSelected)
+
+                        if (userSelectModel.isSelected!=true)
+                        {
+                            all_user_list.add(userSelectModel)
+                        }
+
+                        all_users_adapter!!.notifyDataSetChanged()
+
+                    }
+
+                    if (all_user_list.size<=0)
+                    {
+                        Toast.makeText(requireContext(),"No more users found for adding in this group",Toast.LENGTH_SHORT).show()
+                        findNavController().navigateUp()
+                    }
+
+                    val text=select_list.size.toString() +" "+ getString(R.string.of)+" " + all_user_list.size.toString() +" "+getString(R.string.selected)
+                    binding.numberContactsSelectedTv.text=text
+                }
+
+            }
+
+
+        }
+
+    }
+
+    override fun onUserSelect(userModel: UserSelectModel) {
+        Log.i(TAG, "onUserSelect: userselect:" + userModel.isSelected)
+
+        if (userModel.isSelected==true)
+        {
+            userModel.userModel?.let { select_list.add(it) }
+
+        }else{
+            select_list.remove(userModel.userModel)
+        }
+        updateSelectedUserRecyclerview()
+    }
+
+    override fun onUserRemove(userModel: UserModel) {
+        select_list.remove(userModel)
+        for (i in all_user_list.indices)
+        {
+            if (all_user_list[i].userModel?.user_id == userModel.user_id)
+            {
+                all_user_list[i].isSelected=false
+                all_users_adapter?.notifyItemChanged(i)
+                break
+            }
+        }
+
+        updateSelectedUserRecyclerview()
+    }
+
+    private fun updateSelectedUserRecyclerview() {
+        if (select_list.size>0)
+        {
+            binding.selectedUsersTv.visibility=View.GONE
+            val text=select_list.size.toString() +" "+ getString(R.string.of)+" " + all_user_list.size.toString() +" "+getString(R.string.selected)
+            binding.numberContactsSelectedTv.text=text
+        }else{
+            binding.selectedUsersTv.visibility=View.VISIBLE
+
+            val text=select_list.size.toString() +" "+ getString(R.string.of)+" " + all_user_list.size.toString() +" "+getString(R.string.selected)
+            binding.numberContactsSelectedTv.text=text
+        }
+
+        selected_users_adapter!!.notifyDataSetChanged()
+    }
+
+    override fun onDestroyView() {
+        super.onDestroyView()
+        mBinding = null
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/trimad/ichat/ui/adapters/ViewUsersSelectedAdapter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/trimad/ichat/ui/adapters/ViewUsersSelectedAdapter.kt b/app/src/main/java/com/trimad/ichat/ui/adapters/ViewUsersSelectedAdapter.kt
new file mode 100644
--- /dev/null	(date 1663689046000)
+++ b/app/src/main/java/com/trimad/ichat/ui/adapters/ViewUsersSelectedAdapter.kt	(date 1663689046000)
@@ -0,0 +1,42 @@
+package com.trimad.ichat.ui.adapters
+
+import android.content.Context
+import android.view.LayoutInflater
+import android.view.ViewGroup
+import androidx.recyclerview.widget.RecyclerView
+import com.bumptech.glide.Glide
+import com.trimad.ichat.R
+import com.trimad.ichat.databinding.ParticipentGridItemviewBinding
+import com.trimad.ichat.models.UserModel
+
+/**
+ * Created by Usman Liaqat on 22,August,2022
+ * CodeCoy,
+ * Lahore, Pakistan.
+ */
+class ViewUsersSelectedAdapter(
+    private var mList: List<UserModel>,
+    val context: Context,
+): RecyclerView.Adapter<ViewUserSelectedViewHolder>() {
+    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewUserSelectedViewHolder {
+        return ViewUserSelectedViewHolder(ParticipentGridItemviewBinding.inflate(LayoutInflater.from(parent.context),parent,false))
+
+    }
+
+    override fun onBindViewHolder(holder: ViewUserSelectedViewHolder, position: Int) {
+
+
+
+        Glide.with(context)
+            .load(mList[position].user_image)
+            .error(R.drawable.no_image)
+            .into((holder.selectedParticipentItemviewBinding.userImageview))
+
+        holder.selectedParticipentItemviewBinding.usernameTv.text=mList[position].user_name
+    }
+
+    override fun getItemCount(): Int {
+        return mList.size
+    }
+}
+class ViewUserSelectedViewHolder(val selectedParticipentItemviewBinding: ParticipentGridItemviewBinding): RecyclerView.ViewHolder(selectedParticipentItemviewBinding.root)
\ No newline at end of file
Index: app/src/main/java/com/trimad/ichat/firestoragecontroller/FireStorageUploader.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/trimad/ichat/firestoragecontroller/FireStorageUploader.kt b/app/src/main/java/com/trimad/ichat/firestoragecontroller/FireStorageUploader.kt
new file mode 100644
--- /dev/null	(date 1663689048000)
+++ b/app/src/main/java/com/trimad/ichat/firestoragecontroller/FireStorageUploader.kt	(date 1663689048000)
@@ -0,0 +1,22 @@
+package com.trimad.ichat.firestoragecontroller
+
+import android.net.Uri
+import com.google.firebase.storage.StorageReference
+import com.trimad.ichat.listeners.OnFileUploadListener
+
+object FireStorageUploader {
+    fun uploadFile(
+        storageReference: StorageReference,
+        uri: Uri,
+        onFileUploadListener: OnFileUploadListener
+    ) {
+        storageReference.child(uri.lastPathSegment!!).putFile(uri)
+            .addOnSuccessListener { taskSnapshot ->
+                taskSnapshot.storage.downloadUrl.addOnSuccessListener { uri ->
+                    onFileUploadListener.onFileUploaded(uri.toString())
+                }
+            }
+            .addOnProgressListener { snapshot -> onFileUploadListener.onProgress(snapshot) }
+            .addOnFailureListener { e -> onFileUploadListener.onFailure(e.message) }
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/trimad/ichat/notification/MyFirebaseMessagingService.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/trimad/ichat/notification/MyFirebaseMessagingService.kt b/app/src/main/java/com/trimad/ichat/notification/MyFirebaseMessagingService.kt
new file mode 100644
--- /dev/null	(date 1663689046000)
+++ b/app/src/main/java/com/trimad/ichat/notification/MyFirebaseMessagingService.kt	(date 1663689046000)
@@ -0,0 +1,139 @@
+package com.trimad.ichat.notification
+
+import android.app.Notification
+
+import com.google.firebase.messaging.FirebaseMessagingService
+import com.google.firebase.messaging.RemoteMessage
+import com.trimad.ichat.R
+import org.json.JSONObject
+import org.json.JSONException
+import android.os.Bundle
+import com.trimad.ichat.constants.ConstantsData
+import androidx.navigation.NavDeepLinkBuilder
+import com.trimad.ichat.ui.activities.MainActivity
+import android.media.AudioAttributes
+import android.media.RingtoneManager
+import androidx.core.app.NotificationCompat
+import android.app.NotificationManager
+import android.os.Build
+import android.app.NotificationChannel
+import android.app.PendingIntent
+import android.util.Log
+import java.lang.Exception
+
+/**
+ * Created by Kamran on 01/11/20.
+ */
+class MyFirebaseMessagingService : FirebaseMessagingService()
+{
+    override fun onMessageReceived(remoteMessage: RemoteMessage) {
+        Log.d(TAG, "onMessageReceived: ")
+        if (remoteMessage.data.isNotEmpty()) {
+            Log.d(TAG, "Message data payload: " + remoteMessage.data)
+            sendNotification(remoteMessage.data)
+        }
+    }
+
+    fun getValue(data: Map<String?, String?>, key: String?): String? {
+        return try {
+            if (data.containsKey(key)) data[key] else getString(R.string.app_name)
+        } catch (ex: Exception) {
+            ex.printStackTrace()
+            getString(R.string.app_name)
+        }
+    }
+
+    override fun onNewToken(token: String) {}
+    private fun sendNotification(messageBody: Map<String?, String?>) {
+        var message = ""
+        var mType = ""
+        var groupid = ""
+        var senderid = ""
+        var receiverid = ""
+        val `object` = JSONObject(messageBody)
+        try {
+            Log.d(TAG, "sendNotification: notificationdata" + `object`.getString("message"))
+
+            message = `object`.getString("message")
+            mType = `object`.getString("type")  /// message_group_type, message_individual_type
+            receiverid = `object`.getString("receiverid")  /// message_group_type, message_individual_type
+
+            groupid = `object`.getString("groupid")
+            senderid = `object`.getString(ConstantsData.chatSenderId)
+            Log.i("TAG4", "firebase 1: group_id${`object`.getString(ConstantsData.chatGroupId)}")
+            Log.i("TAG4", "firebase 1 bundle: group_id${"groupid"}")
+
+        /// who has send message
+        } catch (e: JSONException) {
+            e.printStackTrace()
+        }
+        val bundle = Bundle()
+       // bundle.putString("group_id", groupid)
+//        bundle.putString(ConstantsData.spaceChatId, senderid)
+
+        if(mType == "single"){
+            bundle.putString("type", mType)
+            bundle.putString("receiver_id", receiverid)
+            bundle.putString("group_id", groupid)
+        }else{
+            bundle.putString("type", mType)
+            bundle.putString("receiver_id", receiverid)
+            bundle.putString("group_id", receiverid)
+        }
+
+        Log.i("TAG4", "firebase: group_id$groupid")
+        Log.i("TAG4", "firebase bundle: group_id${bundle.getString("group_id")}")
+
+        var pendingIntent: PendingIntent? =null;
+
+        if (mType.equals(ConstantsData.message_single_type))
+        {
+            pendingIntent = NavDeepLinkBuilder(this)
+                .setComponentName(MainActivity::class.java)
+                .setGraph(R.navigation.nav_graph)
+                .setDestination(R.id.singleLiveChatFragment)
+                .setArguments(bundle)
+                .createPendingIntent()
+        }else{
+            pendingIntent = NavDeepLinkBuilder(this)
+                .setComponentName(MainActivity::class.java)
+                .setGraph(R.navigation.nav_graph)
+                .setDestination(R.id.liveGroupChatFragment)
+                .setArguments(bundle)
+                .createPendingIntent()
+        }
+
+
+        val channelId = "ChatApp"
+        val audioAttributes = AudioAttributes.Builder()
+            .setContentType(AudioAttributes.CONTENT_TYPE_SONIFICATION)
+            .setUsage(AudioAttributes.USAGE_ALARM)
+            .build()
+        val soundUri = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION)
+        val builder = NotificationCompat.Builder(this, channelId)
+            .setSmallIcon(R.mipmap.ic_launcher)
+            .setContentTitle("ChatApp New Message")
+            .setBadgeIconType(NotificationCompat.BADGE_ICON_SMALL)
+            .setDefaults(Notification.DEFAULT_SOUND)
+            .setContentText(message).setAutoCancel(true).setContentIntent(pendingIntent)
+            .setOnlyAlertOnce(true)
+
+        val manager = getSystemService(NOTIFICATION_SERVICE) as NotificationManager
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
+            val channel = NotificationChannel(
+                channelId,
+                "Default channel",
+                NotificationManager.IMPORTANCE_DEFAULT
+            )
+            channel.setShowBadge(true)
+            channel.setSound(soundUri, audioAttributes)
+            channel.lockscreenVisibility = Notification.VISIBILITY_PUBLIC
+            manager.createNotificationChannel(channel)
+        }
+        manager.notify(0, builder.build())
+    }
+
+    companion object {
+        private const val TAG = "MyFirebaseMsgService"
+    }
+}
\ No newline at end of file
Index: gradlew
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gradlew b/gradlew
new file mode 100644
--- /dev/null	(date 1662127120000)
+++ b/gradlew	(date 1662127120000)
@@ -0,0 +1,185 @@
+#!/usr/bin/env sh
+
+#
+# Copyright 2015 the original author or authors.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#      https://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+
+##############################################################################
+##
+##  Gradle start up script for UN*X
+##
+##############################################################################
+
+# Attempt to set APP_HOME
+# Resolve links: $0 may be a link
+PRG="$0"
+# Need this for relative symlinks.
+while [ -h "$PRG" ] ; do
+    ls=`ls -ld "$PRG"`
+    link=`expr "$ls" : '.*-> \(.*\)$'`
+    if expr "$link" : '/.*' > /dev/null; then
+        PRG="$link"
+    else
+        PRG=`dirname "$PRG"`"/$link"
+    fi
+done
+SAVED="`pwd`"
+cd "`dirname \"$PRG\"`/" >/dev/null
+APP_HOME="`pwd -P`"
+cd "$SAVED" >/dev/null
+
+APP_NAME="Gradle"
+APP_BASE_NAME=`basename "$0"`
+
+# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'
+
+# Use the maximum available, or set MAX_FD != -1 to use that value.
+MAX_FD="maximum"
+
+warn () {
+    echo "$*"
+}
+
+die () {
+    echo
+    echo "$*"
+    echo
+    exit 1
+}
+
+# OS specific support (must be 'true' or 'false').
+cygwin=false
+msys=false
+darwin=false
+nonstop=false
+case "`uname`" in
+  CYGWIN* )
+    cygwin=true
+    ;;
+  Darwin* )
+    darwin=true
+    ;;
+  MINGW* )
+    msys=true
+    ;;
+  NONSTOP* )
+    nonstop=true
+    ;;
+esac
+
+CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
+
+
+# Determine the Java command to use to start the JVM.
+if [ -n "$JAVA_HOME" ] ; then
+    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
+        # IBM's JDK on AIX uses strange locations for the executables
+        JAVACMD="$JAVA_HOME/jre/sh/java"
+    else
+        JAVACMD="$JAVA_HOME/bin/java"
+    fi
+    if [ ! -x "$JAVACMD" ] ; then
+        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+    fi
+else
+    JAVACMD="java"
+    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+fi
+
+# Increase the maximum file descriptors if we can.
+if [ "$cygwin" = "false" -a "$darwin" = "false" -a "$nonstop" = "false" ] ; then
+    MAX_FD_LIMIT=`ulimit -H -n`
+    if [ $? -eq 0 ] ; then
+        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
+            MAX_FD="$MAX_FD_LIMIT"
+        fi
+        ulimit -n $MAX_FD
+        if [ $? -ne 0 ] ; then
+            warn "Could not set maximum file descriptor limit: $MAX_FD"
+        fi
+    else
+        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
+    fi
+fi
+
+# For Darwin, add options to specify how the application appears in the dock
+if $darwin; then
+    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
+fi
+
+# For Cygwin or MSYS, switch paths to Windows format before running java
+if [ "$cygwin" = "true" -o "$msys" = "true" ] ; then
+    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
+    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
+
+    JAVACMD=`cygpath --unix "$JAVACMD"`
+
+    # We build the pattern for arguments to be converted via cygpath
+    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
+    SEP=""
+    for dir in $ROOTDIRSRAW ; do
+        ROOTDIRS="$ROOTDIRS$SEP$dir"
+        SEP="|"
+    done
+    OURCYGPATTERN="(^($ROOTDIRS))"
+    # Add a user-defined pattern to the cygpath arguments
+    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
+        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
+    fi
+    # Now convert the arguments - kludge to limit ourselves to /bin/sh
+    i=0
+    for arg in "$@" ; do
+        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
+        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option
+
+        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
+            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
+        else
+            eval `echo args$i`="\"$arg\""
+        fi
+        i=`expr $i + 1`
+    done
+    case $i in
+        0) set -- ;;
+        1) set -- "$args0" ;;
+        2) set -- "$args0" "$args1" ;;
+        3) set -- "$args0" "$args1" "$args2" ;;
+        4) set -- "$args0" "$args1" "$args2" "$args3" ;;
+        5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
+        6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
+        7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
+        8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
+        9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
+    esac
+fi
+
+# Escape application args
+save () {
+    for i do printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/" ; done
+    echo " "
+}
+APP_ARGS=`save "$@"`
+
+# Collect all arguments for the java command, following the shell quoting and substitution rules
+eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS "\"-Dorg.gradle.appname=$APP_BASE_NAME\"" -classpath "\"$CLASSPATH\"" org.gradle.wrapper.GradleWrapperMain "$APP_ARGS"
+
+exec "$JAVACMD" "$@"
Index: app/src/main/java/com/trimad/ichat/firestoragecontroller/FireStorageAddresses.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/trimad/ichat/firestoragecontroller/FireStorageAddresses.kt b/app/src/main/java/com/trimad/ichat/firestoragecontroller/FireStorageAddresses.kt
new file mode 100644
--- /dev/null	(date 1663689048000)
+++ b/app/src/main/java/com/trimad/ichat/firestoragecontroller/FireStorageAddresses.kt	(date 1663689048000)
@@ -0,0 +1,9 @@
+package com.trimad.ichat.firestoragecontroller
+
+import com.google.firebase.storage.StorageReference
+import com.google.firebase.storage.FirebaseStorage
+
+object FireStorageAddresses {
+    val groupStorage: StorageReference
+        get() = FirebaseStorage.getInstance().getReference("GroupImages")
+}
\ No newline at end of file
Index: gradle.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/gradle.properties b/gradle.properties
new file mode 100644
--- /dev/null	(date 1662127120000)
+++ b/gradle.properties	(date 1662127120000)
@@ -0,0 +1,25 @@
+# Project-wide Gradle settings.
+# IDE (e.g. Android Studio) users:
+# Gradle settings configured through the IDE *will override*
+# any settings specified in this file.
+# For more details on how to configure your build environment visit
+# http://www.gradle.org/docs/current/userguide/build_environment.html
+# Specifies the JVM arguments used for the daemon process.
+# The setting is particularly useful for tweaking memory settings.
+org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8
+# When configured, Gradle will run in incubating parallel mode.
+# This option should only be used with decoupled projects. More details, visit
+# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects
+# org.gradle.parallel=true
+# AndroidX package structure to make it clearer which packages are bundled with the
+# Android operating system, and which are packaged with your app"s APK
+# https://developer.android.com/topic/libraries/support-library/androidx-rn
+android.useAndroidX=true
+# Kotlin code style for this project: "official" or "obsolete":
+kotlin.code.style=official
+# Enables namespacing of each library's R class so that its R class includes only the
+# resources declared in the library itself and none from the library's dependencies,
+# thereby reducing the size of the R class for that library
+android.nonTransitiveRClass=true
+
+android.enableJetifier=true
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
--- /dev/null	(date 1669815426755)
+++ b/.idea/misc.xml	(date 1669815426755)
@@ -0,0 +1,39 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="DesignSurface">
+    <option name="filePathToZoomLevelMap">
+      <map>
+        <entry key="..\:/CodeCoyAndroidProjectsAli/ChatApp-master/app/src/main/res/drawable/ic_send.xml" value="0.176" />
+        <entry key="..\:/CodeCoyAndroidProjectsAli/ChatApp-master/app/src/main/res/layout/activity_main.xml" value="0.2234375" />
+        <entry key="..\:/CodeCoyAndroidProjectsAli/ChatApp-master/app/src/main/res/layout/fragment_add_participents.xml" value="0.2234375" />
+        <entry key="..\:/CodeCoyAndroidProjectsAli/ChatApp-master/app/src/main/res/layout/fragment_chat_home.xml" value="0.2234375" />
+        <entry key="..\:/CodeCoyAndroidProjectsAli/ChatApp-master/app/src/main/res/layout/fragment_details_new_group.xml" value="0.2234375" />
+        <entry key="..\:/CodeCoyAndroidProjectsAli/ChatApp-master/app/src/main/res/layout/fragment_group_details.xml" value="0.2234375" />
+        <entry key="..\:/CodeCoyAndroidProjectsAli/ChatApp-master/app/src/main/res/layout/fragment_groups.xml" value="0.2234375" />
+        <entry key="..\:/CodeCoyAndroidProjectsAli/ChatApp-master/app/src/main/res/layout/fragment_home.xml" value="0.2234375" />
+        <entry key="..\:/CodeCoyAndroidProjectsAli/ChatApp-master/app/src/main/res/layout/fragment_live_group_chat.xml" value="0.2234375" />
+        <entry key="..\:/CodeCoyAndroidProjectsAli/ChatApp-master/app/src/main/res/layout/fragment_login.xml" value="0.264" />
+        <entry key="..\:/CodeCoyAndroidProjectsAli/ChatApp-master/app/src/main/res/layout/fragment_new_group.xml" value="0.2234375" />
+        <entry key="..\:/CodeCoyAndroidProjectsAli/ChatApp-master/app/src/main/res/layout/fragment_organization.xml" value="0.2234375" />
+        <entry key="..\:/CodeCoyAndroidProjectsAli/ChatApp-master/app/src/main/res/layout/fragment_profile.xml" value="0.2234375" />
+        <entry key="..\:/CodeCoyAndroidProjectsAli/ChatApp-master/app/src/main/res/layout/fragment_single_live_chat.xml" value="0.2234375" />
+        <entry key="..\:/CodeCoyAndroidProjectsAli/ChatApp-master/app/src/main/res/layout/fragment_subscription_status.xml" value="0.264" />
+        <entry key="..\:/CodeCoyAndroidProjectsAli/ChatApp-master/app/src/main/res/layout/fragment_user_profile.xml" value="0.2234375" />
+        <entry key="..\:/CodeCoyAndroidProjectsAli/ChatApp-master/app/src/main/res/layout/friend_message_item_view.xml" value="0.2234375" />
+        <entry key="..\:/CodeCoyAndroidProjectsAli/ChatApp-master/app/src/main/res/layout/info_message_item_layout.xml" value="0.2234375" />
+        <entry key="..\:/CodeCoyAndroidProjectsAli/ChatApp-master/app/src/main/res/layout/particiepents_vertial_itemview.xml" value="0.2234375" />
+        <entry key="..\:/CodeCoyAndroidProjectsAli/ChatApp-master/app/src/main/res/layout/participants_chats.xml" value="0.2234375" />
+        <entry key="..\:/CodeCoyAndroidProjectsAli/ChatApp-master/app/src/main/res/layout/participent_grid_itemview.xml" value="0.2234375" />
+        <entry key="..\:/CodeCoyAndroidProjectsAli/ChatApp-master/app/src/main/res/layout/selected_participent_itemview.xml" value="0.2234375" />
+        <entry key="..\:/CodeCoyAndroidProjectsAli/ChatApp-master/app/src/main/res/layout/user_item_view.xml" value="0.2234375" />
+        <entry key="..\:/CodeCoyAndroidProjectsAli/ChatApp-master/app/src/main/res/layout/user_message_item_view.xml" value="0.2234375" />
+      </map>
+    </option>
+  </component>
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_11" default="true" project-jdk-name="Android Studio default JDK" project-jdk-type="JavaSDK">
+    <output url="file://$PROJECT_DIR$/build/classes" />
+  </component>
+  <component name="ProjectType">
+    <option name="id" value="Android" />
+  </component>
+</project>
\ No newline at end of file
Index: app/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/.gitignore b/app/.gitignore
new file mode 100644
--- /dev/null	(date 1662127120000)
+++ b/app/.gitignore	(date 1662127120000)
@@ -0,0 +1,1 @@
+/build
\ No newline at end of file
Index: gradlew.bat
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gradlew.bat b/gradlew.bat
new file mode 100644
--- /dev/null	(date 1662127120000)
+++ b/gradlew.bat	(date 1662127120000)
@@ -0,0 +1,89 @@
+@rem
+@rem Copyright 2015 the original author or authors.
+@rem
+@rem Licensed under the Apache License, Version 2.0 (the "License");
+@rem you may not use this file except in compliance with the License.
+@rem You may obtain a copy of the License at
+@rem
+@rem      https://www.apache.org/licenses/LICENSE-2.0
+@rem
+@rem Unless required by applicable law or agreed to in writing, software
+@rem distributed under the License is distributed on an "AS IS" BASIS,
+@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+@rem See the License for the specific language governing permissions and
+@rem limitations under the License.
+@rem
+
+@if "%DEBUG%" == "" @echo off
+@rem ##########################################################################
+@rem
+@rem  Gradle startup script for Windows
+@rem
+@rem ##########################################################################
+
+@rem Set local scope for the variables with windows NT shell
+if "%OS%"=="Windows_NT" setlocal
+
+set DIRNAME=%~dp0
+if "%DIRNAME%" == "" set DIRNAME=.
+set APP_BASE_NAME=%~n0
+set APP_HOME=%DIRNAME%
+
+@rem Resolve any "." and ".." in APP_HOME to make it shorter.
+for %%i in ("%APP_HOME%") do set APP_HOME=%%~fi
+
+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+set DEFAULT_JVM_OPTS="-Xmx64m" "-Xms64m"
+
+@rem Find java.exe
+if defined JAVA_HOME goto findJavaFromJavaHome
+
+set JAVA_EXE=java.exe
+%JAVA_EXE% -version >NUL 2>&1
+if "%ERRORLEVEL%" == "0" goto execute
+
+echo.
+echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:findJavaFromJavaHome
+set JAVA_HOME=%JAVA_HOME:"=%
+set JAVA_EXE=%JAVA_HOME%/bin/java.exe
+
+if exist "%JAVA_EXE%" goto execute
+
+echo.
+echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:execute
+@rem Setup the command line
+
+set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
+
+
+@rem Execute Gradle
+"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %*
+
+:end
+@rem End local scope for the variables with windows NT shell
+if "%ERRORLEVEL%"=="0" goto mainEnd
+
+:fail
+rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
+rem the _cmd.exe /c_ return code!
+if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
+exit /b 1
+
+:mainEnd
+if "%OS%"=="Windows_NT" endlocal
+
+:omega
Index: .gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.gitignore b/.gitignore
new file mode 100644
--- /dev/null	(date 1674904186011)
+++ b/.gitignore	(date 1674904186011)
@@ -0,0 +1,16 @@
+*.iml
+.gradle
+/local.properties
+/.idea/caches
+/.idea/libraries
+/.idea/modules.xml
+/.idea/workspace.xml
+/.idea/navEditor.xml
+/.idea/assetWizardSettings.xml
+.DS_Store
+/build
+/captures
+.externalNativeBuild
+.cxx
+local.properties
+
Index: app/proguard-rules.pro
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/proguard-rules.pro b/app/proguard-rules.pro
new file mode 100644
--- /dev/null	(date 1662127120000)
+++ b/app/proguard-rules.pro	(date 1662127120000)
@@ -0,0 +1,21 @@
+# Add project specific ProGuard rules here.
+# You can control the set of applied configuration files using the
+# proguardFiles setting in build.gradle.
+#
+# For more details, see
+#   http://developer.android.com/guide/developing/tools/proguard.html
+
+# If your project uses WebView with JS, uncomment the following
+# and specify the fully qualified class name to the JavaScript interface
+# class:
+#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
+#   public *;
+#}
+
+# Uncomment this to preserve the line number information for
+# debugging stack traces.
+#-keepattributes SourceFile,LineNumberTable
+
+# If you keep the line number information, uncomment this to
+# hide the original source file name.
+#-renamesourcefileattribute SourceFile
\ No newline at end of file
Index: app/src/main/res/xml/backup_rules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/xml/backup_rules.xml b/app/src/main/res/xml/backup_rules.xml
new file mode 100644
--- /dev/null	(date 1662127120000)
+++ b/app/src/main/res/xml/backup_rules.xml	(date 1662127120000)
@@ -0,0 +1,13 @@
+<?xml version="1.0" encoding="utf-8"?><!--
+   Sample backup rules file; uncomment and customize as necessary.
+   See https://developer.android.com/guide/topics/data/autobackup
+   for details.
+   Note: This file is ignored for devices older that API 31
+   See https://developer.android.com/about/versions/12/backup-restore
+-->
+<full-backup-content>
+    <!--
+   <include domain="sharedpref" path="."/>
+   <exclude domain="sharedpref" path="device.xml"/>
+-->
+</full-backup-content>
\ No newline at end of file
Index: app/src/main/res/menu/home_menu.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/menu/home_menu.xml b/app/src/main/res/menu/home_menu.xml
new file mode 100644
--- /dev/null	(date 1662975580000)
+++ b/app/src/main/res/menu/home_menu.xml	(date 1662975580000)
@@ -0,0 +1,26 @@
+<?xml version="1.0" encoding="utf-8"?>
+<menu xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto">
+
+
+    <!--<item android:id="@+id/nav_search"
+
+        android:icon="@drawable/ic_baseline_search_24"
+        app:showAsAction="always"
+        android:title="@string/search"
+        app:actionViewClass="android.widget.SearchView"
+        />-->
+
+
+    <item android:id="@+id/nav_profile"
+        android:title="Profile"
+        app:iconTint="@color/white"
+        />
+
+    <item android:id="@+id/nav_signout"
+        android:title="@string/signout"
+        app:iconTint="@color/white"
+        />
+
+
+</menu>
\ No newline at end of file
Index: app/src/main/res/xml/data_extraction_rules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/xml/data_extraction_rules.xml b/app/src/main/res/xml/data_extraction_rules.xml
new file mode 100644
--- /dev/null	(date 1662127120000)
+++ b/app/src/main/res/xml/data_extraction_rules.xml	(date 1662127120000)
@@ -0,0 +1,19 @@
+<?xml version="1.0" encoding="utf-8"?><!--
+   Sample data extraction rules file; uncomment and customize as necessary.
+   See https://developer.android.com/about/versions/12/backup-restore#xml-changes
+   for details.
+-->
+<data-extraction-rules>
+    <cloud-backup>
+        <!-- TODO: Use <include> and <exclude> to control what is backed up.
+        <include .../>
+        <exclude .../>
+        -->
+    </cloud-backup>
+    <!--
+    <device-transfer>
+        <include .../>
+        <exclude .../>
+    </device-transfer>
+    -->
+</data-extraction-rules>
\ No newline at end of file
Index: app/src/main/res/drawable/ic_seen.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/drawable/ic_seen.xml b/app/src/main/res/drawable/ic_seen.xml
new file mode 100644
--- /dev/null	(date 1662958774000)
+++ b/app/src/main/res/drawable/ic_seen.xml	(date 1662958774000)
@@ -0,0 +1,11 @@
+<vector android:height="14.4dp" android:viewportHeight="6"
+    android:viewportWidth="10" android:width="24dp" xmlns:android="http://schemas.android.com/apk/res/android">
+    <path android:fillColor="#00000000"
+        android:pathData="M6.778,1L2.806,4.972L1,3.167"
+        android:strokeColor="#57A2FB" android:strokeLineCap="round"
+        android:strokeLineJoin="round" android:strokeWidth="0.5"/>
+    <path android:fillColor="#00000000"
+        android:pathData="M8.972,1L5,4.972"
+        android:strokeColor="#57A2FB" android:strokeLineCap="round"
+        android:strokeLineJoin="round" android:strokeWidth="0.5"/>
+</vector>
Index: app/src/main/res/values/colors.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/values/colors.xml b/app/src/main/res/values/colors.xml
new file mode 100644
--- /dev/null	(date 1662127120000)
+++ b/app/src/main/res/values/colors.xml	(date 1662127120000)
@@ -0,0 +1,15 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <color name="purple_200">#FFBB86FC</color>
+    <color name="purple_300">#73246EE9</color>
+    <color name="purple_500">#99246EE9</color>
+    <color name="purple_700">#246EE9</color>
+
+
+    <color name="teal_200">#FFFFFF</color>
+    <color name="teal_700">#FFFFFF</color>
+    <color name="black">#FF000000</color>
+    <color name="white">#FFFFFFFF</color>
+    <color name="line_color">#B3B3B3</color>
+    <color name="chat_bg_color">#F5F5F5</color>
+</resources>
\ No newline at end of file
Index: app/src/main/res/values/themes.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/values/themes.xml b/app/src/main/res/values/themes.xml
new file mode 100644
--- /dev/null	(date 1662127120000)
+++ b/app/src/main/res/values/themes.xml	(date 1662127120000)
@@ -0,0 +1,27 @@
+<resources xmlns:tools="http://schemas.android.com/tools">
+    <!-- Base application theme. -->
+    <style name="Theme.ChatApp" parent="Theme.MaterialComponents.Light.NoActionBar">
+        <!-- Primary brand color. -->
+        <item name="colorPrimary">@color/purple_500</item>
+        <item name="colorPrimaryVariant">@color/purple_700</item>
+        <item name="colorOnPrimary">@color/white</item>
+        <item name="colorAccent">#393939</item>
+        <!-- Secondary brand color. -->
+        <item name="windowNoTitle">true</item>
+        <item name="colorOnSecondary">@color/white</item>
+        <item name="android:statusBarColor" tools:targetApi="l">?attr/colorPrimaryVariant</item>
+        <!-- Customize your theme here. -->
+    </style>
+    <style name="MyTabLayoutTextAppearance" parent="TextAppearance.Design.Tab">
+        <item name="android:textSize">14sp</item>
+    </style>
+    <style name="Widget.MyApp.Toolbar.Solid" parent="Widget.AppCompat.ActionBar">
+        <item name="android:background">@color/purple_700</item>
+        <item name="android:elevation" tools:ignore="NewApi">4dp</item>
+
+    </style>
+
+    <style name="ThemeOverlay.MyApp.ActionBar" parent="ThemeOverlay.AppCompat.ActionBar">
+        <item name="android:textColorPrimary">@color/white</item>
+    </style>
+</resources>
\ No newline at end of file
Index: app/src/main/res/drawable/ic_baseline_arrow_back_24.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/drawable/ic_baseline_arrow_back_24.xml b/app/src/main/res/drawable/ic_baseline_arrow_back_24.xml
new file mode 100644
--- /dev/null	(date 1662127120000)
+++ b/app/src/main/res/drawable/ic_baseline_arrow_back_24.xml	(date 1662127120000)
@@ -0,0 +1,5 @@
+<vector android:autoMirrored="true" android:height="24dp"
+    android:tint="#FFFFFF" android:viewportHeight="24"
+    android:viewportWidth="24" android:width="24dp" xmlns:android="http://schemas.android.com/apk/res/android">
+    <path android:fillColor="@android:color/white" android:pathData="M20,11H7.83l5.59,-5.59L12,4l-8,8 8,8 1.41,-1.41L7.83,13H20v-2z"/>
+</vector>
Index: app/src/main/res/drawable/blue_circle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/drawable/blue_circle.xml b/app/src/main/res/drawable/blue_circle.xml
new file mode 100644
--- /dev/null	(date 1662127120000)
+++ b/app/src/main/res/drawable/blue_circle.xml	(date 1662127120000)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="utf-8"?>
+<shape xmlns:android="http://schemas.android.com/apk/res/android">
+
+    <solid android:color="@color/purple_700"/>
+    <corners android:radius="@dimen/_300sdp"/>
+
+</shape>
\ No newline at end of file
Index: app/src/main/res/drawable/ic_enable_notification.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/drawable/ic_enable_notification.xml b/app/src/main/res/drawable/ic_enable_notification.xml
new file mode 100644
--- /dev/null	(date 1662127120000)
+++ b/app/src/main/res/drawable/ic_enable_notification.xml	(date 1662127120000)
@@ -0,0 +1,10 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:tint="@color/black"
+    android:viewportWidth="24"
+    android:viewportHeight="24">
+    <path
+        android:fillColor="@android:color/white"
+        android:pathData="M12,22c1.1,0 2,-0.9 2,-2h-4c0,1.1 0.89,2 2,2zM18,16v-5c0,-3.07 -1.64,-5.64 -4.5,-6.32L13.5,4c0,-0.83 -0.67,-1.5 -1.5,-1.5s-1.5,0.67 -1.5,1.5v0.68C7.63,5.36 6,7.92 6,11v5l-2,2v1h16v-1l-2,-2z" />
+</vector>
Index: app/src/main/res/drawable/ic_add_person.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/drawable/ic_add_person.xml b/app/src/main/res/drawable/ic_add_person.xml
new file mode 100644
--- /dev/null	(date 1662127120000)
+++ b/app/src/main/res/drawable/ic_add_person.xml	(date 1662127120000)
@@ -0,0 +1,5 @@
+<vector android:height="24dp" android:tint="#FFFFFF"
+    android:viewportHeight="24" android:viewportWidth="24"
+    android:width="24dp" xmlns:android="http://schemas.android.com/apk/res/android">
+    <path android:fillColor="@android:color/white" android:pathData="M13,8c0,-2.21 -1.79,-4 -4,-4S5,5.79 5,8s1.79,4 4,4S13,10.21 13,8zM11,8c0,1.1 -0.9,2 -2,2S7,9.1 7,8s0.9,-2 2,-2S11,6.9 11,8zM1,18v2h16v-2c0,-2.66 -5.33,-4 -8,-4S1,15.34 1,18zM3,18c0.2,-0.71 3.3,-2 6,-2c2.69,0 5.78,1.28 6,2H3zM20,15v-3h3v-2h-3V7h-2v3h-3v2h3v3H20z"/>
+</vector>
Index: app/src/main/res/drawable/ic_launcher_background.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/drawable/ic_launcher_background.xml b/app/src/main/res/drawable/ic_launcher_background.xml
new file mode 100644
--- /dev/null	(date 1662127120000)
+++ b/app/src/main/res/drawable/ic_launcher_background.xml	(date 1662127120000)
@@ -0,0 +1,170 @@
+<?xml version="1.0" encoding="utf-8"?>
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="108dp"
+    android:height="108dp"
+    android:viewportWidth="108"
+    android:viewportHeight="108">
+    <path
+        android:fillColor="#3DDC84"
+        android:pathData="M0,0h108v108h-108z" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M9,0L9,108"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M19,0L19,108"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M29,0L29,108"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M39,0L39,108"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M49,0L49,108"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M59,0L59,108"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M69,0L69,108"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M79,0L79,108"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M89,0L89,108"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M99,0L99,108"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,9L108,9"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,19L108,19"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,29L108,29"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,39L108,39"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,49L108,49"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,59L108,59"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,69L108,69"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,79L108,79"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,89L108,89"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M0,99L108,99"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M19,29L89,29"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M19,39L89,39"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M19,49L89,49"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M19,59L89,59"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M19,69L89,69"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M19,79L89,79"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M29,19L29,89"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M39,19L39,89"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M49,19L49,89"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M59,19L59,89"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M69,19L69,89"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+    <path
+        android:fillColor="#00000000"
+        android:pathData="M79,19L79,89"
+        android:strokeWidth="0.8"
+        android:strokeColor="#33FFFFFF" />
+</vector>
Index: app/src/main/res/drawable/ic_disable_notification.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/drawable/ic_disable_notification.xml b/app/src/main/res/drawable/ic_disable_notification.xml
new file mode 100644
--- /dev/null	(date 1662127120000)
+++ b/app/src/main/res/drawable/ic_disable_notification.xml	(date 1662127120000)
@@ -0,0 +1,10 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:tint="@color/black"
+    android:viewportWidth="24"
+    android:viewportHeight="24">
+    <path
+        android:fillColor="@android:color/white"
+        android:pathData="M20,18.69L7.84,6.14 5.27,3.49 4,4.76l2.8,2.8v0.01c-0.52,0.99 -0.8,2.16 -0.8,3.42v5l-2,2v1h13.73l2,2L21,19.72l-1,-1.03zM12,22c1.11,0 2,-0.89 2,-2h-4c0,1.11 0.89,2 2,2zM18,14.68L18,11c0,-3.08 -1.64,-5.64 -4.5,-6.32L13.5,4c0,-0.83 -0.67,-1.5 -1.5,-1.5s-1.5,0.67 -1.5,1.5v0.68c-0.15,0.03 -0.29,0.08 -0.42,0.12 -0.1,0.03 -0.2,0.07 -0.3,0.11h-0.01c-0.01,0 -0.01,0 -0.02,0.01 -0.23,0.09 -0.46,0.2 -0.68,0.31 0,0 -0.01,0 -0.01,0.01L18,14.68z" />
+</vector>
Index: app/src/main/res/drawable/et_message.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/drawable/et_message.xml b/app/src/main/res/drawable/et_message.xml
new file mode 100644
--- /dev/null	(date 1662127120000)
+++ b/app/src/main/res/drawable/et_message.xml	(date 1662127120000)
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="utf-8"?>
+<shape xmlns:android="http://schemas.android.com/apk/res/android">
+
+    <corners
+        android:radius="@dimen/_100sdp"
+        />
+    <solid
+        android:color="@color/white"
+        />
+
+</shape>
\ No newline at end of file
Index: app/src/main/res/drawable/ic_baseline_search_24.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/drawable/ic_baseline_search_24.xml b/app/src/main/res/drawable/ic_baseline_search_24.xml
new file mode 100644
--- /dev/null	(date 1662127120000)
+++ b/app/src/main/res/drawable/ic_baseline_search_24.xml	(date 1662127120000)
@@ -0,0 +1,5 @@
+<vector android:height="24dp" android:tint="#FFFFFF"
+    android:viewportHeight="24" android:viewportWidth="24"
+    android:width="24dp" xmlns:android="http://schemas.android.com/apk/res/android">
+    <path android:fillColor="@android:color/white" android:pathData="M15.5,14h-0.79l-0.28,-0.27C15.41,12.59 16,11.11 16,9.5 16,5.91 13.09,3 9.5,3S3,5.91 3,9.5 5.91,16 9.5,16c1.61,0 3.09,-0.59 4.23,-1.57l0.27,0.28v0.79l5,4.99L20.49,19l-4.99,-5zM9.5,14C7.01,14 5,11.99 5,9.5S7.01,5 9.5,5 14,7.01 14,9.5 11.99,14 9.5,14z"/>
+</vector>
Index: app/src/main/res/drawable/ic_baseline_arrow_forward_24.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/drawable/ic_baseline_arrow_forward_24.xml b/app/src/main/res/drawable/ic_baseline_arrow_forward_24.xml
new file mode 100644
--- /dev/null	(date 1662127120000)
+++ b/app/src/main/res/drawable/ic_baseline_arrow_forward_24.xml	(date 1662127120000)
@@ -0,0 +1,5 @@
+<vector android:autoMirrored="true" android:height="24dp"
+    android:tint="#FFFFFF" android:viewportHeight="24"
+    android:viewportWidth="24" android:width="24dp" xmlns:android="http://schemas.android.com/apk/res/android">
+    <path android:fillColor="@android:color/white" android:pathData="M12,4l-1.41,1.41L16.17,11H4v2h12.17l-5.58,5.59L12,20l8,-8z"/>
+</vector>
Index: app/src/main/res/drawable/camera_back.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/drawable/camera_back.xml b/app/src/main/res/drawable/camera_back.xml
new file mode 100644
--- /dev/null	(date 1662127120000)
+++ b/app/src/main/res/drawable/camera_back.xml	(date 1662127120000)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<shape xmlns:android="http://schemas.android.com/apk/res/android">
+
+    <solid android:color="#ECECEC"/>
+    <corners android:radius="@dimen/_200sdp"/>
+</shape>
\ No newline at end of file
Index: app/src/main/res/drawable-v24/ic_launcher_foreground.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/drawable-v24/ic_launcher_foreground.xml b/app/src/main/res/drawable-v24/ic_launcher_foreground.xml
new file mode 100644
--- /dev/null	(date 1662127120000)
+++ b/app/src/main/res/drawable-v24/ic_launcher_foreground.xml	(date 1662127120000)
@@ -0,0 +1,30 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:aapt="http://schemas.android.com/aapt"
+    android:width="108dp"
+    android:height="108dp"
+    android:viewportWidth="108"
+    android:viewportHeight="108">
+    <path android:pathData="M31,63.928c0,0 6.4,-11 12.1,-13.1c7.2,-2.6 26,-1.4 26,-1.4l38.1,38.1L107,108.928l-32,-1L31,63.928z">
+        <aapt:attr name="android:fillColor">
+            <gradient
+                android:endX="85.84757"
+                android:endY="92.4963"
+                android:startX="42.9492"
+                android:startY="49.59793"
+                android:type="linear">
+                <item
+                    android:color="#44000000"
+                    android:offset="0.0" />
+                <item
+                    android:color="#00000000"
+                    android:offset="1.0" />
+            </gradient>
+        </aapt:attr>
+    </path>
+    <path
+        android:fillColor="#FFFFFF"
+        android:fillType="nonZero"
+        android:pathData="M65.3,45.828l3.8,-6.6c0.2,-0.4 0.1,-0.9 -0.3,-1.1c-0.4,-0.2 -0.9,-0.1 -1.1,0.3l-3.9,6.7c-6.3,-2.8 -13.4,-2.8 -19.7,0l-3.9,-6.7c-0.2,-0.4 -0.7,-0.5 -1.1,-0.3C38.8,38.328 38.7,38.828 38.9,39.228l3.8,6.6C36.2,49.428 31.7,56.028 31,63.928h46C76.3,56.028 71.8,49.428 65.3,45.828zM43.4,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2c-0.3,-0.7 -0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C45.3,56.528 44.5,57.328 43.4,57.328L43.4,57.328zM64.6,57.328c-0.8,0 -1.5,-0.5 -1.8,-1.2s-0.1,-1.5 0.4,-2.1c0.5,-0.5 1.4,-0.7 2.1,-0.4c0.7,0.3 1.2,1 1.2,1.8C66.5,56.528 65.6,57.328 64.6,57.328L64.6,57.328z"
+        android:strokeWidth="1"
+        android:strokeColor="#00000000" />
+</vector>
\ No newline at end of file
Index: app/src/main/res/drawable/ic_baseline_done_24.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/drawable/ic_baseline_done_24.xml b/app/src/main/res/drawable/ic_baseline_done_24.xml
new file mode 100644
--- /dev/null	(date 1662127120000)
+++ b/app/src/main/res/drawable/ic_baseline_done_24.xml	(date 1662127120000)
@@ -0,0 +1,5 @@
+<vector android:height="24dp" android:tint="#FFFFFF"
+    android:viewportHeight="24" android:viewportWidth="24"
+    android:width="24dp" xmlns:android="http://schemas.android.com/apk/res/android">
+    <path android:fillColor="@android:color/white" android:pathData="M9,16.2L4.8,12l-1.4,1.4L9,19 21,7l-1.4,-1.4L9,16.2z"/>
+</vector>
Index: app/src/main/res/drawable/ic_receive.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/drawable/ic_receive.xml b/app/src/main/res/drawable/ic_receive.xml
new file mode 100644
--- /dev/null	(date 1662958774000)
+++ b/app/src/main/res/drawable/ic_receive.xml	(date 1662958774000)
@@ -0,0 +1,11 @@
+<vector android:height="14.4dp" android:viewportHeight="6"
+    android:viewportWidth="10" android:width="24dp" xmlns:android="http://schemas.android.com/apk/res/android">
+    <path android:fillColor="#00000000"
+        android:pathData="M6.778,1L2.806,4.972L1,3.167"
+        android:strokeColor="#000000" android:strokeLineCap="round"
+        android:strokeLineJoin="round" android:strokeWidth="0.5"/>
+    <path android:fillColor="#00000000"
+        android:pathData="M8.972,1L5,4.972"
+        android:strokeColor="#000000" android:strokeLineCap="round"
+        android:strokeLineJoin="round" android:strokeWidth="0.5"/>
+</vector>
Index: .idea/.name
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.name b/.idea/.name
new file mode 100644
--- /dev/null	(date 1663908303492)
+++ b/.idea/.name	(date 1663908303492)
@@ -0,0 +1,1 @@
+ChatApp
\ No newline at end of file
Index: app/src/main/res/layout/friend_message_item_view.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/friend_message_item_view.xml b/app/src/main/res/layout/friend_message_item_view.xml
new file mode 100644
--- /dev/null	(date 1665469154290)
+++ b/app/src/main/res/layout/friend_message_item_view.xml	(date 1665469154290)
@@ -0,0 +1,97 @@
+<?xml version="1.0" encoding="utf-8"?>
+<layout>
+
+<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:padding="10dp">
+
+    <de.hdodenhof.circleimageview.CircleImageView
+        android:id="@+id/iv_user"
+        android:layout_width="@dimen/_25sdp"
+        android:layout_height="@dimen/_25sdp"
+
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toTopOf="parent" />
+    <androidx.cardview.widget.CardView
+        android:id="@+id/cv"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        app:cardCornerRadius="@dimen/_5sdp"
+        app:cardBackgroundColor="#F1F1F1"
+
+        android:layout_marginStart="@dimen/_3sdp"
+        android:layout_marginTop="@dimen/_3sdp"
+        app:layout_constraintStart_toEndOf="@+id/iv_user"
+        app:layout_constraintTop_toTopOf="@+id/iv_user"
+        >
+        <androidx.constraintlayout.widget.ConstraintLayout
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:padding="@dimen/_5sdp"
+            >
+
+
+        <TextView
+            android:id="@+id/tv_name"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:maxLines="1"
+            android:textColor="#FF0000"
+            android:text="ali ahmad"
+            android:visibility="gone"
+            app:layout_constraintTop_toTopOf="parent"
+            app:layout_constraintStart_toStartOf="parent"/>
+
+
+
+        <com.hendraanggrian.appcompat.widget.SocialTextView
+            android:id="@+id/tv_msg"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="hhxahsahsha"
+            android:padding="@dimen/_3sdp"
+            android:textColor="@color/black"
+            android:textSize="@dimen/_10ssp"
+            android:maxWidth="@dimen/_150sdp"
+            android:textIsSelectable="true"
+            android:linksClickable="true"
+            app:mentionColor="@color/purple_700"
+            android:autoLink="all"
+            app:socialFlags="mention"
+            app:layout_constraintTop_toBottomOf="@id/tv_name"
+            app:layout_constraintStart_toStartOf="parent"
+            />
+
+
+
+            <TextView
+                android:id="@+id/tv_time"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                app:layout_constraintTop_toBottomOf="@id/tv_msg"
+                app:layout_constraintEnd_toEndOf="parent"
+                android:layout_marginEnd="@dimen/_2sdp"
+                android:text="12:04"/>
+
+
+
+
+        </androidx.constraintlayout.widget.ConstraintLayout>
+    </androidx.cardview.widget.CardView>
+
+    <TextView
+        android:id="@+id/tv_date"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        app:layout_constraintTop_toBottomOf="@id/cv"
+        app:layout_constraintEnd_toEndOf="@id/cv"
+        android:layout_marginEnd="@dimen/_2sdp"
+        android:textSize="10sp"
+        android:layout_marginTop="3dp"
+        android:text="12:04"/>
+
+</androidx.constraintlayout.widget.ConstraintLayout>
+</layout>
Index: app/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/AndroidManifest.xml b/app/src/main/AndroidManifest.xml
new file mode 100644
--- /dev/null	(date 1663689046000)
+++ b/app/src/main/AndroidManifest.xml	(date 1663689046000)
@@ -0,0 +1,39 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    package="com.trimad.ichat">
+
+    <uses-permission android:name="android.permission.INTERNET"/>
+    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
+    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
+
+    <application
+        android:name=".singlton.ApplicationClass"
+        android:allowBackup="true"
+        android:dataExtractionRules="@xml/data_extraction_rules"
+        android:fullBackupContent="@xml/backup_rules"
+        android:icon="@mipmap/ic_launcher"
+        android:label="@string/app_name"
+        android:roundIcon="@mipmap/ic_launcher_round"
+        android:supportsRtl="true"
+        android:theme="@style/Theme.ChatApp"
+        tools:targetApi="31">
+        <activity
+            android:name=".ui.activities.MainActivity"
+            android:exported="true">
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN" />
+
+                <category android:name="android.intent.category.LAUNCHER" />
+            </intent-filter>
+        </activity>
+        <service
+            android:name=".notification.MyFirebaseMessagingService"
+            android:exported="true">
+            <intent-filter>
+                <action android:name="com.google.firebase.MESSAGING_EVENT" />
+            </intent-filter>
+        </service>
+    </application>
+
+</manifest>
\ No newline at end of file
Index: app/src/main/java/com/trimad/ichat/ui/fragments/LiveGroupChatFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/trimad/ichat/ui/fragments/LiveGroupChatFragment.kt b/app/src/main/java/com/trimad/ichat/ui/fragments/LiveGroupChatFragment.kt
new file mode 100644
--- /dev/null	(date 1665467222424)
+++ b/app/src/main/java/com/trimad/ichat/ui/fragments/LiveGroupChatFragment.kt	(date 1665467222424)
@@ -0,0 +1,494 @@
+package com.trimad.ichat.ui.fragments
+
+import android.content.Context
+import android.os.Bundle
+import android.util.Log
+import android.view.LayoutInflater
+import android.view.View
+import android.view.View.OnLayoutChangeListener
+import android.view.ViewGroup
+import android.widget.Toast
+import androidx.fragment.app.Fragment
+import androidx.navigation.fragment.findNavController
+import androidx.recyclerview.widget.LinearLayoutManager
+import androidx.recyclerview.widget.RecyclerView
+import com.android.volley.AuthFailureError
+import com.android.volley.Response
+import com.android.volley.toolbox.JsonObjectRequest
+import com.bumptech.glide.Glide
+import com.trimad.ichat.R
+import com.trimad.ichat.constants.ConstantsData
+import com.trimad.ichat.constants.ConstantsData.Companion.FIREBASE_NOTIFICATION_CONTENT_TYPE
+import com.trimad.ichat.constants.ConstantsData.Companion.FIREBASE_NOTIFICATION_SERVER_KEY
+import com.trimad.ichat.constants.ConstantsData.Companion.FIREBASE_NOTIFICATION_URL
+import com.trimad.ichat.databasecontroller.Repoistory
+import com.trimad.ichat.databinding.FragmentLiveGroupChatBinding
+import com.trimad.ichat.listeners.OnGetChatMessages
+import com.trimad.ichat.listeners.OnGetGroupDataListener
+import com.trimad.ichat.listeners.OnGetUserDataListener
+import com.trimad.ichat.models.*
+import com.trimad.ichat.singlton.ApplicationClass
+import com.trimad.ichat.singlton.MySingleton
+import com.trimad.ichat.ui.activities.MainActivity
+import com.trimad.ichat.ui.adapters.ChatGroupMessageAdapter
+import com.trimad.ichat.utils.MyApp
+import com.trimad.ichat.utils.Utils
+import com.google.firebase.Timestamp
+import com.google.firebase.auth.FirebaseAuth
+import com.google.firebase.firestore.FirebaseFirestore
+import com.google.firebase.firestore.SetOptions
+import com.kaopiz.kprogresshud.KProgressHUD
+import com.trimad.ichat.utils.SavedPreference
+import org.json.JSONException
+import org.json.JSONObject
+import java.util.*
+import kotlin.collections.ArrayList
+import kotlin.collections.HashMap
+
+class LiveGroupChatFragment : Fragment() {
+
+    private  val TAG = "LiveChatFragment"
+
+    private var mBinding:FragmentLiveGroupChatBinding?=null
+    private val binding get() = mBinding!!
+
+    private var mGroupId:String?=null
+    private var mType:String?=null
+
+    private var mGroupModel:GroupModel?=null
+   // private var current_userModel: UserModel? = null
+
+    private var progressHUD: KProgressHUD? = null
+    private var mAuth: FirebaseAuth? = null
+    private var chat_list:ArrayList<ChatMessage>?=null
+    private var mChatAdapter:ChatGroupMessageAdapter?=null
+    private var mDb:FirebaseFirestore?=null
+
+    private var users_list:ArrayList<UserModel>?=null
+
+    private lateinit var mContext:MainActivity
+
+
+    override fun onCreateView(
+        inflater: LayoutInflater, container: ViewGroup?,
+        savedInstanceState: Bundle?
+    ): View? {
+        // Inflate the layout for this fragment
+
+        mBinding=FragmentLiveGroupChatBinding.inflate(inflater,container,false)
+
+        mGroupId=arguments?.getString("group_id")
+        mType=arguments?.getString("type")
+        if(MyApp.userModel == null){
+            mAuth = FirebaseAuth.getInstance()
+            mContext.updatePreferences()
+           MyApp.userModel = SavedPreference.getUserData(mContext)
+        }
+
+
+
+        Log.i("TAG4", "onCreateView: group_id$mGroupId-->type$mType")
+        return mBinding!!.root
+    }
+
+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
+        super.onViewCreated(view, savedInstanceState)
+
+        mAuth = FirebaseAuth.getInstance()
+        mDb=FirebaseFirestore.getInstance()
+        chat_list= ArrayList()
+
+
+        setUpChatRecyclerView()
+
+     //   current_userModel = Utils.getUserProfile2(requireContext())
+        progressHUD = Utils.getProgressDialog(mContext, getString(R.string.please_wait))
+
+        // get group details and after get group all participants list details
+        getGroupData()
+
+        setListeners()
+    }
+
+    private fun setUpChatRecyclerView() {
+
+        mChatAdapter = ChatGroupMessageAdapter( requireContext(), mAuth?.uid.toString())
+        val linearLayoutManager = LinearLayoutManager(context, RecyclerView.VERTICAL, false)
+        binding.chatmessageRecyclerView.layoutManager = linearLayoutManager
+        binding.chatmessageRecyclerView.setHasFixedSize(true)
+        binding.chatmessageRecyclerView.adapter = mChatAdapter
+
+//        binding.chatmessageRecyclerView.addOnLayoutChangeListener(
+//            OnLayoutChangeListener { v, left, top, right, bottom, oldLeft, oldTop, oldRight, oldBottom ->
+//                if (bottom < oldBottom) {
+//                    binding.chatmessageRecyclerView.postDelayed(Runnable {
+//                        if (chat_list!!.size > 0) {
+//                            binding.chatmessageRecyclerView.smoothScrollToPosition(
+//                                binding.chatmessageRecyclerView.adapter?.getItemCount()!! - 1
+//                            )
+//                        }
+//                    }, 100)
+//                }
+//            })
+    }
+
+    private fun getGroupData() {
+
+        users_list= ArrayList()
+        mGroupId?.let {
+            progressHUD?.show()
+            Repoistory.getSingleGroupDetail(mGroupId,
+                object : OnGetGroupDataListener {
+                    override fun onTaskSuccess(groupModel: GroupModel?) {
+                        progressHUD?.dismiss()
+                        mGroupModel = groupModel
+                        setDataOnViews()
+                        getUsersProfiles()
+
+
+                    }
+
+                    override fun onTaskError(message: String?) {
+                        progressHUD?.dismiss()
+                        Toast.makeText(requireContext(), message, Toast.LENGTH_SHORT).show()
+
+                    }
+
+                    override fun onTaskEmpty() {
+                        progressHUD?.dismiss()
+                        Toast.makeText(
+                            requireContext(),
+                            getString(R.string.no_data_found),
+                            Toast.LENGTH_SHORT
+                        ).show()
+                    }
+
+                })
+        }
+    }
+
+    private fun getGroupMessages() {
+        progressHUD?.show()
+        if(chat_list == null)
+            chat_list = ArrayList()
+
+        Log.i(TAG, "getGroupMessages: groupId:$mGroupId")
+        Repoistory.getChatMessages(groupId = mGroupId,
+            object :OnGetChatMessages{
+                override fun onTaskSuccess(chatMessageList: List<ChatMessage>)
+                {
+                   // chat_list?.clear()
+                    progressHUD?.dismiss()
+                    Log.i(TAG, "onTaskSuccess: chatMessageList:"+chatMessageList.size)
+                //    chat_list?.addAll(chatMessageList!!)
+                //    mChatAdapter?.notifyDataSetChanged()
+                    mChatAdapter?.submitList(chatMessageList)
+                    binding.chatmessageRecyclerView.postDelayed(Runnable {
+                            binding.chatmessageRecyclerView.scrollToPosition(
+                                binding.chatmessageRecyclerView.adapter?.getItemCount()!! - 1
+                            )
+                    }, 100)
+//
+//                    for (i in chatMessageList.indices)
+//                    {
+//                        val chatReadModel=ChatReadModel()
+//
+//                        chatReadModel.chatMessage=chatMessageList[i]
+//
+//                        for (j in users_list!!.indices)
+//                        {
+//                            if (chatMessageList[i].sender_id==users_list!![j].user_id)
+//                            {
+//                                chatReadModel.chat_sender_userModel=users_list!![j]
+//                                chat_list?.add(chatReadModel)
+//                                Log.i(TAG, "onTaskSuccess: chatMessageList chatModel:"+chat_list?.size +"-->image:"+users_list!![j].user_image)
+//                                break
+//                            }
+//                        }
+//                        mChatAdapter?.notifyDataSetChanged()
+//                    }
+                 //   Log.i(TAG, "onTaskSuccess: chatList:"+chat_list!!.size)
+
+                 //   binding.chatmessageRecyclerView.scrollToPosition(chatMessageList.size - 1)
+
+                }
+
+                override fun onTaskError(message: String?) {
+                    progressHUD?.dismiss()
+                    Log.i(TAG, "onTaskError: error:$message")
+                    Toast.makeText(mContext,message,Toast.LENGTH_SHORT).show()
+
+                }
+
+                override fun onTaskEmpty() {
+                    progressHUD?.dismiss()
+//                    chat_list?.clear()
+//                    mChatAdapter?.notifyDataSetChanged()
+
+//                    Toast.makeText(mContext,getString(R.string.no_chat_found),Toast.LENGTH_SHORT).show()
+
+                }
+            })
+    }
+
+    // get list of data for all participants whoes are include in group
+    private fun getUsersProfiles() {
+        Log.i(TAG, "getUsersProfiles: "+mGroupModel?.users_list!!.size)
+
+        var stringBuilder: StringBuilder =java.lang.StringBuilder()
+
+
+        for (i in mGroupModel?.users_list?.indices!!)
+        {
+            Repoistory.getSimpleUser(mGroupModel?.users_list!![i].user_id,
+                object :OnGetUserDataListener{
+                    override fun onTaskSuccess(userModel: UserModel?) {
+                        if (userModel != null)
+                        {
+                            users_list?.add(userModel)
+
+                            if (stringBuilder.isEmpty())
+                            {
+                                stringBuilder.append(userModel.user_name)
+                            }else{
+                                stringBuilder.append(" , "+userModel.user_name)
+                            }
+                            binding.statusTv.text=stringBuilder.toString()
+
+                            if(i==mGroupModel?.users_list!!.size-1)
+                            {
+                                getGroupMessages()
+                            }
+
+                        }
+                    }
+
+                    override fun onTaskError(message: String?) {
+                        Log.i(TAG, "onTaskEmpty: user error $message:"+mGroupModel?.users_list!![i].user_id)
+
+                    }
+
+                    override fun onTaskEmpty() {
+                        Log.i(
+                            TAG,
+                            "onTaskEmpty: user not found:" + mGroupModel?.users_list!![i].user_id
+                        )
+                    }
+
+                })
+
+        }
+
+    }
+
+    private fun setDataOnViews() {
+
+        if (isAdded)
+        {
+            Glide.with(requireContext())
+                .load(mGroupModel?.group_image)
+                .error(R.drawable.no_image)
+                .into((binding.receiverImageview))
+            binding.receiverName.text=mGroupModel?.group_name
+            binding.statusTv.text=""
+
+            var isUserExist:Boolean?=null
+            for (i in mGroupModel?.users_list?.indices!!)
+            {
+                if (mAuth?.uid == mGroupModel?.users_list!![i].user_id)
+                {
+                    isUserExist=true
+                    break
+                }
+            }
+            if (isUserExist==true)
+            {
+                binding.linearBottom.visibility=View.VISIBLE
+            }
+        }
+
+
+
+    }
+
+    private fun setListeners() {
+
+        binding.groupNameLayout.setOnClickListener {
+            val bundle=Bundle()
+            bundle.putString("group_id",mGroupId)
+            findNavController().navigate(R.id.action_liveChatFragment_to_groupDetailsFragment,bundle)
+        }
+
+        binding.arrowBackImgview.setOnClickListener {
+            findNavController().navigate(R.id.action_liveGroupChatFragment_to_homeFragment)
+        }
+
+        binding.checkmark.setOnClickListener {
+            if (mAuth?.currentUser!=null)
+            {
+                var message: String = binding.inputMessage.getText().toString().trim()
+                if (message.isNotEmpty())
+                {
+                    binding.inputMessage.setText("")
+                    val date = Date()
+                    val timestamp = Timestamp(date)
+                    message = message.replace(System.getProperty("line.separator").toRegex(), "")
+
+                    val msg_document= mDb?.
+                    collection(ConstantsData.chatMessage)?.
+                    document(mGroupId.toString())?.
+                    collection(ConstantsData.message)?.document()
+
+
+                    val chatInfoModel=ChatGroupInfoModel(
+                        chat_id = mGroupId,
+                        message = message,
+                        timestamp = timestamp,
+                        type = ConstantsData.message_group_type,
+                        user_name = mGroupModel?.group_name,
+                        group_img = mGroupModel?.group_image
+                    )
+
+                    mDb?.
+                    collection(ConstantsData.chatMessage)?.
+                    document(mGroupId.toString())?.set(chatInfoModel, SetOptions.merge())
+
+
+                    val chatMessage=ChatMessage()
+                    val receiver_list=ArrayList<String>()
+                    val msg_receivers: HashMap<String, String> =HashMap()
+
+                    for (i in mGroupModel?.users_list?.indices!!)
+                    {
+                        if (mGroupModel?.users_list!![i].user_id != mAuth?.uid)
+                        {
+                            receiver_list.add(mGroupModel?.users_list!![i].user_id!!)
+                            msg_receivers[mGroupModel?.users_list!![i].user_id!!] = "Sent"
+                        }
+                    }
+                    chatMessage.message_id=msg_document?.id
+                    chatMessage.message_=message
+
+                    chatMessage.group_id=mGroupId
+                    chatMessage.message_type=mType
+
+                    chatMessage.sender_id=mAuth?.uid
+                    chatMessage.sender_name=MyApp.userModel!!.user_name
+                    chatMessage.sender_image=MyApp.userModel!!.user_image
+                    // receiver_list
+                    chatMessage.receiver_list=receiver_list
+                    chatMessage.msg_receivers=msg_receivers
+
+                    chatMessage.timestamp=timestamp
+                    chatMessage.message_staus=ConstantsData.status_sent
+
+
+
+
+                    msg_document?.set(chatMessage)
+                        ?.addOnCompleteListener() {
+                            if (it.isSuccessful)
+                            {
+//                                binding.inputMessage.setText("")
+
+                                for (i in mGroupModel?.users_list?.indices!!)
+                                {
+                                    if (mGroupModel?.users_list!![i].isnotify==true)
+                                    {
+                                        if (mGroupModel?.users_list!![i].user_id != mAuth?.uid)
+                                        {
+                                            sendNofitfication(mGroupModel?.users_list!![i].user_id , mGroupId)
+                                        }
+                                    }
+                                }
+
+
+                            }else{
+                                Log.i(TAG, "setListeners: not successfull")
+                            }
+                        }
+
+                }else{
+                    Toast.makeText(requireContext(),getString(R.string.please_write_message),Toast.LENGTH_SHORT).show()
+                }
+            }else{
+                Toast.makeText(requireContext(),getString(R.string.user_not_login),Toast.LENGTH_SHORT).show()
+            }
+        }
+
+    }
+
+    private fun sendNofitfication(receiver_id: String?, groupId: String?) {
+
+        Log.i("TAG4", "sendNofitfication: receiver_id:"+receiver_id +   "groupid :$groupId")
+        var recieverModel=UserModel()
+        for (i in users_list?.indices!!)
+        {
+            if (receiver_id==users_list!![i].user_id)
+            {
+                recieverModel=users_list!![i]
+                break
+            }
+        }
+
+        val msg: String = "New Message from "+MyApp.userModel!!.user_name
+
+        val notification = JSONObject()
+        val notifcationBody = JSONObject()
+        try {
+            notification.put("title", getString(R.string.app_name))
+            notification.put("to", recieverModel.user_token)
+            notifcationBody.put("type", ConstantsData.message_group_type)
+            notifcationBody.put("message", msg)
+            notifcationBody.put("receiverid", groupId)
+            notifcationBody.put(
+                ConstantsData.chatGroupId,
+                this.mGroupId
+            )
+            notifcationBody.put(
+                ConstantsData.chatSenderId,
+                mAuth!!.uid
+            )
+
+            notification.put("data", notifcationBody)
+        } catch (e: JSONException) {
+            Log.d("notifi", "onCreate: " + e.message)
+        }
+
+
+        val jsonObjectRequest: JsonObjectRequest =
+            object : JsonObjectRequest(FIREBASE_NOTIFICATION_URL, notification,
+                Response.Listener { response ->
+                    Log.i(TAG, "onResponse: responseDataNotification\n$response")
+//                    saveNotificationData(recieverModel, msg, mUserModel, message)
+                },
+                Response.ErrorListener { error ->
+                    Log.i(
+                        TAG,
+                        """
+                      onErrorResponse: errorNotification
+                      ${error.localizedMessage}
+                      """.trimIndent()
+                    )
+                }) {
+                @Throws(AuthFailureError::class)
+                override fun getHeaders(): Map<String, String> {
+                    val params: MutableMap<String, String> = HashMap()
+                    params["Authorization"] = FIREBASE_NOTIFICATION_SERVER_KEY
+                    params["Content-Type"] = FIREBASE_NOTIFICATION_CONTENT_TYPE
+                    return params
+                }
+            }
+
+        MySingleton.getInstance(ApplicationClass.appContext!!)
+            ?.addToRequestQueue(jsonObjectRequest)
+
+
+    }
+
+    override fun onAttach(context: Context) {
+        super.onAttach(context)
+        mContext = context as MainActivity
+    }
+
+}
\ No newline at end of file
Index: app/src/main/java/com/trimad/ichat/singlton/MySingleton.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/trimad/ichat/singlton/MySingleton.kt b/app/src/main/java/com/trimad/ichat/singlton/MySingleton.kt
new file mode 100644
--- /dev/null	(date 1663689046000)
+++ b/app/src/main/java/com/trimad/ichat/singlton/MySingleton.kt	(date 1663689046000)
@@ -0,0 +1,35 @@
+package com.trimad.ichat.singlton
+
+import android.content.Context
+import com.android.volley.Request
+import com.android.volley.RequestQueue
+import com.android.volley.toolbox.Volley
+
+class MySingleton private constructor(private var ctx: Context) {
+    private var requestQueue: RequestQueue?
+    private fun getRequestQueue(): RequestQueue {
+        if (requestQueue == null) {
+            requestQueue = Volley.newRequestQueue(ctx.getApplicationContext())
+        }
+        return requestQueue as RequestQueue
+    }
+
+    fun <T> addToRequestQueue(req: Request<T>?) {
+        getRequestQueue().add(req)
+    }
+
+    companion object {
+        private var instance: MySingleton? = null
+        @Synchronized
+        fun getInstance(context: Context): MySingleton? {
+            if (instance == null) {
+                instance = MySingleton(context)
+            }
+            return instance
+        }
+    }
+
+    init {
+        requestQueue = getRequestQueue()
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/trimad/ichat/utils/SavedPreference.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/trimad/ichat/utils/SavedPreference.kt b/app/src/main/java/com/trimad/ichat/utils/SavedPreference.kt
new file mode 100644
--- /dev/null	(date 1665134953420)
+++ b/app/src/main/java/com/trimad/ichat/utils/SavedPreference.kt	(date 1665134953420)
@@ -0,0 +1,114 @@
+package com.trimad.ichat.utils
+
+import android.content.Context
+import android.content.SharedPreferences
+import android.preference.PreferenceManager
+import com.google.gson.GsonBuilder
+import com.trimad.ichat.models.UserModel
+
+object SavedPreference {
+
+    const val EMAIL = "email"
+    const val USERID = "userid"
+    const val TOKEN = "device_token"
+    const val FIRSTNAME = "firstname"
+    const val LastNAME = "lastname"
+    const val DOB = "dob"
+    const val GENDER = "gender"
+    const val PHONE = "phone"
+    const val COUNTRY = "country"
+    const val TOTALTIME = "total_time"
+    const val TOTALPOINTS = "total_points"
+    const val EXCHANGEPOINTS = "exchange_points"
+    const val USERSUBSCRIPTION = "user_subscription"
+    const val USERRANK = "user_rank"
+    const val EARNINGPOINTS = "earning_point"
+    const val CHAMPIONNAME = "user_name"
+    const val CHAMPIONCOUNTRY = "ch_country"
+    const val CHAMPIONPOINTS = "points"
+    const val USERDATA = "ichatuser"
+
+
+    private fun getSharedPreference(ctx: Context?): SharedPreferences? {
+        return PreferenceManager.getDefaultSharedPreferences(ctx)
+    }
+
+    private fun editor(context: Context, key: String, value: String) {
+        getSharedPreference(
+            context
+        )?.edit()?.putString(key, value)?.apply()
+    }
+
+    private fun editor(context: Context, key: String, value: Int) {
+        getSharedPreference(
+            context
+        )?.edit()?.putInt(key, value)?.apply()
+    }
+
+
+    fun setUserID(context: Context, userid: Int) {
+        editor(
+            context = context,
+            key = USERID,
+            value = userid
+        )
+    }
+
+//    fun getUserID(context: Context): Int {
+//        val value:UserResponse.Data? = getUserData(context)
+//        return if (value == null) 0 else value.id!!
+//    }
+//    fun getUserName(context: Context): String? {
+//        val value:UserResponse.Data? = getUserData(context)
+//        return if (value == null) "User name" else "${value.firstname} ${value.lastname}"
+//    }
+//    fun getUserEmail(context: Context): String {
+//        val value:UserResponse.Data? = getUserData(context)
+//        return if (value == null) "" else "${value.email}"
+//    }
+
+    fun setToken(context: Context, token: String) {
+        editor(
+            context = context,
+            key = TOKEN,
+            value = token
+        )
+    }
+
+    fun getToken(context: Context) = getSharedPreference(
+        context
+    )?.getString(TOKEN, "")
+
+
+    fun setUserData(context: Context, data: UserModel) {
+        //Convert object to JSON String.
+        val jsonString = GsonBuilder().create().toJson(data)
+        //Save that String in SharedPreferences
+        getSharedPreference(context)?.edit()?.putString(USERDATA, jsonString)?.apply()
+    }
+
+    fun getUserData(context: Context): UserModel? {
+        //We read JSON String which was saved.
+        val value = getSharedPreference(context)?.getString(USERDATA, null)
+        return if (value == null) null else GsonBuilder().create().fromJson(value, UserModel::class.java)
+    }
+
+    fun clearUserData(context: Context) {
+        getSharedPreference(
+            context
+        )?.edit()?.remove(USERDATA)?.apply()
+    }
+
+
+    fun removeUserID(context: Context) {
+        getSharedPreference(
+            context
+        )?.edit()?.remove(USERID)?.apply()
+    }
+
+    fun clearPreferences(context: Context) {
+        getSharedPreference(
+            context
+        )?.edit()?.clear()?.apply()
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/trimad/ichat/ui/fragments/HomeFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/trimad/ichat/ui/fragments/HomeFragment.kt b/app/src/main/java/com/trimad/ichat/ui/fragments/HomeFragment.kt
new file mode 100644
--- /dev/null	(date 1663689048000)
+++ b/app/src/main/java/com/trimad/ichat/ui/fragments/HomeFragment.kt	(date 1663689048000)
@@ -0,0 +1,67 @@
+package com.trimad.ichat.ui.fragments
+
+import android.content.Context
+import android.os.Bundle
+import android.view.*
+import androidx.fragment.app.Fragment
+import com.trimad.ichat.R
+import com.trimad.ichat.databinding.FragmentHomeBinding
+import com.trimad.ichat.ui.activities.MainActivity
+import com.trimad.ichat.ui.adapters.ChildFragmentStateAdapter
+import com.google.android.material.tabs.TabLayoutMediator
+
+
+class HomeFragment : Fragment() {
+
+
+    private val TAG = "HomeFragment"
+    private lateinit var mBinding: FragmentHomeBinding
+
+    private lateinit var mContext:MainActivity
+
+
+    override fun onCreateView(
+        inflater: LayoutInflater, container: ViewGroup?,
+        savedInstanceState: Bundle?
+    ): View? {
+        // Inflate the layout for this fragment
+        mBinding = FragmentHomeBinding.inflate(inflater, container, false)
+
+        return mBinding.root
+    }
+
+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
+        super.onViewCreated(view, savedInstanceState)
+
+//        mContext.updateUserDB(FirebaseAuth.getInstance().currentUser!!.uid)
+//        mContext.getProfile(FirebaseAuth.getInstance().currentUser!!.uid)
+        setUpTapBar()
+
+    }
+    private fun setUpTapBar() {
+        // TabLayout
+        val tabLayout = mBinding.tabs
+        // ViewPager2
+        val viewPager = mBinding.viewpager
+        /*
+            🔥 Set Adapter for ViewPager inside this fragment using this Fragment,
+            more specifically childFragmentManager as param
+         */
+        viewPager.adapter = ChildFragmentStateAdapter(this)
+
+        // Bind tabs and viewpager
+        TabLayoutMediator(tabLayout, viewPager) { tab, position ->
+            when (position) {
+                0 -> tab.text = getString(R.string.chats)
+                1 -> tab.text = getString(R.string.groups)
+                2 -> tab.text = getString(R.string.organizations)
+
+            }
+        }.attach()
+    }
+
+    override fun onAttach(context: Context) {
+        super.onAttach(context)
+        mContext = context as MainActivity
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/trimad/ichat/ui/fragments/DetailsNewGroupFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/trimad/ichat/ui/fragments/DetailsNewGroupFragment.kt b/app/src/main/java/com/trimad/ichat/ui/fragments/DetailsNewGroupFragment.kt
new file mode 100644
--- /dev/null	(date 1663689046000)
+++ b/app/src/main/java/com/trimad/ichat/ui/fragments/DetailsNewGroupFragment.kt	(date 1663689046000)
@@ -0,0 +1,213 @@
+package com.trimad.ichat.ui.fragments
+
+import android.content.Context
+import android.net.Uri
+import android.os.Bundle
+import android.text.TextUtils
+import android.util.Log
+import android.view.LayoutInflater
+import android.view.View
+import android.view.ViewGroup
+import android.view.inputmethod.InputMethodManager
+import android.widget.Toast
+import androidx.fragment.app.Fragment
+import androidx.navigation.fragment.findNavController
+import androidx.recyclerview.widget.GridLayoutManager
+import com.trimad.ichat.R
+import com.trimad.ichat.R.string.participants
+import com.trimad.ichat.databasecontroller.DatabaseAddresses
+import com.trimad.ichat.databasecontroller.DatabaseUploader
+import com.trimad.ichat.databinding.FragmentDetailsNewGroupBinding
+import com.trimad.ichat.firestoragecontroller.FireStorageAddresses
+import com.trimad.ichat.firestoragecontroller.FireStorageUploader
+import com.trimad.ichat.listeners.OnFileUploadListener
+import com.trimad.ichat.listeners.OnUserDataSaveListener
+import com.trimad.ichat.models.GroupMember
+import com.trimad.ichat.models.GroupModel
+import com.trimad.ichat.models.UserModel
+import com.trimad.ichat.ui.adapters.ViewUsersSelectedAdapter
+import com.trimad.ichat.utils.Utils
+import com.google.common.reflect.TypeToken
+import com.google.firebase.auth.FirebaseAuth
+import com.google.firebase.storage.UploadTask
+import com.google.gson.Gson
+import com.kaopiz.kprogresshud.KProgressHUD
+import gun0912.tedimagepicker.builder.TedImagePicker
+import java.lang.reflect.Type
+
+
+class DetailsNewGroupFragment : Fragment() {
+
+    private val TAG = "AddNewGroupFragment"
+    private var mBinding: FragmentDetailsNewGroupBinding? = null
+    private val binding get() = mBinding!!
+    private var progressHUD: KProgressHUD? = null
+    private var mAuth: FirebaseAuth? = null
+   // private var userModel: UserModel? = null
+
+    private var users_list: ArrayList<UserModel>? = null
+
+    private var image_uri:Uri?=null
+    private lateinit var mGroupName:String
+    override fun onCreateView(
+        inflater: LayoutInflater, container: ViewGroup?,
+        savedInstanceState: Bundle?
+    ): View? {
+        // Inflate the layout for this fragment
+
+        mBinding = FragmentDetailsNewGroupBinding.inflate(inflater, container, false)
+
+        val user_list_string = arguments?.getString("user_list")
+        val gson = Gson()
+        val listOfUsersType: Type = object : TypeToken<List<UserModel?>?>() {}.getType()
+        users_list = gson.fromJson(user_list_string, listOfUsersType)
+        Log.i(TAG, "onCreateView: listOfUsers:" + users_list?.size)
+        return mBinding!!.root
+    }
+
+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
+        super.onViewCreated(view, savedInstanceState)
+
+        mAuth = FirebaseAuth.getInstance()
+    //    userModel = Utils.getUserProfile2(requireContext())
+        progressHUD = Utils.getProgressDialog(requireContext(), getString(R.string.please_wait))
+
+        setUpRecyclerView()
+
+        binding.participentsTv.text=getString(participants) +" "+users_list?.size
+
+        setListeners()
+
+
+    }
+
+    private fun setListeners() {
+        binding.arrowBackImgview.setOnClickListener {
+            findNavController().navigateUp()
+        }
+        binding.emojiImageview.setOnClickListener {
+            (requireActivity().getSystemService(Context.INPUT_METHOD_SERVICE) as InputMethodManager).toggleSoftInput(InputMethodManager.SHOW_FORCED, InputMethodManager.HIDE_IMPLICIT_ONLY);
+
+        }
+        binding.cameraImageview.setOnClickListener {
+            TedImagePicker.with(requireContext())
+                .start { uri ->image_uri= uri
+                    binding.userImageview.setImageURI(uri)
+                    binding.cameraImageview.visibility=View.GONE
+                    binding.userImageview.visibility=View.VISIBLE
+                }
+        }
+        binding.userImageview.setOnClickListener {
+            TedImagePicker.with(requireContext())
+                .start { uri ->image_uri= uri
+                    binding.userImageview.setImageURI(uri)
+                    binding.cameraImageview.visibility=View.GONE
+                    binding.userImageview.visibility=View.VISIBLE
+
+                }
+        }
+
+        binding.doneBtn.setOnClickListener {
+
+            mGroupName=binding.subjectTv.text.toString().trim()
+            if (!TextUtils.isEmpty(mGroupName))
+            {
+
+                if (image_uri!=null)
+                {
+                    // upload image
+                    progressHUD!!.show()
+
+                    FireStorageUploader.uploadFile(
+                        FireStorageAddresses.groupStorage,
+                        image_uri!!,
+                        object :OnFileUploadListener{
+                            override fun onFileUploaded(url: String?) {
+                                AddGroup(url.toString())
+                            }
+
+                            override fun onProgress(snapshot: UploadTask.TaskSnapshot?) {
+                                Log.i(TAG, "onProgress: progress")
+                            }
+
+                            override fun onFailure(e: String?) {
+                                progressHUD?.dismiss()
+                                Log.i(TAG, "onFailure: e"+e)
+                                Toast.makeText(requireContext(),e.toString(),Toast.LENGTH_SHORT).show()
+                            }
+
+                        }
+                    )
+
+                    
+                }else{
+                    /// add group data
+//                    progressHUD!!.show()
+//                    AddGroup("")
+
+                    Toast.makeText(requireContext(),"Select Group Image by Clicking Camera!",Toast.LENGTH_LONG).show()
+                }
+
+
+            }else{
+                Toast.makeText(requireContext(),getString(R.string.please_add_group_name),Toast.LENGTH_LONG).show()
+            }
+
+        }
+    }
+
+    private fun AddGroup(image_link: String) {
+
+        val groupModel=GroupModel()
+
+        val ref=DatabaseAddresses.getGroupsRefrence().document()
+        groupModel.group_id=ref.id
+        groupModel.group_image=image_link
+        groupModel.group_name=binding.subjectTv.text.toString().trim()
+
+        val group_user_list=ArrayList<GroupMember>()
+        val adminGroupMember= GroupMember()
+        adminGroupMember.user_id=mAuth?.uid
+        adminGroupMember.isAdmin=true
+        group_user_list.add(adminGroupMember)
+
+        for (i in users_list?.indices!!)
+        {
+            val groupMember:GroupMember= GroupMember()
+            groupMember.user_id= users_list!![i].user_id
+            groupMember.isAdmin=false
+            group_user_list.add(groupMember)
+        }
+
+        groupModel.users_list=group_user_list
+        Log.i(TAG, "AddGroup: user_list:"+ groupModel.users_list!!.size)
+
+        DatabaseUploader.saveGroup(groupModel,
+            object : OnUserDataSaveListener{
+                override fun onTaskSuccess() {
+                    progressHUD?.dismiss()
+                    Toast.makeText(requireContext(),getString(R.string.data_saved_successfully),Toast.LENGTH_SHORT).show()
+                    findNavController().navigate(R.id.action_detailsNewGroupFragment_to_homeFragment)
+                }
+                override fun onTaskFailure(message: String?) {
+                    progressHUD?.dismiss()
+                }
+            })
+
+
+    }
+
+    private fun setUpRecyclerView() {
+
+        var adapter= users_list?.let { ViewUsersSelectedAdapter(it,requireContext()) }
+        var layout_manager=GridLayoutManager(requireContext(),3)
+        binding.particpentsRecyclerviwe.layoutManager=layout_manager
+        binding.particpentsRecyclerviwe.adapter=adapter
+
+    }
+
+    override fun onDestroyView() {
+        super.onDestroyView()
+        mBinding = null;
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/trimad/ichat/models/HomeChatModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/trimad/ichat/models/HomeChatModel.kt b/app/src/main/java/com/trimad/ichat/models/HomeChatModel.kt
new file mode 100644
--- /dev/null	(date 1665395542148)
+++ b/app/src/main/java/com/trimad/ichat/models/HomeChatModel.kt	(date 1665395542148)
@@ -0,0 +1,22 @@
+package com.trimad.ichat.models
+
+import com.google.firebase.Timestamp;
+
+data class HomeChatModel (
+    val user_id: String? = null,
+    val doc_id: String? = null,
+    val user_name: String? = null,
+    val name1: String? = null,
+    val name2: String? = null,
+    val image1: String? = null,
+    val image2: String? = null,
+    val user_bio: String? = null,
+    val user_email: String? = null,
+    val user_image: String? = null,
+    val user_token: String? = null,
+    val online: Boolean? = null,
+    val user_active: Boolean? = null,
+    val last_seen: Timestamp? = null,
+    val organization_id:String?=null,
+    var msg_count:MutableList<ChatMessage> = arrayListOf()
+)
Index: app/src/main/java/com/trimad/ichat/utils/MyApp.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/trimad/ichat/utils/MyApp.kt b/app/src/main/java/com/trimad/ichat/utils/MyApp.kt
new file mode 100644
--- /dev/null	(date 1665392569830)
+++ b/app/src/main/java/com/trimad/ichat/utils/MyApp.kt	(date 1665392569830)
@@ -0,0 +1,22 @@
+package com.trimad.ichat.utils
+
+import android.app.Application
+import com.trimad.ichat.models.GroupModel
+import com.trimad.ichat.models.HomeChatModel
+import com.trimad.ichat.models.UserModel
+
+class MyApp {
+
+
+    companion object{
+        var userModel:UserModel? = null
+        var isCheckUserGroups = false
+        var isCheckUserChats = false
+        var group_list: ArrayList<GroupModel> = ArrayList<GroupModel>()
+        var myGroup_list: ArrayList<String> = ArrayList<String>()
+        var homeChatList: ArrayList<HomeChatModel> = ArrayList()
+    }
+
+
+
+}
\ No newline at end of file
Index: app/src/main/java/com/trimad/ichat/listeners/HomeChatSelectedListener.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/trimad/ichat/listeners/HomeChatSelectedListener.kt b/app/src/main/java/com/trimad/ichat/listeners/HomeChatSelectedListener.kt
new file mode 100644
--- /dev/null	(date 1665392569823)
+++ b/app/src/main/java/com/trimad/ichat/listeners/HomeChatSelectedListener.kt	(date 1665392569823)
@@ -0,0 +1,9 @@
+package com.trimad.ichat.listeners
+
+import com.trimad.ichat.models.HomeChatModel
+import com.trimad.ichat.models.UserModel
+import com.trimad.ichat.ui.adapters.ChatHomeAdapter
+
+interface HomeChatSelectedListener {
+    fun onChatSelect(userModel: HomeChatModel)
+}
\ No newline at end of file
Index: app/src/main/java/com/trimad/ichat/models/ChatMessage.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/trimad/ichat/models/ChatMessage.kt b/app/src/main/java/com/trimad/ichat/models/ChatMessage.kt
new file mode 100644
--- /dev/null	(date 1665402482052)
+++ b/app/src/main/java/com/trimad/ichat/models/ChatMessage.kt	(date 1665402482052)
@@ -0,0 +1,23 @@
+package com.trimad.ichat.models
+
+import com.google.firebase.Timestamp
+
+/**
+ * Created by Usman Liaqat on 24,August,2022
+ * CodeCoy,
+ * Lahore, Pakistan.
+ */
+data class ChatMessage(
+    var message_id: String? = null,
+    var message_: String? = null,
+    var group_id: String? = null, // group_id
+    var message_type: String? = null, // group or individual
+    var sender_id: String? = null, // sender_user
+    var receiver_list: ArrayList<String>? = null, // sender_user
+    var msg_receivers: MutableMap<String,String>? = null,
+    var timestamp: Timestamp? = null,
+    var message_staus: String? = null, // sent,delivered,read
+    var sender_name: String? = null, // sent,delivered,read
+    var sender_image: String? = null, // sent,delivered,read
+
+)
Index: app/src/main/java/com/trimad/ichat/ui/adapters/ChatHomeAdapter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/trimad/ichat/ui/adapters/ChatHomeAdapter.kt b/app/src/main/java/com/trimad/ichat/ui/adapters/ChatHomeAdapter.kt
new file mode 100644
--- /dev/null	(date 1665463699938)
+++ b/app/src/main/java/com/trimad/ichat/ui/adapters/ChatHomeAdapter.kt	(date 1665463699938)
@@ -0,0 +1,271 @@
+package com.trimad.ichat.ui.adapters
+
+import android.content.Context
+import android.util.Log
+import android.view.LayoutInflater
+import android.view.View
+import android.view.ViewGroup
+import androidx.recyclerview.widget.RecyclerView
+import com.bumptech.glide.Glide
+import com.trimad.ichat.R
+import com.trimad.ichat.databasecontroller.DatabaseAddresses
+import com.trimad.ichat.databasecontroller.Repoistory
+import com.trimad.ichat.databinding.ParticipantsChatsBinding
+import com.trimad.ichat.listeners.HomeChatSelectedListener
+import com.trimad.ichat.listeners.UnSeenMessageCount
+import com.trimad.ichat.models.UserModel
+import com.google.firebase.Timestamp
+import com.trimad.ichat.models.ChatMessage
+import com.trimad.ichat.models.HomeChatModel
+import com.trimad.ichat.utils.MyApp
+import java.text.ParseException
+import java.text.SimpleDateFormat
+import java.util.*
+import java.util.concurrent.TimeUnit
+
+
+/**
+ * Created by Ali Ahmad on 9,September,2022
+ * CodeCoy,
+ * Lahore, Pakistan.
+ */
+class ChatHomeAdapter(
+    private var mList: List<HomeChatModel>,
+    val context: Context,
+    val chatSelectListener: HomeChatSelectedListener,
+    val uid: String
+) : RecyclerView.Adapter<ChatHomeAdapter.ChatHomeViewHolder>() {
+
+    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ChatHomeViewHolder {
+        return ChatHomeViewHolder(
+            ParticipantsChatsBinding.inflate(
+                LayoutInflater.from(parent.context), parent, false
+            )
+        ) {
+
+            chatSelectListener.onChatSelect(mList[it])
+            mList[it].msg_count.clear()
+        }
+    }
+
+    override fun onBindViewHolder(holder: ChatHomeViewHolder, position: Int) {
+
+        Repoistory.getChatCount(
+            mList[position].doc_id.toString(),
+            mList[position].user_id.toString(),
+            mList[position].user_token.toString(),
+            uid,
+            position,
+            object : UnSeenMessageCount {
+                override fun onMessageCount(pos: Int,count: List<ChatMessage>) {
+                    if (count.isEmpty()) {
+                        holder.particiepentsVertialItemviewBinding.tvCount.visibility =
+                            View.INVISIBLE
+                        mList[pos].msg_count.clear()
+                    } else {
+                        //  holder.particiepentsVertialItemviewBinding.tvCount.text=mList[position].msg_count.toString()
+                        holder.particiepentsVertialItemviewBinding.tvCount.text = count.size.toString()
+                        holder.particiepentsVertialItemviewBinding.tvCount.visibility = View.VISIBLE
+                        mList[pos].msg_count.clear()
+                        mList[pos].msg_count.addAll(count)
+                      //  notifyItemChanged(pos)
+                    }
+                }
+
+            })
+
+
+
+
+        if (mList[position].msg_count.isEmpty()) {
+            holder.particiepentsVertialItemviewBinding.tvCount.visibility =
+                View.INVISIBLE
+        } else {
+            holder.particiepentsVertialItemviewBinding.tvCount.text =
+                mList[position].msg_count.size.toString()
+            holder.particiepentsVertialItemviewBinding.tvCount.visibility = View.VISIBLE
+        }
+
+        if (mList[position].user_token == "single") {
+            if (mList[position].name1 == null && mList[position].name2 == null) {
+                DatabaseAddresses.getSingleUserReference(mList[position].user_id)
+                    .get()
+                    .addOnSuccessListener { snapshot ->
+                        if (snapshot != null && snapshot.exists()) {
+                            val userModel: UserModel =
+                                snapshot.toObject(UserModel::class.java)!!
+                            Glide.with(context)
+                                .load(userModel.user_image)
+                                .error(R.drawable.no_image)
+                                .into((holder.particiepentsVertialItemviewBinding.userImageview))
+
+                            holder.particiepentsVertialItemviewBinding.usernameTv.text =
+                                userModel.user_name
+                        }
+
+                    }
+
+            } else {
+                if (mList[position].name1!!.isNotEmpty() && mList[position].name2!!.isNotEmpty()) {
+
+                    if (mList[position].name1 == MyApp.userModel!!.user_name) {
+                        Glide.with(context)
+                            .load(mList[position].image2)
+                            .error(R.drawable.no_image)
+                            .into((holder.particiepentsVertialItemviewBinding.userImageview))
+
+                        holder.particiepentsVertialItemviewBinding.usernameTv.text =
+                            mList[position].name2.toString()
+
+                    } else {
+
+                        Glide.with(context)
+                            .load(mList[position].image1)
+                            .error(R.drawable.no_image)
+                            .into((holder.particiepentsVertialItemviewBinding.userImageview))
+
+                        holder.particiepentsVertialItemviewBinding.usernameTv.text =
+                            mList[position].name1.toString()
+                    }
+
+                } else {
+                    DatabaseAddresses.getSingleUserReference(mList[position].user_id)
+                        .get()
+                        .addOnSuccessListener { snapshot ->
+                            if (snapshot != null && snapshot.exists()) {
+                                val userModel: UserModel =
+                                    snapshot.toObject(UserModel::class.java)!!
+                                Glide.with(context)
+                                    .load(userModel.user_image)
+                                    .error(R.drawable.no_image)
+                                    .into((holder.particiepentsVertialItemviewBinding.userImageview))
+
+                                holder.particiepentsVertialItemviewBinding.usernameTv.text =
+                                    userModel.user_name
+                            }
+
+                        }
+                }
+            }
+        } else {
+            Glide.with(context)
+                .load(mList[position].user_image)
+                .error(R.drawable.no_image)
+                .into((holder.particiepentsVertialItemviewBinding.userImageview))
+
+            holder.particiepentsVertialItemviewBinding.usernameTv.text = mList[position].user_name
+        }
+
+
+        holder.particiepentsVertialItemviewBinding.userBioTv.text = mList[position].user_bio
+        val timestamp: Timestamp? = mList[position].last_seen
+        holder.particiepentsVertialItemviewBinding.tvTime.text = getDate(timestamp!!)
+
+
+    }
+
+    override fun getItemCount(): Int {
+        return mList.size
+    }
+
+
+    fun updateItem() {
+
+    }
+
+    fun covertTimeToText(dataDate: String?): String? {
+        var convertTime: String? = null
+        val suffix = "ago"
+        try {
+            val dateFormat = SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.getDefault())
+            val pasTime = dateFormat.parse(dataDate)
+            val nowTime = Date()
+            val dateDiff = nowTime.time - pasTime.time
+            val second: Long = TimeUnit.MILLISECONDS.toSeconds(dateDiff)
+            val minute: Long = TimeUnit.MILLISECONDS.toMinutes(dateDiff)
+            val hour: Long = TimeUnit.MILLISECONDS.toHours(dateDiff)
+            val day: Long = TimeUnit.MILLISECONDS.toDays(dateDiff)
+            convertTime = if (second < 60) {
+                if (second == 1L) {
+                    "$second second $suffix"
+                } else {
+                    "$second seconds $suffix"
+                }
+            } else if (minute < 60) {
+                if (minute == 1L) {
+                    "$minute minute $suffix"
+                } else {
+                    "$minute minutes $suffix"
+                }
+            } else if (hour < 24) {
+                if (hour == 1L) {
+                    "$hour hour $suffix"
+                } else {
+                    "$hour hours $suffix"
+                }
+            } else if (day >= 7) {
+                if (day >= 365) {
+                    val tempYear = day / 365
+                    if (tempYear == 1L) {
+                        "$tempYear year $suffix"
+                    } else {
+                        "$tempYear years $suffix"
+                    }
+                } else if (day >= 30) {
+                    val tempMonth = day / 30
+                    if (tempMonth == 1L) {
+                        (day / 30).toString() + " month " + suffix
+                    } else {
+                        (day / 30).toString() + " months " + suffix
+                    }
+                } else {
+                    val tempWeek = day / 7
+                    if (tempWeek == 1L) {
+                        (day / 7).toString() + " week " + suffix
+                    } else {
+                        (day / 7).toString() + " weeks " + suffix
+                    }
+                }
+            } else {
+                if (day == 1L) {
+                    "$day day $suffix"
+                } else {
+                    "$day days $suffix"
+                }
+            }
+        } catch (e: ParseException) {
+            e.printStackTrace()
+            Log.e("TimeAgo", e.message + "")
+        }
+        return convertTime
+    }
+
+    private fun getDate(timestamp: Timestamp): String? {
+        val date: Date = timestamp.toDate()
+        val df =
+            SimpleDateFormat("hh:mm a", Locale.getDefault())
+        return df.format(date)
+    }
+
+    //
+//    private fun getDate(timestamp: Timestamp): String? {
+//        val date: Date = timestamp.toDate()
+//        val df =
+//            SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.getDefault())
+//        return df.format(date)
+//    }
+    class ChatHomeViewHolder(
+        val particiepentsVertialItemviewBinding: ParticipantsChatsBinding,
+        itemClick: (Int) -> Unit
+    ) :
+        RecyclerView.ViewHolder(particiepentsVertialItemviewBinding.root) {
+
+        init {
+            particiepentsVertialItemviewBinding.root.setOnClickListener {
+                itemClick(adapterPosition)
+            }
+        }
+    }
+
+}
+
Index: app/src/main/java/com/trimad/ichat/ui/fragments/SingleLiveChatFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/trimad/ichat/ui/fragments/SingleLiveChatFragment.kt b/app/src/main/java/com/trimad/ichat/ui/fragments/SingleLiveChatFragment.kt
new file mode 100644
--- /dev/null	(date 1665466809878)
+++ b/app/src/main/java/com/trimad/ichat/ui/fragments/SingleLiveChatFragment.kt	(date 1665466809878)
@@ -0,0 +1,661 @@
+package com.trimad.ichat.ui.fragments
+
+import android.content.Context
+import android.os.Bundle
+import android.util.Log
+import android.view.LayoutInflater
+import android.view.View
+import android.view.ViewGroup
+import android.widget.Toast
+import androidx.fragment.app.Fragment
+import androidx.navigation.fragment.findNavController
+import androidx.recyclerview.widget.LinearLayoutManager
+import androidx.recyclerview.widget.RecyclerView
+import com.android.volley.AuthFailureError
+import com.android.volley.Response
+import com.android.volley.toolbox.JsonObjectRequest
+import com.bumptech.glide.Glide
+import com.trimad.ichat.R
+import com.trimad.ichat.constants.ConstantsData
+import com.trimad.ichat.databasecontroller.DatabaseAddresses
+import com.trimad.ichat.databasecontroller.Repoistory
+import com.trimad.ichat.databinding.FragmentSingleLiveChatBinding
+import com.trimad.ichat.listeners.OnGetUserDataListener
+import com.trimad.ichat.models.ChatInfoModel
+import com.trimad.ichat.models.ChatMessage
+import com.trimad.ichat.models.UserModel
+import com.trimad.ichat.singlton.ApplicationClass
+import com.trimad.ichat.singlton.MySingleton
+import com.trimad.ichat.ui.activities.MainActivity
+import com.trimad.ichat.ui.adapters.ChatGroupMessageAdapter
+import com.trimad.ichat.utils.MyApp
+import com.trimad.ichat.utils.Utils
+import com.google.firebase.Timestamp
+import com.google.firebase.auth.FirebaseAuth
+import com.google.firebase.firestore.FirebaseFirestore
+import com.google.firebase.firestore.Query
+import com.google.firebase.firestore.SetOptions
+import com.kaopiz.kprogresshud.KProgressHUD
+import com.trimad.ichat.utils.SavedPreference
+import gun0912.tedimagepicker.util.ToastUtil
+import org.json.JSONException
+import org.json.JSONObject
+import java.text.ParseException
+import java.text.SimpleDateFormat
+import java.util.*
+import java.util.concurrent.TimeUnit
+
+
+class SingleLiveChatFragment : Fragment() {
+
+    private var mBinding: FragmentSingleLiveChatBinding? = null
+    private val binding get() = mBinding!!
+
+    private var mReceiver_id: String? = null
+    private var mType: String? = null
+
+ //   private var current_userModel: UserModel? = null
+    private var receiver_userModel: UserModel? = null
+
+    private var progressHUD: KProgressHUD? = null
+    private var mAuth: FirebaseAuth? = null
+    private var chat_list: ArrayList<ChatMessage>? = null
+    private var mChatAdapter: ChatGroupMessageAdapter? = null
+    private var mDb: FirebaseFirestore? = null
+
+    private lateinit var context: MainActivity
+
+    private val TAG = "SingleLiveChatFragment"
+    var id: String? = null
+
+    private lateinit var id1: String
+    private lateinit var id2: String
+
+
+    override fun onCreateView(
+        inflater: LayoutInflater, container: ViewGroup?,
+        savedInstanceState: Bundle?
+    ): View? {
+        // Inflate the layout for this fragment
+
+        mBinding = FragmentSingleLiveChatBinding.inflate(inflater, container, false)
+
+        mReceiver_id = arguments?.getString("receiver_id")
+        if(MyApp.userModel == null){
+            context.updatePreferences()
+            MyApp.userModel = SavedPreference.getUserData(context)
+        }
+
+
+
+        mType = arguments?.getString("type")
+        Log.i("TAG3", "onCreateView: receiver_id$mReceiver_id-->type$mType")
+
+
+
+        return mBinding?.root
+    }
+
+
+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
+        super.onViewCreated(view, savedInstanceState)
+
+        mAuth = FirebaseAuth.getInstance()
+        mDb = FirebaseFirestore.getInstance()
+        chat_list = ArrayList()
+
+        id1 = mAuth!!.uid.toString() + "_" + mReceiver_id
+        id2 = mReceiver_id + "_" + mAuth!!.uid.toString()
+
+        id = id1
+
+        setUpChatRecyclerView()
+
+    //    current_userModel = Utils.getUserProfile2(requireContext())
+        progressHUD = Utils.getProgressDialog(requireContext(), getString(R.string.please_wait))
+
+        // get receiver details and after
+        getReceiverData()
+
+        setListeners()
+
+        DatabaseAddresses.getChatMessageRefrence(id1)
+            .orderBy("timestamp", Query.Direction.ASCENDING)
+            .whereEqualTo("group_id", id1)
+            .addSnapshotListener { value, e ->
+                if (e == null) {
+                    val chatMessageList: List<ChatMessage>? = value?.toObjects(ChatMessage::class.java)
+                        if(value == null || chatMessageList == null){
+                            chat_list?.clear()
+                            mChatAdapter?.notifyDataSetChanged()
+                        }else{
+                            if (chatMessageList.size > 0) {
+                                id = id1
+//
+//                                chat_list?.clear()
+//                                chat_list?.addAll(chatMessageList!!)
+//                                mChatAdapter?.notifyDataSetChanged()
+
+                                mChatAdapter?.submitList(chatMessageList)
+
+                                binding.chatmessageRecyclerView.postDelayed(Runnable {
+                                        binding.chatmessageRecyclerView.scrollToPosition(
+                                            binding.chatmessageRecyclerView.adapter?.itemCount!! - 1
+                                        )
+
+                                }, 100)
+
+
+                           //     Log.i(TAG, "onTaskSuccess: chatMessageList:"+chatMessageList.size)
+//                            for (i in chatMessageList!!.indices)
+//                            {
+//                                val chatReadModel=ChatReadModel()
+//
+//                                chatReadModel.chatMessage=chatMessageList[i]
+//
+//                                if (chatMessageList[i].sender_id==mAuth?.uid)
+//                                {
+//                                    chatReadModel.chat_sender_userModel=receiver_userModel
+//                                    chat_list?.add(chatReadModel)
+//                                }else{
+//                                    chatReadModel.chat_sender_userModel=MyApp.userModel!!
+//                                    chat_list?.add(chatReadModel)
+//                                }
+//                                mChatAdapter?.notifyDataSetChanged()
+//
+//                            }
+
+
+                            }
+                        }
+
+                    }
+
+            }
+
+        DatabaseAddresses.getChatMessageRefrence(id2)
+            .orderBy("timestamp", Query.Direction.ASCENDING)
+            .whereEqualTo("group_id", id2)
+            .addSnapshotListener { value, e ->
+                if (e == null) {
+                    val chatMessageList: List<ChatMessage>? = value?.toObjects(ChatMessage::class.java)
+                    if(value == null || chatMessageList == null){
+                    //    chat_list?.clear()
+                    //    mChatAdapter?.notifyDataSetChanged()
+                    }else{
+                        if (chatMessageList.size > 0) {
+                            id = id2
+
+//                            chat_list?.clear()
+//                            chat_list?.addAll(chatMessageList!!)
+                         //   mChatAdapter?.notifyDataSetChanged()
+                            mChatAdapter?.submitList(chatMessageList)
+                            binding.chatmessageRecyclerView.postDelayed(Runnable {
+                                binding.chatmessageRecyclerView.scrollToPosition(
+                                    binding.chatmessageRecyclerView.adapter?.itemCount!! - 1
+                                )
+
+                            }, 100)
+
+                         //   Log.i(TAG, "onTaskSuccess: chatMessageList:"+chatMessageList.size)
+//                            for (i in chatMessageList!!.indices)
+//                            {
+//                                val chatReadModel=ChatReadModel()
+//
+//                                chatReadModel.chatMessage=chatMessageList[i]
+//
+//                                if (chatMessageList[i].sender_id==mAuth?.uid)
+//                                {
+//                                    chatReadModel.chat_sender_userModel=receiver_userModel
+//                                    chat_list?.add(chatReadModel)
+//                                }else{
+//                                    chatReadModel.chat_sender_userModel= MyApp.userModel ?: UserModel(user_id = mAuth?.uid)
+//                                    chat_list?.add(chatReadModel)
+//                                }
+//                                mChatAdapter?.notifyDataSetChanged()
+//
+//                            }
+
+
+                      //      binding.chatmessageRecyclerView.scrollToPosition(chatMessageList.size - 1)
+
+                        }
+                    }
+                }
+            }
+
+
+
+//        Repoistory.chatUnSeenResponse.observe(viewLifecycleOwner) {
+//            when (it) {
+//                APIResponse.Loading -> {}
+//                APIResponse.onTaskEmpty -> {}
+//                is APIResponse.onTaskError -> {
+//                    Toast.makeText(requireContext(), it.message, Toast.LENGTH_SHORT).show()
+//                    Log.v("TAG7","Unseen error :${it.message}")
+//                }
+//                is APIResponse.onTaskSuccess -> {
+//                   Log.v("TAG7","Unseen list :${it.chat_list}")
+//                    val collectionReference: CollectionReference = DatabaseAddresses.getChatMessageRefrence(it!!.chat_list!![0].group_id.toString())
+//                    it.chat_list!!.forEach {
+//                      collectionReference
+//                            .document(it.message_id.toString())
+//                            .update("message_staus","Seen")
+//                    }
+//
+//                }
+//            }
+//        }
+
+
+    }
+
+    private fun getUnSennMessages(id: String) {
+        Repoistory.getUnseenMessages(id, mAuth!!.uid.toString())
+    }
+
+    private fun getReceiverData() {
+      //  progressHUD?.show()
+        Repoistory.getUser(mReceiver_id,
+            object : OnGetUserDataListener {
+                override fun onTaskSuccess(userModel: UserModel?) {
+                 //   progressHUD?.dismiss()
+                    receiver_userModel = userModel
+                    setDataOnViews()
+
+                    //  id=mReceiver_id+"_"+mAuth!!.uid.toString()
+
+                    //  getGroupMessages(id!!)
+                }
+
+                override fun onTaskError(message: String?) {
+              //      progressHUD?.dismiss()
+                    Toast.makeText(requireContext(), message, Toast.LENGTH_SHORT).show()
+                }
+
+                override fun onTaskEmpty() {
+              //      progressHUD?.dismiss()
+//                    Toast.makeText(
+//                        requireContext(),
+//                        getString(R.string.no_data_found),
+//                        Toast.LENGTH_SHORT
+//                    ).show()
+                }
+
+            })
+    }
+
+//    private fun getGroupMessages(id2: String) {
+//        Log.i(TAG, "getGroupMessages: ppp groupId:$id2")
+//
+//        Repoistory.getSingleMessages(groupId = id2, userId = mReceiver_id.toString(),
+//            object : OnGetChatMessages {
+//                override fun onTaskSuccess(chatMessageList: List<ChatMessage>) {
+//                    chat_list?.clear()
+//                    Log.i(TAG, "onTaskSuccess: chatMessageList:" + chatMessageList.size)
+//                    for (i in chatMessageList.indices) {
+//                        val chatReadModel = ChatReadModel()
+//
+//                        chatReadModel.chatMessage = chatMessageList[i]
+//
+//                        if (chatMessageList[i].sender_id == mReceiver_id) {
+//                            chatReadModel.chat_sender_userModel = receiver_userModel
+//                            chat_list?.add(chatReadModel)
+//                        } else {
+//                            chatReadModel.chat_sender_userModel = MyApp.userModel!!
+//                            chat_list?.add(chatReadModel)
+//                        }
+//                        mChatAdapter?.notifyDataSetChanged()
+//
+//                    }
+//
+//                }
+//
+//                override fun onTaskError(message: String?) {
+//
+//                    Log.i(TAG, "onTaskError: error:$message")
+//                    Toast.makeText(requireContext(), message, Toast.LENGTH_SHORT).show()
+//
+//                }
+//
+//                override fun onTaskEmpty() {
+//                    if (isAdded) {
+////                        Toast.makeText(requireContext(),getString(R.string.no_chat_found),Toast.LENGTH_SHORT).show()
+//                        id = mAuth!!.uid.toString() + "_" + mReceiver_id
+//                        //   repeatGroupMessages(id.toString())
+//                    }
+//
+//                }
+//
+//
+//            })
+//    }
+
+//    private fun repeatGroupMessages(id: String) {
+//        Log.i(TAG, "getGroupMessages: rrrr groupId:$id")
+//
+//        Repoistory.getSingleMessages(groupId = id, userId = mReceiver_id.toString(),
+//            object : OnGetChatMessages {
+//                override fun onTaskSuccess(chatMessageList: List<ChatMessage>) {
+//                    chat_list?.clear()
+//                    Log.i(TAG, "onTaskSuccess: chatMessageList:" + chatMessageList.size)
+//                    for (i in chatMessageList.indices) {
+//                        val chatReadModel = ChatReadModel()
+//
+//                        chatReadModel.chatMessage = chatMessageList[i]
+//
+//                        if (chatMessageList[i].sender_id == mAuth?.uid) {
+//                            chatReadModel.chat_sender_userModel = receiver_userModel
+//                            chat_list?.add(chatReadModel)
+//                        } else {
+//                            chatReadModel.chat_sender_userModel = MyApp.userModel!!
+//                            chat_list?.add(chatReadModel)
+//                        }
+//                        mChatAdapter?.notifyDataSetChanged()
+//
+//                    }
+//
+//
+//                 //   binding.chatmessageRecyclerView.isFocusable = true
+//                    binding.chatmessageRecyclerView.scrollToPosition(chatMessageList.size - 1)
+//                }
+//
+//                override fun onTaskError(message: String?) {
+//                    Log.i(TAG, "getGroupMessages: repeat onTaskError: error:$message")
+//                    Toast.makeText(requireContext(), message, Toast.LENGTH_SHORT).show()
+//
+//                }
+//
+//                override fun onTaskEmpty() {
+//                    Log.i(TAG, "getGroupMessages: repeat onTaskEmpty")
+//                    chat_list!!.clear()
+//                    mChatAdapter?.notifyDataSetChanged()
+//                    if (isAdded) {
+//                        Toast.makeText(requireContext(), "repeat", Toast.LENGTH_SHORT).show()
+//                    }
+//
+//                }
+//
+//
+//            })
+//    }
+
+
+    private fun setDataOnViews() {
+        if (isAdded) {
+            Glide.with(requireContext())
+                .load(receiver_userModel?.user_image)
+                .error(R.drawable.no_image)
+                .into((binding.receiverImageview))
+            binding.receiverName.text = receiver_userModel?.user_name
+
+            Log.i(TAG, "setDataOnViews: timeStamp:" + receiver_userModel?.last_seen)
+            if (receiver_userModel?.online == true) {
+                binding.statusTv.text = getString(R.string.online)
+            } else {
+// To use it
+                val timestamp: Timestamp? = receiver_userModel?.last_seen
+
+                val date = timestamp?.toDate()
+                binding.statusTv.text = covertTimeToText(getDate(timestamp!!))
+            }
+
+        }
+    }
+
+    fun covertTimeToText(dataDate: String?): String? {
+        var convertTime: String? = null
+        val suffix = "ago"
+        try {
+            val dateFormat = SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.getDefault())
+            val pasTime = dateFormat.parse(dataDate)
+            val nowTime = Date()
+            val dateDiff = nowTime.time - pasTime.time
+            val second: Long = TimeUnit.MILLISECONDS.toSeconds(dateDiff)
+            val minute: Long = TimeUnit.MILLISECONDS.toMinutes(dateDiff)
+            val hour: Long = TimeUnit.MILLISECONDS.toHours(dateDiff)
+            val day: Long = TimeUnit.MILLISECONDS.toDays(dateDiff)
+            convertTime = if (second < 60) {
+                if (second == 1L) {
+                    "$second second $suffix"
+                } else {
+                    "$second seconds $suffix"
+                }
+            } else if (minute < 60) {
+                if (minute == 1L) {
+                    "$minute minute $suffix"
+                } else {
+                    "$minute minutes $suffix"
+                }
+            } else if (hour < 24) {
+                if (hour == 1L) {
+                    "$hour hour $suffix"
+                } else {
+                    "$hour hours $suffix"
+                }
+            } else if (day >= 7) {
+                if (day >= 365) {
+                    val tempYear = day / 365
+                    if (tempYear == 1L) {
+                        "$tempYear year $suffix"
+                    } else {
+                        "$tempYear years $suffix"
+                    }
+                } else if (day >= 30) {
+                    val tempMonth = day / 30
+                    if (tempMonth == 1L) {
+                        (day / 30).toString() + " month " + suffix
+                    } else {
+                        (day / 30).toString() + " months " + suffix
+                    }
+                } else {
+                    val tempWeek = day / 7
+                    if (tempWeek == 1L) {
+                        (day / 7).toString() + " week " + suffix
+                    } else {
+                        (day / 7).toString() + " weeks " + suffix
+                    }
+                }
+            } else {
+                if (day == 1L) {
+                    "$day day $suffix"
+                } else {
+                    "$day days $suffix"
+                }
+            }
+        } catch (e: ParseException) {
+            e.printStackTrace()
+            Log.e("TimeAgo", e.message + "")
+        }
+        return convertTime
+    }
+
+    private fun getDate(timestamp: Timestamp): String? {
+        val date: Date = timestamp.toDate()
+        val df =
+            SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.getDefault())
+        return df.format(date)
+    }
+
+    private fun setUpChatRecyclerView() {
+        mChatAdapter = ChatGroupMessageAdapter( requireContext(), mAuth?.uid.toString())
+        val linearLayoutManager = LinearLayoutManager(context, RecyclerView.VERTICAL, false)
+        binding.chatmessageRecyclerView.layoutManager = linearLayoutManager
+        binding.chatmessageRecyclerView.setHasFixedSize(true)
+        binding.chatmessageRecyclerView.adapter = mChatAdapter
+
+//        binding.chatmessageRecyclerView.addOnLayoutChangeListener(
+//            View.OnLayoutChangeListener { v, left, top, right, bottom, oldLeft, oldTop, oldRight, oldBottom ->
+//               Log.v("TAG44","476")
+//
+//                if (bottom < oldBottom) {
+//                    Log.v("TAG44","479")
+//                    binding.chatmessageRecyclerView.postDelayed(Runnable {
+//                        Log.v("TAG44","481")
+//                        if (chat_list!!.size > 0) {
+//                            Log.v("TAG44","483")
+//                            binding.chatmessageRecyclerView.smoothScrollToPosition(
+//                                binding.chatmessageRecyclerView.adapter?.itemCount!! - 1
+//                            )
+//                        }else{
+//                            Log.v("TAG44","488")
+//                        }
+//                    }, 100)
+//                }else{
+//                    Log.v("TAG44","492 bottom:$bottom  :$oldBottom")
+//                }
+//            })
+    }
+
+    private fun setListeners() {
+        binding.arrowBackImgview.setOnClickListener {
+            findNavController().navigate(R.id.action_singleLiveChatFragment_to_homeFragment)
+        }
+
+        binding.checkmark.setOnClickListener {
+            if (mAuth?.currentUser != null) {
+                var message: String = binding.inputMessage.text.toString().trim()
+                if (message.isNotEmpty()) {
+                    binding.inputMessage.setText("")
+                    val date = Date()
+                    val timestamp = Timestamp(date)
+                    message = message.replace(System.getProperty("line.separator").toRegex(), "")
+
+                    val chatInfoModel = ChatInfoModel(
+                        chat_id = mReceiver_id,
+                        message = message,
+                        timestamp = timestamp,
+                        type = ConstantsData.message_single_type,
+                        user_one_name = MyApp.userModel!!.user_name,
+                        user_two_name = receiver_userModel?.user_name,
+                        user_one_image = MyApp.userModel!!.user_image,
+                        user_two_image = receiver_userModel?.user_image,
+                        sender_id = mAuth!!.uid.toString(),
+                        receiver_id = mReceiver_id
+                    )
+
+                    mDb?.collection(ConstantsData.chatMessage)?.document(id.toString())
+                        ?.set(chatInfoModel, SetOptions.merge())
+
+                    val msg_document =
+                        mDb?.collection(ConstantsData.chatMessage)?.document(id.toString())
+                            ?.collection(
+                                ConstantsData.message
+                            )?.document()
+
+                    val chatMessage = ChatMessage()
+                    val receiver_list = ArrayList<String>()
+                    receiver_list.add(mReceiver_id.toString())
+
+                    chatMessage.message_id = msg_document?.id
+                    chatMessage.message_ = message
+
+                    chatMessage.group_id = id.toString()
+                    chatMessage.message_type = mType
+
+                    chatMessage.sender_id = mAuth?.uid
+                    chatMessage.sender_name = MyApp.userModel!!.user_name
+                    chatMessage.sender_image = MyApp.userModel!!.user_image
+                    // receiver_list
+                    chatMessage.receiver_list = receiver_list
+
+                    chatMessage.timestamp = timestamp
+                    chatMessage.message_staus = ConstantsData.status_sent
+
+                    msg_document?.set(chatMessage)
+                        ?.addOnCompleteListener {
+                            if (it.isSuccessful) {
+//                                binding.inputMessage.setText("")
+                                sendNofitfication()
+                            }
+                        }
+
+                } else {
+                    Toast.makeText(
+                        requireContext(),
+                        getString(R.string.please_write_message),
+                        Toast.LENGTH_SHORT
+                    ).show()
+                }
+            } else {
+                Toast.makeText(
+                    requireContext(),
+                    getString(R.string.user_not_login),
+                    Toast.LENGTH_SHORT
+                ).show()
+            }
+        }
+
+    }
+
+    private fun sendNofitfication() {
+
+
+        val msg: String = "New Message from " + MyApp.userModel!!.user_name
+
+        val notification = JSONObject()
+        val notifcationBody = JSONObject()
+        try {
+            notification.put("title", getString(R.string.app_name))
+            notification.put("to", receiver_userModel?.user_token)
+            notifcationBody.put("type", ConstantsData.message_single_type)
+            notifcationBody.put("message", msg)
+            notifcationBody.put("receiverid", MyApp.userModel?.user_id)
+
+
+            notifcationBody.put(
+                ConstantsData.chatGroupId,
+                mReceiver_id
+            )
+            notifcationBody.put(
+                ConstantsData.chatSenderId,
+                mAuth!!.uid
+            )
+
+            notification.put("data", notifcationBody)
+        } catch (e: JSONException) {
+            Log.d("notifi", "onCreate: " + e.message)
+        }
+
+
+        val jsonObjectRequest: JsonObjectRequest =
+            object : JsonObjectRequest(
+                ConstantsData.FIREBASE_NOTIFICATION_URL, notification,
+                Response.Listener { response ->
+                    Log.i(TAG, "onResponse: responseDataNotification\n$response")
+//                    saveNotificationData(recieverModel, msg, mUserModel, message)
+                },
+                Response.ErrorListener { error ->
+                    Log.i(
+                        TAG,
+                        """
+                      onErrorResponse: errorNotification
+                      ${error.localizedMessage}
+                      """.trimIndent()
+                    )
+                }) {
+                @Throws(AuthFailureError::class)
+                override fun getHeaders(): Map<String, String> {
+                    val params: MutableMap<String, String> = HashMap()
+                    params["Authorization"] = ConstantsData.FIREBASE_NOTIFICATION_SERVER_KEY
+                    params["Content-Type"] = ConstantsData.FIREBASE_NOTIFICATION_CONTENT_TYPE
+                    return params
+                }
+            }
+
+        MySingleton.getInstance(ApplicationClass.appContext!!)
+            ?.addToRequestQueue(jsonObjectRequest)
+
+
+    }
+
+    override fun onAttach(context: Context) {
+        super.onAttach(context)
+        this.context = context as MainActivity
+    }
+
+//    override fun onDestroy() {
+//        chat_list?.clear()
+//        super.onDestroy()
+//    }
+}
\ No newline at end of file
Index: app/src/main/java/com/trimad/ichat/ui/fragments/SubscriptionStatus.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/trimad/ichat/ui/fragments/SubscriptionStatus.kt b/app/src/main/java/com/trimad/ichat/ui/fragments/SubscriptionStatus.kt
new file mode 100644
--- /dev/null	(date 1666084109650)
+++ b/app/src/main/java/com/trimad/ichat/ui/fragments/SubscriptionStatus.kt	(date 1666084109650)
@@ -0,0 +1,83 @@
+package com.trimad.ichat.ui.fragments
+
+import android.content.Context
+import android.os.Bundle
+import android.util.Log
+import androidx.fragment.app.Fragment
+import android.view.LayoutInflater
+import android.view.View
+import android.view.ViewGroup
+import android.widget.Toast
+import androidx.lifecycle.lifecycleScope
+import androidx.navigation.fragment.findNavController
+import com.google.firebase.auth.FirebaseAuth
+import com.google.firebase.firestore.FirebaseFirestore
+import com.kaopiz.kprogresshud.KProgressHUD
+import com.trimad.ichat.R
+import com.trimad.ichat.constants.ConstantsData
+import com.trimad.ichat.databasecontroller.DatabaseAddresses
+import com.trimad.ichat.databinding.FragmentLoginBinding
+import com.trimad.ichat.databinding.FragmentSubscriptionStatusBinding
+import com.trimad.ichat.models.UserModel
+import com.trimad.ichat.ui.activities.MainActivity
+import com.trimad.ichat.utils.MyApp
+import com.trimad.ichat.utils.SavedPreference
+import com.trimad.ichat.utils.Utils
+import gun0912.tedimagepicker.util.ToastUtil
+
+class SubscriptionStatus : Fragment() {
+    private lateinit var mBinding: FragmentSubscriptionStatusBinding
+    private lateinit var mContext: MainActivity
+
+    private var progressHUD: KProgressHUD? = null
+    override fun onCreateView(
+        inflater: LayoutInflater, container: ViewGroup?,
+        savedInstanceState: Bundle?
+    ): View? {
+        // Inflate the layout for this fragment
+        mBinding=FragmentSubscriptionStatusBinding.inflate(inflater,container,false)
+        progressHUD = Utils.getProgressDialog(requireContext(), getString(R.string.loading))
+        progressHUD!!.setLabel("Verifying")
+        progressHUD!!.show()
+        Log.v("TAG85","41")
+
+        viewLifecycleOwner.lifecycleScope.launchWhenCreated {
+            FirebaseFirestore.getInstance().collection(ConstantsData.users).document(FirebaseAuth.getInstance().uid.toString())
+                .get()
+                .addOnCompleteListener {
+                    progressHUD!!.dismiss()
+                    if(it.isSuccessful){
+
+                        val userModel: UserModel = it.result.toObject(UserModel::class.java)!!
+                        if (userModel!!.user_active == true) {
+                            Log.v("TAG85","51")
+                            MyApp.userModel = userModel
+                            SavedPreference.setUserData(mContext,userModel)
+                            mContext.updateUserDB(FirebaseAuth.getInstance().uid)
+                            findNavController().navigate(R.id.action_subscriptionStatus_to_homeFragment)
+                        }else{
+                            Log.v("TAG85","58")
+                            SavedPreference.clearPreferences(mContext)
+                            mContext.updateUserDBToEmptyToken(FirebaseAuth.getInstance().uid)
+                            Toast.makeText(mContext,"Admin Blocked you!", Toast.LENGTH_SHORT).show()
+                        }
+                    }else{
+                        ToastUtil.showToast(it.exception.toString())
+                    }
+                }
+
+        }
+
+
+
+
+
+        return mBinding.root
+    }
+
+    override fun onAttach(context: Context) {
+        super.onAttach(context)
+        mContext = context as MainActivity
+    }
+
+}
\ No newline at end of file
Index: app/src/main/java/com/trimad/ichat/ui/fragments/ChatHomeFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/trimad/ichat/ui/fragments/ChatHomeFragment.kt b/app/src/main/java/com/trimad/ichat/ui/fragments/ChatHomeFragment.kt
new file mode 100644
--- /dev/null	(date 1665463368007)
+++ b/app/src/main/java/com/trimad/ichat/ui/fragments/ChatHomeFragment.kt	(date 1665463368007)
@@ -0,0 +1,311 @@
+package com.trimad.ichat.ui.fragments
+
+import android.content.Context
+import android.os.Bundle
+import android.util.Log
+import androidx.fragment.app.Fragment
+import android.view.LayoutInflater
+import android.view.View
+import android.view.ViewGroup
+import androidx.navigation.fragment.findNavController
+import androidx.recyclerview.widget.LinearLayoutManager
+import androidx.recyclerview.widget.RecyclerView
+import com.google.firebase.Timestamp
+import com.trimad.ichat.R
+import com.trimad.ichat.databasecontroller.DatabaseAddresses
+import com.trimad.ichat.databinding.FragmentChatHomeBinding
+import com.trimad.ichat.listeners.HomeChatSelectedListener
+import com.trimad.ichat.ui.activities.MainActivity
+import com.trimad.ichat.ui.adapters.ChatHomeAdapter
+import com.trimad.ichat.utils.MyApp
+import com.trimad.ichat.utils.Utils
+import com.google.firebase.auth.FirebaseAuth
+import com.google.firebase.firestore.EventListener
+import com.google.firebase.firestore.Query
+import com.google.firebase.firestore.QuerySnapshot
+import com.kaopiz.kprogresshud.KProgressHUD
+import com.trimad.ichat.models.*
+import kotlin.collections.ArrayList
+
+class ChatHomeFragment : Fragment(), HomeChatSelectedListener {
+
+    private val TAG = "ChatHomeFragment"
+    private lateinit var mBinding: FragmentChatHomeBinding
+    private lateinit var mContext: MainActivity
+    private val binding get() = mBinding
+    private var progressHUD: KProgressHUD? = null
+    private var mAuth: FirebaseAuth? = null
+    private var mList: ArrayList<HomeChatModel>? = null
+    private var mAdapter: ChatHomeAdapter? = null
+    private var isGroupEmpty = false
+    private var myGroupList: ArrayList<String>? = null
+    private lateinit var uid: String
+
+
+    override fun onCreateView(
+        inflater: LayoutInflater, container: ViewGroup?,
+        savedInstanceState: Bundle?
+    ): View? {
+        // Inflate the layout for this fragment
+
+        mBinding = FragmentChatHomeBinding.inflate(inflater, container, false)
+        mAuth = FirebaseAuth.getInstance()
+        progressHUD = Utils.getProgressDialog(requireContext(), "Loading")
+
+
+
+        return mBinding.root
+    }
+
+
+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
+        super.onViewCreated(view, savedInstanceState)
+
+        setUpRecyclerView()
+        uid = FirebaseAuth.getInstance().uid.toString()
+
+        if (!MyApp.isCheckUserGroups) {
+            getGroups(mAuth?.currentUser!!.uid)
+        } else {
+            if (!MyApp.isCheckUserChats) {
+                getUserChats()
+            } else {
+                mList!!.clear()
+                mList!!.addAll(MyApp.homeChatList)
+            }
+        }
+    }
+
+    fun getGroups(user_id: String?) {
+        if (!progressHUD!!.isShowing) {
+            progressHUD!!.show()
+        }
+
+        DatabaseAddresses.getGroupsRefrence()
+            .addSnapshotListener(EventListener<QuerySnapshot?> { value, e ->
+                if (e != null) {
+                    Log.i("TAGTAGTAG", "Listen failed.", e)
+                    if (progressHUD!!.isShowing) {
+                        progressHUD!!.dismiss()
+                    }
+
+
+                    return@EventListener
+                }
+                MyApp.isCheckUserGroups = true
+
+                val group_list: ArrayList<GroupModel> = ArrayList<GroupModel>()
+                val myGroup_list: ArrayList<String> = ArrayList<String>()
+                for (doc in value!!) {
+                    val groupModel: GroupModel = doc.toObject(GroupModel::class.java)
+                    for (i in groupModel.users_list?.indices!!) {
+                        if (groupModel.users_list!![i].user_id == user_id) {
+                            group_list.add(groupModel)
+                            myGroup_list.add(groupModel.group_id.toString())
+                        }
+                    }
+                }
+                if (group_list.size > 0) {
+                    MyApp.myGroup_list.clear()
+                    MyApp.group_list.clear()
+
+
+                    MyApp.myGroup_list = myGroup_list
+                    MyApp.group_list = group_list
+                    getUserChats()
+                } else {
+                    getUserChats()
+                    MyApp.myGroup_list.clear()
+                    MyApp.group_list.clear()
+
+                }
+            })
+    }
+
+
+    // to get all chat of current user
+    fun getUserChats() {
+        if (!progressHUD!!.isShowing) {
+            progressHUD!!.show()
+        }
+
+
+        DatabaseAddresses.getChatReference()
+            .orderBy("timestamp", Query.Direction.DESCENDING)
+            .addSnapshotListener(EventListener<QuerySnapshot?> { value, e ->
+                if (e != null) {
+                    Log.i("TAG6", "Listen failed.", e)
+                    if (progressHUD!!.isShowing) {
+                        progressHUD!!.dismiss()
+                    }
+                    return@EventListener
+                }
+
+                if (progressHUD!!.isShowing) {
+                    progressHUD!!.dismiss()
+                }
+
+                val user_list: ArrayList<HomeChatModel> = ArrayList()
+                Log.i("TAG6", "getUserChats: " + value?.size())
+                MyApp.isCheckUserChats = true
+
+                for (doc in value!!) {
+//                    val userModel: UserModel = doc.toObject(UserModel::class.java)
+//                    user_list.add(userModel)
+                    if (doc.get("type").toString() == "single") {
+                        Log.i("TAG6", "getUserChats: single : 129   id:${doc.id}")
+
+                        if (doc.get("receiver_id")
+                                .toString() == uid || doc.get("sender_id").toString() == uid
+                        ) {
+                            val userModel = HomeChatModel(
+                                user_id = if (doc.get("receiver_id")
+                                        .toString() == uid
+                                ) doc.get("sender_id").toString() else doc.get("receiver_id")
+                                    .toString(),
+                                name1 = doc.get("user_one_name").toString(),
+                                name2 = doc.get("user_two_name").toString(),
+                                image1 = doc.get("user_one_image").toString(),
+                                image2 = doc.get("user_two_image").toString(),
+                                user_bio = doc.get("message").toString(),
+                                user_token = doc.get("type").toString(),
+                                last_seen = doc.get("timestamp") as Timestamp,
+                                doc_id = doc.id
+                            )
+                            user_list.add(userModel)
+                        }
+                    } else {
+                        Log.i("TAG6", "getUserChats: group : 138   id:${doc.id}")
+                        if (MyApp.myGroup_list.isNotEmpty() && MyApp.myGroup_list.contains(doc.id)) {
+                            val userModel = HomeChatModel(
+                                user_id = doc.id,
+                                user_name = doc.get("user_name").toString(),
+                                user_bio = doc.get("message").toString(),
+                                user_image = doc.get("group_img").toString(),
+                                user_token = doc.get("type").toString(),
+                                last_seen = doc.get("timestamp") as Timestamp,
+                                doc_id = doc.id
+                            )
+                            user_list.add(userModel)
+                        }
+                    }
+                }
+
+                if (user_list.size > 0) {
+                    MyApp.homeChatList = user_list
+                    mList!!.clear()
+                    mList!!.addAll(user_list)
+                    mAdapter!!.notifyDataSetChanged()
+                    // mAdapter!!.submitList(mList!!)
+                //   checkUnseenCount(user_list)
+                } else {
+                    //  Repoistory.chatHomeResponse.postValue(APIResponse.onTaskEmpty)
+                }
+            })
+    }
+
+    private fun checkUnseenCount(userList: ArrayList<HomeChatModel>) {
+        for ((i, user) in userList.withIndex()) {
+            if (user.user_token == "single") {
+                DatabaseAddresses.getGroupChatReference(user.doc_id.toString())
+                    .whereEqualTo("message_staus", "Sent")
+                    .whereEqualTo("sender_id", user.user_id)
+                    .get()
+                    .addOnSuccessListener { value ->
+                        if (value != null && !value.isEmpty) {
+                            mList!![i].msg_count.clear()
+                            mList!![i].msg_count = value!!.toObjects(ChatMessage::class.java)
+                            mAdapter!!.notifyItemChanged(i)
+                            MyApp.homeChatList.clear()
+                            MyApp.homeChatList.addAll(mList!!)
+                        } else {
+
+                        }
+                    }
+            }
+            else {
+
+                //   Log.v("TAG8", " group id :${rid}")
+                DatabaseAddresses.getGroupChatReference(user.doc_id!!)
+                    .whereEqualTo("message_staus", "Sent")
+                    .get()
+                    .addOnSuccessListener {
+                        if (!it.isEmpty) {
+                            val chats = it!!.toObjects(ChatMessage::class.java)
+                            val count = chats.filter { chat ->
+                                chat.msg_receivers?.let { map ->
+                                    map.containsKey(uid) && map.getValue(uid) == "Sent"
+                                }
+                                    ?: false
+                            }
+                            if (count.isNotEmpty()) {
+                                mList!![i].msg_count.clear()
+                                mList!![i].msg_count.addAll(count)
+                                mAdapter!!.notifyItemChanged(i)
+                                MyApp.homeChatList.clear()
+                                MyApp.homeChatList.addAll(mList!!)
+                            }
+                        }
+                    }
+            }
+        }
+
+    }
+
+
+    private fun setUpRecyclerView() {
+        mList = ArrayList()
+        mAdapter = ChatHomeAdapter(mList!!, requireContext(), this, mAuth!!.uid.toString())
+        val linearLayoutManager = LinearLayoutManager(context, RecyclerView.VERTICAL, false)
+        binding.usersRecyclerview.layoutManager = linearLayoutManager
+        binding.usersRecyclerview.setHasFixedSize(true)
+        binding.usersRecyclerview.adapter = mAdapter
+    }
+
+    override fun onChatSelect(userModel: HomeChatModel) {
+        mContext.updateChatSeenStatus(userModel, uid)
+        if (userModel.user_token == "single") {
+            val bundle = Bundle()
+            bundle.putString("receiver_id", userModel.user_id)
+            bundle.putString("type", "single")
+            findNavController().navigate(R.id.action_homeFragment_to_singleLiveChatFragment, bundle)
+        } else {
+            val bundle = Bundle()
+            bundle.putString("group_id", userModel.user_id)
+            bundle.putString("type", "group")
+            findNavController().navigate(R.id.action_homeFragment_to_liveChatFragment, bundle)
+        }
+
+    }
+
+    override fun onAttach(context: Context) {
+        super.onAttach(context)
+        mContext = context as MainActivity
+    }
+
+    override fun onResume() {
+        super.onResume()
+        Log.i("TAG4", "onResume")
+    }
+
+    override fun onPause() {
+        super.onPause()
+        Log.i("TAG4", "onPause")
+    }
+
+    override fun onDestroyView() {
+        super.onDestroyView()
+        Log.i("TAG4", "onDestroyView")
+    }
+
+    override fun onDetach() {
+        super.onDetach()
+        Log.i("TAG4", "onDetach")
+    }
+
+    override fun onDestroy() {
+        mList?.clear()
+        super.onDestroy()
+    }
+
+}
\ No newline at end of file
Index: app/src/main/java/com/trimad/ichat/ui/fragments/LoginFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/trimad/ichat/ui/fragments/LoginFragment.kt b/app/src/main/java/com/trimad/ichat/ui/fragments/LoginFragment.kt
new file mode 100644
--- /dev/null	(date 1665141364960)
+++ b/app/src/main/java/com/trimad/ichat/ui/fragments/LoginFragment.kt	(date 1665141364960)
@@ -0,0 +1,236 @@
+package com.trimad.ichat.ui.fragments
+
+import android.content.ActivityNotFoundException
+import android.content.Context
+import android.content.Intent
+import android.net.Uri
+import android.os.Bundle
+import android.text.TextUtils
+import android.util.Log
+import android.view.LayoutInflater
+import android.view.View
+import android.view.ViewGroup
+import android.widget.Toast
+import androidx.fragment.app.Fragment
+import androidx.navigation.fragment.findNavController
+import com.trimad.ichat.R
+import com.trimad.ichat.databinding.FragmentLoginBinding
+import com.trimad.ichat.ui.activities.MainActivity
+import com.trimad.ichat.utils.Utils
+import com.google.firebase.auth.FirebaseAuth
+import com.google.firebase.auth.FirebaseAuth.AuthStateListener
+import com.kaopiz.kprogresshud.KProgressHUD
+import com.trimad.ichat.utils.MyApp
+import com.trimad.ichat.utils.SavedPreference
+import gun0912.tedimagepicker.util.ToastUtil
+import java.util.*
+
+
+class LoginFragment : Fragment() {
+
+    private  val TAG = "LoginFragment"
+    private var mAuth: FirebaseAuth? = null
+    var authStateListener: AuthStateListener? = null
+    private var token: String? = null
+    private var progressHUD: KProgressHUD? = null
+
+    private var username:String?=null
+    private var password:String?=null
+
+    private lateinit var mBinding:FragmentLoginBinding
+    private lateinit var mContext:MainActivity
+
+
+    override fun onCreateView(
+        inflater: LayoutInflater, container: ViewGroup?,
+        savedInstanceState: Bundle?
+    ): View? {
+        // Inflate the layout for this fragment
+
+        mBinding=FragmentLoginBinding.inflate(inflater,container,false)
+        progressHUD = Utils.getProgressDialog(requireContext(), getString(R.string.loading))
+            progressHUD!!.setLabel(getString(R.string.autenticate_crediationals))
+//
+
+        mAuth=FirebaseAuth.getInstance()
+
+
+
+   //     setAuthStateListener()
+
+        mBinding.loginBtn.setOnClickListener {
+
+            username= mBinding.usernameInputlayout.editText?.text.toString()
+            password= mBinding.passwordInputlayout.editText?.text.toString()
+            if (isValid() && mBinding.cbPrivacyPolicy.isChecked)
+            {
+                progressHUD!!.show()
+                mAuth!!.signInWithEmailAndPassword(username.toString(), password.toString())
+                    .addOnCompleteListener(requireActivity()) { task ->
+                        if (task.isSuccessful) {
+                            // Sign in success, update UI with the signed-in user's information
+                            Log.i(TAG, "signInWithEmail:success")
+                            progressHUD!!.dismiss()
+                            findNavController().navigate(R.id.action_loginFragment_to_subscriptionStatus)
+                        } else {
+                            // If sign in fails, display a message to the user.
+                            Log.i(TAG, "signInWithEmail:failure", task.exception)
+                            Toast.makeText(requireContext(), "Authentication failed.",
+                                Toast.LENGTH_SHORT).show()
+                            progressHUD!!.dismiss()
+                        }
+                    }
+            }else{
+                ToastUtil.showToast("Please accept privacy policy to proceed!")
+            }
+        }
+
+
+        mBinding.termsCondition.setOnClickListener {
+            try {
+                val myIntent = Intent(Intent.ACTION_VIEW, Uri.parse("https://iseeutrack.com/ichat-user-terms-and-conditions/"))
+                startActivity(myIntent)
+            } catch (e: ActivityNotFoundException) {
+                Toast.makeText(
+                    mContext, "No application can handle this request."
+                            + " Please install a webbrowser", Toast.LENGTH_LONG
+                ).show()
+                e.printStackTrace()
+            }
+        }
+
+        return mBinding.root
+    }
+
+
+    private fun isValid(): Boolean {
+        var result = true
+
+        if (TextUtils.isEmpty(username)) {
+            mBinding.usernameInputlayout.error = getString(R.string.required)
+            result = false
+        }else if (TextUtils.isEmpty(password)) {
+            mBinding.passwordInputlayout.error = getString(R.string.required)
+            result = false
+        }
+
+            return result
+    }
+
+//    private fun setAuthStateListener() {
+//
+//        FirebaseMessaging.getInstance().token
+//            .addOnCompleteListener(OnCompleteListener { task ->
+//                if (!task.isSuccessful) {
+//                    Log.i(
+//                        TAG,
+//                        "Fetching FCM registration token failed",
+//                        task.exception
+//                    )
+//                    return@OnCompleteListener
+//                }
+//
+//                // Get new FCM registration token
+//                token = task.result
+//                Log.i(TAG, "onCreate: token:$token")
+//            })
+//
+//        val date = Date()
+//        val timestamp = Timestamp(date)
+//
+//        authStateListener = FirebaseAuth.AuthStateListener { firebaseAuth ->
+//            progressHUD = Utils.getProgressDialog(requireContext(), getString(R.string.loading))
+//            progressHUD!!.setLabel(getString(R.string.autenticate_crediationals))
+//            progressHUD!!.show()
+//            if (firebaseAuth.currentUser != null)
+//            {
+//           val userModel=UserModel(
+//               user_id =  firebaseAuth.uid,
+//               user_token =    token.toString(),
+//               last_seen = timestamp,
+//               online = true
+//           )
+//                DatabaseUploader.updateToken(
+//                    firebaseAuth.uid,
+//                    token.toString(),
+//                    timestamp,
+//                    true,
+//                    object : OnUserDataSaveListener {
+//                        override fun onTaskSuccess() {
+//                            Log.i(TAG, "onTaskSuccess: ")
+//                            Utils.saveUserProfile(mContext,userModel)
+//                            Utils.saveUserProfile2(mContext,userModel)
+//                            progressHUD!!.dismiss()
+//                            findNavController().navigate(R.id.action_loginFragment_to_homeFragment)
+//                        }
+//                        override fun onTaskFailure(message: String?) {
+//                            Log.i(TAG, "onTaskFailure: message:$message")
+//                        }
+//                    })
+//
+//
+//             /*   val date = Date()
+//                val timestamp = Timestamp(date)
+//
+//                val org_list= ArrayList<String>()
+//                org_list.add("asdf")
+//                org_list.add("defg")
+//                org_list.add("hijkl")
+//
+//                val userModel=UserModel(
+//                    firebaseAuth.uid,
+//                    "username",
+//                    "bio",
+//                    "test@gmail.com",
+//                    "",
+//                    token,
+//                    true,
+//                    timestamp,
+//                    org_list
+//                )
+//
+//                DatabaseUploader.saveUserData(userModel,
+//                object: OnUserDataSaveListener {
+//                    override fun onTaskSuccess() {
+//                        Log.i(TAG, "onTaskSuccess: ")
+//                        progressHUD!!.dismiss()
+//                        findNavController().navigate(R.id.action_loginFragment_to_homeFragment)
+//                    }
+//                    override fun onTaskFailure(message: String?) {
+//                        Log.i(TAG, "onTaskFailure: message:$message")
+//                    }
+//                })*/
+//
+//            } else {
+//                progressHUD!!.dismiss()
+//            }
+//        }
+//    }
+
+    override fun onStart() {
+        super.onStart()
+//        mAuth!!.addAuthStateListener(authStateListener!!)
+    }
+
+    override fun onStop() {
+        super.onStop()
+      //  mAuth!!.removeAuthStateListener(authStateListener!!)
+    }
+
+    override fun onAttach(context: Context) {
+        super.onAttach(context)
+        mContext = context as MainActivity
+    }
+
+    override fun onResume() {
+        super.onResume()
+        if(mAuth!!.currentUser != null){
+            MyApp.userModel = SavedPreference.getUserData(mContext)
+        findNavController().navigate(R.id.action_loginFragment_to_subscriptionStatus)
+        }
+    }
+
+
+
+
+}
\ No newline at end of file
Index: app/src/main/java/com/trimad/ichat/databasecontroller/DatabaseAddresses.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/trimad/ichat/databasecontroller/DatabaseAddresses.kt b/app/src/main/java/com/trimad/ichat/databasecontroller/DatabaseAddresses.kt
new file mode 100644
--- /dev/null	(date 1663689046000)
+++ b/app/src/main/java/com/trimad/ichat/databasecontroller/DatabaseAddresses.kt	(date 1663689046000)
@@ -0,0 +1,50 @@
+package com.trimad.ichat.databasecontroller
+
+import com.google.firebase.firestore.FirebaseFirestore
+import com.trimad.ichat.constants.ConstantsData
+import com.google.firebase.firestore.CollectionReference
+import com.google.firebase.firestore.DocumentReference
+
+object DatabaseAddresses {
+    private const val TAG = "DatabaseAddresses"
+
+    fun getSingleUserReference(userId: String?): DocumentReference {
+        return FirebaseFirestore.getInstance().collection(ConstantsData.users).document(
+            userId!!
+        )
+    }
+    fun getSingleOrganizationReference(org_id: String?): DocumentReference {
+        return FirebaseFirestore.getInstance().collection(ConstantsData.organizations).document(
+            org_id!!
+        )
+    }
+    fun getUsersReference(): CollectionReference {
+        return FirebaseFirestore.getInstance().collection(ConstantsData.users)
+    }
+
+    fun getGroupsRefrence(): CollectionReference {
+        return FirebaseFirestore.getInstance().collection(ConstantsData.groups)
+    }
+    fun getSingleGroupsRefrence(groupId: String): DocumentReference {
+        return FirebaseFirestore.getInstance().collection(ConstantsData.groups).document(groupId)
+    }
+    fun getChatMessageRefrence(groupId: String): CollectionReference {
+        return FirebaseFirestore.getInstance().collection(ConstantsData.chatMessage)
+            .document(groupId).collection(ConstantsData.message)
+    }
+
+    fun getChatMessageReference(groupId: String , docId:String ): DocumentReference {
+        return FirebaseFirestore.getInstance().collection(ConstantsData.chatMessage)
+            .document(groupId).collection(ConstantsData.message).document(docId)
+    }
+
+    fun getChatReference(): CollectionReference {
+        return FirebaseFirestore.getInstance().collection(ConstantsData.chatMessage)
+    }
+    fun getGroupChatReference(groupId: String): CollectionReference {
+        return FirebaseFirestore.getInstance().collection(ConstantsData.chatMessage)
+            .document(groupId)
+            .collection(ConstantsData.message)
+    }
+
+}
\ No newline at end of file
Index: app/src/main/java/com/trimad/ichat/ui/adapters/ChatGroupMessageAdapter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/trimad/ichat/ui/adapters/ChatGroupMessageAdapter.kt b/app/src/main/java/com/trimad/ichat/ui/adapters/ChatGroupMessageAdapter.kt
new file mode 100644
--- /dev/null	(date 1665467973356)
+++ b/app/src/main/java/com/trimad/ichat/ui/adapters/ChatGroupMessageAdapter.kt	(date 1665467973356)
@@ -0,0 +1,299 @@
+package com.trimad.ichat.ui.adapters
+
+import android.content.Context
+import android.graphics.Color
+import android.text.method.LinkMovementMethod
+import android.util.Log
+import android.view.LayoutInflater
+import android.view.View
+import android.view.ViewGroup
+import androidx.databinding.DataBindingUtil
+import androidx.databinding.ViewDataBinding
+import androidx.recyclerview.widget.ListAdapter
+import androidx.recyclerview.widget.RecyclerView
+import com.bumptech.glide.Glide
+import com.trimad.ichat.R
+import com.trimad.ichat.databasecontroller.Repoistory
+import com.trimad.ichat.databinding.FriendMessageItemViewBinding
+import com.trimad.ichat.databinding.InfoMessageItemLayoutBinding
+import com.trimad.ichat.databinding.UserMessageItemViewBinding
+import com.trimad.ichat.models.ChatMessage
+import com.trimad.ichat.utils.MyApp
+import com.google.firebase.Timestamp
+import java.text.SimpleDateFormat
+import java.util.*
+import kotlin.collections.ArrayList
+
+/**
+ * Created by Usman Liaqat on 25,August,2022
+ * CodeCoy,
+ * Lahore, Pakistan.
+ */
+
+/** Modified by Ali ahmad on 8,September,2022
+ * update isSeen status
+ */
+class ChatGroupMessageAdapter(
+     var context: Context,
+    private var uid: String,
+) :
+    ListAdapter<ChatMessage, ChatGroupMessageAdapter.ChatGroupMessageViewHolder>(DiffUtil()) {
+
+
+    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ChatGroupMessageViewHolder {
+
+        val inflater = LayoutInflater.from(parent.context)
+        val binding: ViewDataBinding
+        when (viewType) {
+            VIEW_TYPE_USER_MESSAGE -> {
+                binding =
+                    DataBindingUtil.inflate(
+                        inflater,
+                        R.layout.user_message_item_view,
+                        parent,
+                        false
+                    )
+                return ChatGroupMessageViewHolder(binding as UserMessageItemViewBinding)
+            }
+            VIEW_TYPE_FRIEND_MESSAGE -> {
+                binding =
+                    DataBindingUtil.inflate(
+                        inflater,
+                        R.layout.friend_message_item_view,
+                        parent,
+                        false
+                    )
+                return ChatGroupMessageViewHolder(binding as FriendMessageItemViewBinding)
+            }
+            VIEW_TYPE_INFO_MESSAGE -> {
+                binding =
+                    DataBindingUtil.inflate(
+                        inflater,
+                        R.layout.info_message_item_layout,
+                        parent,
+                        false
+                    )
+                return ChatGroupMessageViewHolder(binding as InfoMessageItemLayoutBinding)
+            }
+
+            else -> {
+                return throw IllegalArgumentException("Invalid type")
+            }
+        }
+
+    }
+
+    override fun onBindViewHolder(holder: ChatGroupMessageViewHolder, position: Int) {
+        val item = getItem(position)
+        when (holder.itemViewType) {
+            VIEW_TYPE_USER_MESSAGE -> holder.bind(item , VIEW_TYPE_USER_MESSAGE)
+            VIEW_TYPE_FRIEND_MESSAGE -> holder.bind(item , VIEW_TYPE_FRIEND_MESSAGE)
+            VIEW_TYPE_INFO_MESSAGE -> {}
+        }
+    }
+
+    override fun getItemViewType(position: Int): Int {
+        return if (currentList.size > 0) {
+
+            if (currentList[position].sender_id == uid) {
+                VIEW_TYPE_USER_MESSAGE
+            } else {
+                VIEW_TYPE_FRIEND_MESSAGE
+            }
+
+        } else {
+            VIEW_TYPE_USER_MESSAGE
+        }
+    }
+
+
+
+
+    companion object {
+        const val VIEW_TYPE_USER_MESSAGE = 0
+        const val VIEW_TYPE_FRIEND_MESSAGE = 1
+        const val VIEW_TYPE_INFO_MESSAGE = 2
+    }
+
+
+  inner class ChatGroupMessageViewHolder : RecyclerView.ViewHolder {
+        var userBinding: UserMessageItemViewBinding? = null
+        var friendBinding: FriendMessageItemViewBinding? = null
+        var infoMessageItemLayoutBinding: InfoMessageItemLayoutBinding? = null
+
+        constructor(itemView: UserMessageItemViewBinding) : super(itemView.root) {
+            userBinding = itemView
+        }
+
+        constructor(itemView: FriendMessageItemViewBinding) : super(itemView.root) {
+            friendBinding = itemView
+        }
+
+        constructor(itemView: InfoMessageItemLayoutBinding) : super(itemView.root) {
+            infoMessageItemLayoutBinding = itemView
+
+        }
+
+
+        fun bind(item: ChatMessage, VIEW_TYPE: Int){
+            var msg_type =item.message_type.toString()
+            var msg_id =item.message_id.toString()
+            var msg_receiver: Map<String, String>? = item.msg_receivers
+
+            when (VIEW_TYPE) {
+                Companion.VIEW_TYPE_USER_MESSAGE -> {
+
+                    userBinding!!.tvMsg.text = item.message_.toString()
+                    userBinding!!.tvMsg.movementMethod = LinkMovementMethod.getInstance()
+                    userBinding!!.tvMsg.setLinkTextColor(Color.BLUE)
+
+
+                    userBinding!!.tvTime.text = getTime(item.timestamp!!)
+                    userBinding!!.tvDate.text = getDate(item.timestamp!!)
+
+                    if ( msg_type == "single") {
+                        if (item.message_staus == "Sent") {
+                            userBinding!!.msgStatus.setImageDrawable(context.getDrawable(R.drawable.ic_receive))
+                        } else {
+                            userBinding!!.msgStatus.setImageDrawable(context.getDrawable(R.drawable.ic_seen))
+                        }
+                    }else{
+                        Log.v("TAG8", "group Sent :" + msg_receiver.toString())
+                        if(msg_receiver != null && msg_receiver.containsValue("Sent")){
+                            Log.v("TAG8", "group contain value Sent on sender side ")
+                            userBinding!!.msgStatus.setImageDrawable(context.getDrawable(R.drawable.ic_receive))
+                        }else{
+                            Log.v("TAG8", "group not contain value Sent on sender side ")
+                            userBinding!!.msgStatus.setImageDrawable(context.getDrawable(R.drawable.ic_seen))
+                            if(item.message_staus == "Sent") {
+                                Repoistory.updateSingleSeenReceiverStatus(
+                                    groupId = item.group_id.toString(),
+                                    docId = item.message_id.toString()
+                                )
+                            }
+                        }
+                    }
+
+                    Glide.with(context)
+                        .load(MyApp.userModel!!.user_image)
+                        .error(R.drawable.no_image)
+                        .into(userBinding!!.ivUser)
+
+//                if (mMessages[position].chat_sender_userModel?.user_image?.isNotEmpty() == true) {
+//                    Glide.with(mContext)
+//                        .load(mMessages[position].chat_sender_userModel?.user_image)
+//                        .error(R.drawable.no_image)
+//                        .into(userBinding.ivUser)
+//                }
+                }
+                VIEW_TYPE_FRIEND_MESSAGE -> {
+                    friendBinding!!.tvMsg.text = item.message_.toString()
+                    friendBinding!!.tvMsg.movementMethod = LinkMovementMethod.getInstance()
+                    friendBinding!!.tvMsg.setLinkTextColor(Color.BLUE)
+                    friendBinding!!.tvTime.text = getTime(item.timestamp!!)
+                    friendBinding!!.tvDate.text = getDate(item.timestamp!!)
+
+                    if (msg_type == "group") {
+                        Log.v("TAG8", "group receive :" + msg_receiver.toString())
+                        // check whether group  message is receiving by group member or not?
+                        if(msg_receiver != null && msg_receiver.containsKey(uid)){
+                            Log.v("TAG8", "group contain key msg id:"+msg_id)
+                            if(msg_receiver.getValue(uid) == "Sent"){
+                                Log.v("TAG8", "group contain key value Sent :")
+
+                                Repoistory.updateGroupSeenReceiverStatus(
+                                    groupId = item.group_id.toString(),
+                                    docId = item.message_id.toString(),
+                                    rid = uid
+                                )
+                            }
+
+                        }
+                        friendBinding!!.tvName.visibility = View.VISIBLE
+                        friendBinding!!.tvName.text = item.sender_name.toString()
+
+                        if(msg_receiver != null && msg_receiver.containsValue("Sent")){ }else{
+                            // for updating status of msg over document
+                            if(item.message_staus == "Sent") {
+                                Repoistory.updateSingleSeenReceiverStatus(
+                                    groupId = item.group_id.toString(),
+                                    docId = item.message_id.toString()
+                                )
+                            }
+                        }
+
+
+                    }else{
+                        // check whether P2P message is receiving receiver or not?
+                        if(item.sender_id.toString() != uid) {
+                            // if yes
+                            Repoistory.updateSingleSeenReceiverStatus(
+                                groupId = item.group_id.toString(),
+                                docId = item.message_id.toString()
+                            )
+                        }
+                    }
+
+                    Glide.with(context)
+                        .load(item.sender_image)
+                        .error(R.drawable.no_image)
+                        .into(friendBinding!!.ivUser)
+
+
+
+//
+//                if (mMessages[position].chat_sender_userModel?.user_image?.isNotEmpty() == true) {
+//
+//                    Glide.with(mContext)
+//                        .load(mMessages[position].chat_sender_userModel?.user_image)
+//                        .error(R.drawable.no_image)
+//                        .into(friendBinding.ivUser)
+//                }
+                }
+                VIEW_TYPE_INFO_MESSAGE -> {
+
+                }
+            }
+
+
+
+
+        }
+
+        private fun getDate(timestamp: Timestamp): String? {
+            val date: Date = timestamp.toDate()
+            val df =
+                SimpleDateFormat("dd/MM/yyyy", Locale.getDefault())
+            return df.format(date)
+        }
+
+      private fun getTime(timestamp: Timestamp): String? {
+          val date: Date = timestamp.toDate()
+          val df =
+              SimpleDateFormat("hh:mm a", Locale.getDefault())
+          return df.format(date)
+      }
+     private fun getDateTime(timestamp: Timestamp): String? {
+            val date: Date = timestamp.toDate()
+            val df =
+                SimpleDateFormat("dd/MM/yyyy hh:mm a", Locale.getDefault())
+            return df.format(date)
+        }
+
+    }
+
+    class DiffUtil : androidx.recyclerview.widget.DiffUtil.ItemCallback<ChatMessage>(){
+        override fun areItemsTheSame(oldItem: ChatMessage, newItem: ChatMessage): Boolean {
+            return oldItem.message_id == newItem.message_id
+        }
+
+        override fun areContentsTheSame(oldItem: ChatMessage, newItem: ChatMessage): Boolean {
+            return  oldItem == newItem
+        }
+
+    }
+
+
+
+}
+
Index: app/src/main/java/com/trimad/ichat/models/UserModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/trimad/ichat/models/UserModel.kt b/app/src/main/java/com/trimad/ichat/models/UserModel.kt
new file mode 100644
--- /dev/null	(date 1674049591063)
+++ b/app/src/main/java/com/trimad/ichat/models/UserModel.kt	(date 1674049591063)
@@ -0,0 +1,24 @@
+package com.trimad.ichat.models
+
+import com.google.firebase.Timestamp;
+
+class UserModel (
+    val user_id: String? = null,
+    val doc_id: String? = null,
+    val user_name: String? = null,
+    val name1: String? = null,
+    val name2: String? = null,
+    val image1: String? = null,
+    val image2: String? = null,
+    val user_bio: String? = null,
+    val user_email: String? = null,
+    val user_image: String? = null,
+    val user_token: String? = null,
+    val online: Boolean? = null,
+    val user_active: Boolean? = null,
+    val last_seen: Timestamp? = null,
+    val organization_id:String?=null,
+    val user_bussiness:String?=null,
+    val user_province:String?=null,
+    var msg_count:Int=0,
+)
Index: app/src/main/java/com/trimad/ichat/databasecontroller/DatabaseUploader.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/trimad/ichat/databasecontroller/DatabaseUploader.kt b/app/src/main/java/com/trimad/ichat/databasecontroller/DatabaseUploader.kt
new file mode 100644
--- /dev/null	(date 1663689046000)
+++ b/app/src/main/java/com/trimad/ichat/databasecontroller/DatabaseUploader.kt	(date 1663689046000)
@@ -0,0 +1,82 @@
+package com.trimad.ichat.databasecontroller
+
+import com.trimad.ichat.listeners.OnUserDataSaveListener
+import com.google.firebase.firestore.SetOptions
+import com.trimad.ichat.models.GroupModel
+import com.google.firebase.Timestamp
+import java.util.HashMap
+
+class DatabaseUploader {
+
+    companion object {
+        private const val TAG = "DatabaseUploader"
+
+        fun saveGroup(group: GroupModel, onUserDataSaveListener: OnUserDataSaveListener) {
+            DatabaseAddresses.getSingleGroupsRefrence(group.group_id.toString())
+                .set(group, SetOptions.merge())
+                .addOnCompleteListener { task ->
+                    if (task.isSuccessful) {
+                        onUserDataSaveListener.onTaskSuccess()
+                    }
+                }
+                .addOnFailureListener { e -> onUserDataSaveListener.onTaskFailure(e.localizedMessage) }
+        }
+
+        fun updateToken(
+            userId: String?,
+            token: String,
+            last_seen: Timestamp,
+            isOnline: Boolean,
+            onUserDataSaveListener: OnUserDataSaveListener
+        )
+        {
+            val docData: MutableMap<String, Any> = HashMap()
+            docData["user_token"] = token
+            docData["last_seen"] = last_seen
+            docData["online"] = isOnline
+            DatabaseAddresses.getSingleUserReference(userId)
+                .set(docData, SetOptions.merge()).addOnCompleteListener { task ->
+                    if (task.isSuccessful) {
+                        onUserDataSaveListener.onTaskSuccess()
+                    }
+                }
+                .addOnFailureListener { e -> onUserDataSaveListener.onTaskFailure(e.localizedMessage) }
+        }
+
+
+        fun updateToken(
+            userId: String?,
+            token: String,
+            last_seen: Timestamp,
+            isOnline: Boolean,
+        )
+        {
+            val docData: MutableMap<String, Any> = HashMap()
+            docData["user_token"] = token
+            docData["last_seen"] = last_seen
+            docData["online"] = isOnline
+            DatabaseAddresses.getSingleUserReference(userId)
+                .set(docData, SetOptions.merge())
+        }
+
+
+        fun updateStatus(
+            userId: String?,
+            last_seen: Timestamp,
+            isOnline: Boolean,
+            onUserDataSaveListener: OnUserDataSaveListener
+        ) {
+            val docData: MutableMap<String, Any> = HashMap()
+            docData["last_seen"] = last_seen
+            docData["online"] = isOnline
+            DatabaseAddresses.getSingleUserReference(userId)
+                .set(docData, SetOptions.merge()).addOnCompleteListener { task ->
+                    if (task.isSuccessful) {
+                        onUserDataSaveListener.onTaskSuccess()
+                    }
+                }
+                .addOnFailureListener { e -> onUserDataSaveListener.onTaskFailure(e.localizedMessage) }
+        }
+
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/trimad/ichat/models/APIResponse.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/trimad/ichat/models/APIResponse.kt b/app/src/main/java/com/trimad/ichat/models/APIResponse.kt
new file mode 100644
--- /dev/null	(date 1665395047506)
+++ b/app/src/main/java/com/trimad/ichat/models/APIResponse.kt	(date 1665395047506)
@@ -0,0 +1,8 @@
+package com.trimad.ichat.models
+
+sealed class APIResponse{
+    data class onTaskSuccess(val group_list: ArrayList<GroupModel>? ,val user_list: ArrayList<HomeChatModel>? ,val chat_list: ArrayList<ChatMessage>?, val myGroupList:ArrayList<String>?) : APIResponse()
+    data class onTaskError(val message: String) : APIResponse()
+    object onTaskEmpty : APIResponse()
+    object Loading : APIResponse()
+}
Index: app/src/main/java/com/trimad/ichat/ui/activities/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/trimad/ichat/ui/activities/MainActivity.kt b/app/src/main/java/com/trimad/ichat/ui/activities/MainActivity.kt
new file mode 100644
--- /dev/null	(date 1666080115144)
+++ b/app/src/main/java/com/trimad/ichat/ui/activities/MainActivity.kt	(date 1666080115144)
@@ -0,0 +1,495 @@
+package com.trimad.ichat.ui.activities
+
+import android.content.Intent
+import android.os.Bundle
+import android.util.Log
+import android.view.Menu
+import android.view.MenuItem
+import android.view.View
+import android.widget.Toast
+import androidx.appcompat.app.AppCompatActivity
+import androidx.databinding.DataBindingUtil
+import androidx.navigation.NavController
+import androidx.navigation.fragment.NavHostFragment
+import androidx.navigation.fragment.findNavController
+import com.trimad.ichat.R
+import com.trimad.ichat.databasecontroller.DatabaseUploader
+import com.trimad.ichat.databasecontroller.Repoistory
+import com.trimad.ichat.databinding.ActivityMainBinding
+import com.trimad.ichat.listeners.OnGetUserDataListener
+import com.trimad.ichat.listeners.OnUserDataSaveListener
+import com.trimad.ichat.models.UserModel
+import com.trimad.ichat.utils.MyApp
+import com.trimad.ichat.utils.Utils
+import com.google.android.gms.tasks.OnCompleteListener
+import com.google.firebase.FirebaseApp
+import com.google.firebase.Timestamp
+import com.google.firebase.auth.FirebaseAuth
+import com.google.firebase.firestore.SetOptions
+import com.google.firebase.messaging.FirebaseMessaging
+import com.kaopiz.kprogresshud.KProgressHUD
+import com.trimad.ichat.databasecontroller.DatabaseAddresses
+import com.trimad.ichat.models.HomeChatModel
+import com.trimad.ichat.utils.SavedPreference
+import gun0912.tedimagepicker.util.ToastUtil
+import java.util.*
+
+
+class MainActivity : AppCompatActivity() {
+
+    private val TAG = "MainActivity"
+    private lateinit var mBinding: ActivityMainBinding
+    private var navController: NavController? = null
+    private var mAuth: FirebaseAuth? = null
+    var tokenn: String? = null
+    private var progressHUD: KProgressHUD? = null
+     var isToastShow = false
+    //  var userData:MutableLiveData<Boolean> = MutableLiveData(false)
+
+
+    override fun onCreate(savedInstanceState: Bundle?) {
+        super.onCreate(savedInstanceState)
+        mBinding = DataBindingUtil.setContentView(this, R.layout.activity_main)
+        progressHUD = Utils.getProgressDialog(this@MainActivity, getString(R.string.loading))
+
+        val navHostFragment =
+            supportFragmentManager.findFragmentById(R.id.nav_host_fragment) as NavHostFragment?
+        navController = navHostFragment!!.navController
+
+        navController!!.addOnDestinationChangedListener { _, destination, _ ->
+            if (
+                destination.id == R.id.loginFragment ||
+                destination.id == R.id.newGroupFragment ||
+                destination.id == R.id.groupDetailsFragment ||
+                destination.id == R.id.addParticipentsFragment ||
+                destination.id == R.id.liveGroupChatFragment ||
+                destination.id == R.id.profileFragment ||
+                destination.id == R.id.singleLiveChatFragment ||
+                destination.id == R.id.userProfile ||
+                destination.id == R.id.detailsNewGroupFragment ||
+                destination.id == R.id.subscriptionStatus
+
+            ) {
+                mBinding.toolbar.visibility = View.GONE
+            } else {
+                mBinding.toolbar.visibility = View.VISIBLE
+            }
+        }
+
+        mBinding.toolbar.title = getString(R.string.app_name)
+        (this).setSupportActionBar(mBinding.toolbar)
+
+        mAuth = FirebaseAuth.getInstance()
+        getToken()
+
+    }
+
+
+    override fun onCreateOptionsMenu(menu: Menu?): Boolean {
+        // Inflate the menu; this adds items to the action bar if it is present.
+        menuInflater.inflate(R.menu.home_menu, menu)
+        return true
+    }
+
+    override fun onOptionsItemSelected(item: MenuItem): Boolean {
+        // Handle item selection
+        return when (item.itemId) {
+            R.id.nav_signout -> {
+
+                val date = Date()
+                val timestamp = Timestamp(date)
+
+                DatabaseUploader.updateStatus(
+                    mAuth!!.uid,
+                    timestamp,
+                    false,
+                    object : OnUserDataSaveListener {
+                        override fun onTaskSuccess() {
+                            Log.i(TAG, "onTaskSuccess: ")
+                            mAuth!!.signOut()
+                            MyApp.userModel = null
+                            SavedPreference.clearPreferences(this@MainActivity)
+                            //       userData.postValue(false)
+                            //   Utils.clearUserProfile(this@MainActivity)
+                            startActivity(Intent(this@MainActivity, MainActivity::class.java))
+                            finish()
+                        }
+
+                        override fun onTaskFailure(message: String?) {
+                            Log.i(TAG, "onTaskFailure: message:$message")
+                        }
+
+
+                    })
+
+
+                true
+            }
+            R.id.nav_profile -> {
+                navController?.navigate(R.id.action_homeFragment_to_userProfile)
+
+                true
+            }
+            else -> super.onOptionsItemSelected(item)
+        }
+    }
+
+    override fun onPause() {
+        super.onPause()
+        saveStatus(false)
+    }
+
+    override fun onResume() {
+        super.onResume()
+        saveStatus(true)
+    }
+
+    private fun saveStatus(status: Boolean) {
+
+        val mAuth: FirebaseAuth = FirebaseAuth.getInstance()
+
+        val date = Date()
+        val timestamp = Timestamp(date)
+
+        if (mAuth.currentUser != null) {
+            DatabaseUploader.updateStatus(
+                mAuth.uid,
+                timestamp,
+                status,
+                object : OnUserDataSaveListener {
+                    override fun onTaskSuccess() {
+                        Log.i(TAG, "onTaskSuccess: ")
+                    }
+
+                    override fun onTaskFailure(message: String?) {
+                        Log.i(TAG, "onTaskFailure: message:$message")
+                    }
+
+
+                })
+
+        }
+
+
+    }
+
+    fun getToken(): String? {
+        FirebaseMessaging.getInstance().token
+            .addOnCompleteListener(OnCompleteListener { task ->
+                if (!task.isSuccessful) {
+                    Log.i(
+                        "TAG7",
+                        "Fetching FCM registration token failed",
+                        task.exception
+                    )
+                    return@OnCompleteListener
+                }
+
+                // Get new FCM registration token
+                tokenn = task.result
+                Log.i("TAG7", "onCreate: token:$tokenn")
+            })
+
+        return tokenn
+    }
+
+    fun getProfile(id: String) {
+        Repoistory.getUser(
+            id,
+            object : OnGetUserDataListener {
+                override fun onTaskSuccess(userModel: UserModel?) {
+                    if (userModel != null) {
+                        MyApp.userModel = userModel
+                        if(MyApp.userModel!!.user_active == false){
+                            FirebaseAuth.getInstance().signOut()
+                            MyApp.userModel = null
+                            //       userData.postValue(false)
+                            //   Utils.clearUserProfile(this@MainActivity)
+                            startActivity(Intent(this@MainActivity, MainActivity::class.java))
+                            finishAffinity()
+                        }
+
+//                        if (MyApp.userModel!!.user_active == true) {
+//                            Log.v(
+//                                "TAG11",
+//                                "Main Activity active true"
+//                            )
+//                            if(FirebaseAuth.getInstance().currentUser != null)
+//                            navController!!.navigate(R.id.action_global_homeFragment)
+//                        }else{
+//                           // ToastUtil.showToast("Admin Blocked you!")
+//                            // for blocking notifications
+//                            if(MyApp.userModel!!.user_token.toString().isNotEmpty()) {
+//                                updateUserDBToEmptyToken(MyApp.userModel!!.user_id.toString())
+//                            }
+//                            if(!isToastShow){
+//                                isToastShow = true
+//                                Toast.makeText(this@MainActivity,"Admin Blocked you!",Toast.LENGTH_SHORT).show()
+//                            }
+//
+//                        }
+
+                        //   userData.postValue(true)
+                    }
+                    Log.v(
+                        "TAG7",
+                        "Main Activity get Profile id:${userModel!!.user_id}  org_id:${userModel!!.organization_id}"
+                    )
+//                        Toast.makeText(this@MainActivity,"Success",Toast.LENGTH_LONG)
+//                            .show()
+
+                    //       Utils.saveUserProfile(this@MainActivity,userModel)
+                    //      Utils.saveUserProfile2(this@MainActivity,userModel)
+                }
+
+                override fun onTaskError(message: String?) {
+                   // progressHUD!!.dismiss()
+                    Toast.makeText(
+                        this@MainActivity, message,
+                        Toast.LENGTH_SHORT
+                    ).show()
+                    Log.v("TAG7", "Main Activity get Profile :${message.toString()}")
+                }
+
+                override fun onTaskEmpty() {
+                 //   progressHUD!!.dismiss()
+                    Toast.makeText(
+                        this@MainActivity, getString(R.string.no_user_found),
+                        Toast.LENGTH_SHORT
+                    ).show()
+                    Log.v("TAG7", "Main Activity get Profile :onTaskEmpty")
+                }
+
+            }
+        )
+    }
+
+    fun getProfile2(id: String) {
+        if(!progressHUD!!.isShowing)
+            progressHUD!!.show()
+        Repoistory.getUser2(
+            id,
+            object : OnGetUserDataListener {
+                override fun onTaskSuccess(userModel: UserModel?) {
+                    if(progressHUD!!.isShowing)
+                        progressHUD!!.dismiss()
+
+                    if (userModel != null) {
+                        MyApp.userModel = userModel
+                        if (MyApp.userModel!!.user_active == true) {
+                            Log.v(
+                                "TAG11",
+                                "Main Activity active true"
+                            )
+                            if(FirebaseAuth.getInstance().currentUser != null) {
+                                updateUserDB(FirebaseAuth.getInstance().currentUser!!.uid)
+                                getProfile(FirebaseAuth.getInstance().currentUser!!.uid)
+                                navController!!.navigate(R.id.action_global_homeFragment)
+                            }
+                        }else{
+                            // ToastUtil.showToast("Admin Blocked you!")
+                            // for blocking notifications
+                            if(FirebaseAuth.getInstance().currentUser != null) {
+                                FirebaseAuth.getInstance().signOut()
+                            }
+                            if(MyApp.userModel!!.user_token.toString().isNotEmpty()) {
+                                updateUserDBToEmptyToken(MyApp.userModel!!.user_id.toString())
+                            }
+                            if(!isToastShow){
+                                isToastShow = true
+                                Toast.makeText(this@MainActivity,"Admin Blocked you!",Toast.LENGTH_SHORT).show()
+                            }
+
+                        }
+
+                        //   userData.postValue(true)
+                    }
+                    Log.v(
+                        "TAG7",
+                        "Main Activity get Profile id:${userModel!!.user_id}  org_id:${userModel!!.organization_id}"
+                    )
+//                        Toast.makeText(this@MainActivity,"Success",Toast.LENGTH_LONG)
+//                            .show()
+
+                    //       Utils.saveUserProfile(this@MainActivity,userModel)
+                    //      Utils.saveUserProfile2(this@MainActivity,userModel)
+                }
+
+                override fun onTaskError(message: String?) {
+                    if(progressHUD!!.isShowing)
+                        progressHUD!!.dismiss()
+
+                    Toast.makeText(
+                        this@MainActivity, message,
+                        Toast.LENGTH_SHORT
+                    ).show()
+                    Log.v("TAG7", "Main Activity get Profile :${message.toString()}")
+                }
+
+                override fun onTaskEmpty() {
+                    if(progressHUD!!.isShowing)
+                        progressHUD!!.dismiss()
+
+                    Toast.makeText(
+                        this@MainActivity, getString(R.string.no_user_found),
+                        Toast.LENGTH_SHORT
+                    ).show()
+                    Log.v("TAG7", "Main Activity get Profile :onTaskEmpty")
+                }
+
+            }
+        )
+    }
+
+
+
+    fun updateUserDB(id: String?) {
+        if(id != null) {
+            val date = Date()
+            val timestamp = Timestamp(date)
+            if (tokenn == null) {
+                FirebaseMessaging.getInstance().token
+                    .addOnCompleteListener(OnCompleteListener { task ->
+                        if (!task.isSuccessful) {
+                            Log.i(
+                                "TAG7",
+                                "Fetching FCM registration token failed",
+                                task.exception
+                            )
+                            return@OnCompleteListener
+                        }
+
+                        // Get new FCM registration token
+                        tokenn = task.result
+
+
+                        //    Utils.saveUserProfile2(mContext , userModel)
+                        Log.i(
+                            "TAG7",
+                            "Main Activity update User: id:$id   token:${tokenn.toString()}"
+                        )
+
+                        DatabaseUploader.updateToken(
+                            id,
+                            tokenn.toString(),
+                            timestamp,
+                            true,
+                        )
+                        Log.i("TAG7", "onCreate: token:$tokenn")
+                    })
+            } else {
+
+                //    Utils.saveUserProfile2(mContext , userModel)
+                Log.i("TAG7", "Main Activity update User: id:$id   token:${tokenn.toString()}")
+
+                DatabaseUploader.updateToken(
+                    id,
+                    tokenn.toString(),
+                    timestamp,
+                    true,
+                )
+            }
+        }
+    }
+
+    fun updateUserDBToEmptyToken(id: String?) {
+        if(id != null) {
+            val date = Date()
+            val timestamp = Timestamp(date)
+            //    Utils.saveUserProfile2(mContext , userModel)
+            Log.i("TAG7", "Main Activity update User: id:$id   token:${tokenn.toString()}")
+
+
+            val docData: MutableMap<String, Any> = HashMap()
+            docData["user_token"] = ""
+            docData["last_seen"] = timestamp
+            docData["online"] = false
+            DatabaseAddresses.getSingleUserReference(id)
+                .set(docData, SetOptions.merge()).addOnSuccessListener {
+                    //   FirebaseAuth.getInstance().signOut()
+                }
+        }
+
+    }
+
+    fun updateChatSeenStatus(userModel: HomeChatModel, uid: String) {
+              for((i,msg) in userModel.msg_count.withIndex()){
+                  Log.v("TAG666","403")
+                  if (msg.message_type == "group") {
+                      var msg_receiver: Map<String, String>? = msg.msg_receivers
+                      Log.v("TAG8", "group receive :" + msg_receiver.toString())
+                      // check whether group  message is receiving by group member or not?
+                      if(msg_receiver != null && msg_receiver.containsKey(uid)){
+                     //     Log.v("TAG8", "group contain key msg id:"+msg_id)
+                          if(msg_receiver.getValue(uid) == "Sent"){
+                              Log.v("TAG8", "group contain key value Sent :")
+                              Log.v("TAG666","412")
+                              msg.msg_receivers!![uid] ="Seen"
+
+                              Repoistory.updateGroupSeenReceiverStatus(
+                                  groupId = msg.group_id.toString(),
+                                  docId = msg.message_id.toString(),
+                                  rid = uid
+                              )
+                          }
+
+                      }
+
+
+                      if(msg_receiver != null && msg_receiver.containsValue("Sent")){ }else{
+                          // for updating status of msg over document
+                          if(msg.message_staus == "Sent") {
+                              Log.v("TAG666","426")
+                              Repoistory.updateSingleSeenReceiverStatus(
+                                  groupId = msg.group_id.toString(),
+                                  docId = msg.message_id.toString()
+                              )
+                          }
+                      }
+
+
+                  }else{
+                      // check whether P2P message is receiving receiver or not?
+                      if(msg.sender_id.toString() != uid) {
+                          Log.v("TAG666","438")
+                          // if yes
+                          if(msg.message_staus == "Sent") {
+                              Log.v("TAG666","438")
+                              Repoistory.updateSingleSeenReceiverStatus(
+                                  groupId = msg.group_id.toString(),
+                                  docId = msg.message_id.toString()
+                              )
+                          }
+                      }
+                  }
+              }
+    }
+
+    fun updatePreferences() {
+        DatabaseAddresses.getSingleUserReference(FirebaseAuth.getInstance().uid)
+            .get()
+            .addOnSuccessListener {
+                if (it.exists()) {
+                    var userModel: UserModel = it.toObject(UserModel::class.java)!!
+                    if (userModel!!.user_active == true) {
+                        MyApp.userModel = userModel
+                        SavedPreference.setUserData(this,userModel)
+                        updateUserDB(FirebaseAuth.getInstance().uid.toString())
+                    }else{
+                        FirebaseAuth.getInstance().signOut()
+                        SavedPreference.clearPreferences(this)
+                        updateUserDBToEmptyToken(FirebaseAuth.getInstance().uid.toString())
+                        Toast.makeText(this,"Admin Blocked you!", Toast.LENGTH_SHORT).show()
+                    }
+                } else {
+                 //   progressHUD!!.dismiss()
+                }
+            }
+            .addOnFailureListener {
+                ToastUtil.showToast(it.localizedMessage)
+           //     progressHUD!!.dismiss()
+            }
+    }
+
+
+}
\ No newline at end of file
Index: app/src/main/res/values/strings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/values/strings.xml b/app/src/main/res/values/strings.xml
new file mode 100644
--- /dev/null	(date 1674049230026)
+++ b/app/src/main/res/values/strings.xml	(date 1674049230026)
@@ -0,0 +1,49 @@
+<resources>
+    <string name="app_name">ICHAT Business</string>
+    <!-- TODO: Remove or change this placeholder text -->
+    <string name="hello_blank_fragment">Hello blank fragment</string>
+    <string name="username">Username</string>
+    <string name="password">Password</string>
+    <string name="log_in">Log In</string>
+    <string name="chats">Chats</string>
+    <string name="groups">Groups</string>
+    <string name="organizations">All Users</string>
+    <string name="login">Login</string>
+    <string name="search">Search</string>
+    <string name="more">More</string>
+    <string name="new_group">New Group</string>
+    <string name="add_subject">Add Subject</string>
+    <string name="type_group_subject_here">Type group subject here .....</string>
+    <string name="provide_a_group_subject_and_optional_group_icon">Provide a group subject and group icon</string>
+    <string name="participants">Participants:</string>
+    <string name="mute_notifications">Mute Notifications</string>
+    <string name="add_participants">Add Participants</string>
+    <string name="group_admin">Group Admin</string>
+    <string name="bio">Bio</string>
+    <string name="email">Email</string>
+    <string name="start_chat">Start Chat</string>
+    <string name="online">Online</string>
+    <string name="message">Message</string>
+    <string name="loading">Loading</string>
+    <string name="autenticate_crediationals">Authenticating</string>
+    <string name="no_user_found">No user found</string>
+    <string name="required">Required</string>
+    <string name="signout">Signout</string>
+    <string name="no_user_selected">No user selected</string>
+    <string name="of">of</string>
+    <string name="selected">selected</string>
+    <string name="please_select_user">Please select user before proceed</string>
+    <string name="please_add_group_name">Please add group name</string>
+    <string name="please_wait">Please Wait...</string>
+    <string name="data_saved_successfully">Data saved successfully</string>
+    <string name="no_data_found">No Data Found</string>
+    <string name="data_update_successfully">Update Successfully</string>
+    <string name="user_not_login">User is not login</string>
+    <string name="please_write_message">Please write message before send</string>
+    <string name="no_chat_found">No Chat found</string>
+    <string name="search_by_name">Search by name</string>
+    <string name="update_profile">Update Profile</string>
+    <string name="terms_amp_conditions"><u><![CDATA[Terms & Conditions]]></u></string>
+    <string name="region">Region</string>
+    <string name="position">Position</string>
+</resources>
\ No newline at end of file
Index: app/src/main/res/drawable/ic_send.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/drawable/ic_send.xml b/app/src/main/res/drawable/ic_send.xml
new file mode 100644
--- /dev/null	(date 1662958774000)
+++ b/app/src/main/res/drawable/ic_send.xml	(date 1662958774000)
@@ -0,0 +1,7 @@
+<vector android:height="18dp" android:viewportHeight="6"
+    android:viewportWidth="8" android:width="24dp" xmlns:android="http://schemas.android.com/apk/res/android">
+    <path android:fillColor="#00000000"
+        android:pathData="M6.7778,1L2.8056,4.9722L1,3.1667"
+        android:strokeColor="#ffffff" android:strokeLineCap="round"
+        android:strokeLineJoin="round" android:strokeWidth="0.5"/>
+</vector>
Index: app/src/main/java/com/trimad/ichat/databasecontroller/Repoistory.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/trimad/ichat/databasecontroller/Repoistory.kt b/app/src/main/java/com/trimad/ichat/databasecontroller/Repoistory.kt
new file mode 100644
--- /dev/null	(date 1665463699947)
+++ b/app/src/main/java/com/trimad/ichat/databasecontroller/Repoistory.kt	(date 1665463699947)
@@ -0,0 +1,627 @@
+package com.trimad.ichat.databasecontroller
+
+import android.content.Context
+import android.net.Uri
+import android.util.Log
+import androidx.lifecycle.MutableLiveData
+import com.trimad.ichat.listeners.*
+import com.trimad.ichat.models.*
+import com.google.firebase.Timestamp
+import com.google.firebase.firestore.*
+import com.google.firebase.storage.FirebaseStorage
+
+
+/**
+ * Created by Usman Liaqat on 17,August,2022
+ * CodeCoy,
+ * Lahore, Pakistan.
+ */
+object Repoistory {
+
+
+    var groupResponse = MutableLiveData<APIResponse>()
+    var chatHomeResponse = MutableLiveData<APIResponse>()
+    var chatUnSeenResponse = MutableLiveData<APIResponse>()
+
+
+    fun getUser(userId: String?, onGetUserDataListener: OnGetUserDataListener) {
+        DatabaseAddresses.getSingleUserReference(userId)
+            .get()
+            .addOnSuccessListener{
+                if (it.exists()) {
+                    onGetUserDataListener.onTaskSuccess(it.toObject(UserModel::class.java)!!)
+                 //   Log.d("TAG", "Current data: ${snapshot.data}")
+                } else {
+                    onGetUserDataListener.onTaskEmpty()
+               //     Log.d("TAG", "Current data: null")
+                }
+            }
+            .addOnFailureListener { e ->
+                onGetUserDataListener.onTaskError(e.message)
+            }
+    }
+
+
+    fun getUser2(userId: String?, onGetUserDataListener: OnGetUserDataListener) {
+        DatabaseAddresses.getSingleUserReference(userId)
+            .get()
+            .addOnSuccessListener {
+                if (it.exists()) {
+
+                    var userModel: UserModel = it.toObject(UserModel::class.java)!!
+                    onGetUserDataListener.onTaskSuccess(it.toObject(UserModel::class.java)!!)
+                    //    Log.d("TAG", "Current data: ${snapshot.data}")
+                } else {
+                    onGetUserDataListener.onTaskEmpty()
+                    Log.d("TAG", "Current data: null")
+                }
+            }
+            .addOnFailureListener {
+                onGetUserDataListener.onTaskError(it.message)
+            }
+    }
+
+    fun getSimpleUser(userId: String?, onGetUserDataListener: OnGetUserDataListener) {
+
+        DatabaseAddresses.getSingleUserReference(userId)
+            .get()
+            .addOnSuccessListener {
+                if (it != null && it.exists()) {
+
+                    val userModel: UserModel = it.toObject(UserModel::class.java)!!
+                    onGetUserDataListener.onTaskSuccess(userModel)
+                    Log.d("TAG", "Current data: ${it.data}")
+                } else {
+                    onGetUserDataListener.onTaskEmpty()
+                    Log.d("TAG", "Current data: null")
+                }
+            }.addOnFailureListener {
+                onGetUserDataListener.onTaskError(it.message)
+            }
+
+    }
+
+    fun getUserByOrganization(org_id: String?, onGetUserDataListener: OnGetSameOrgUserListener) {
+        Log.i("TAGTAG", "getUserByOrganization: " + org_id)
+        DatabaseAddresses.getUsersReference()
+            .whereEqualTo("organization_id", org_id.toString())
+            .get()
+            .addOnSuccessListener { documents ->
+                if (!documents.isEmpty) {
+                    val user_list = ArrayList<UserModel>()
+                    for (document in documents) {
+                        val userModel = document.toObject(UserModel::class.java)
+                        user_list.add(userModel)
+
+                        Log.i("TAGTAG", "${document.id} => ${document.data}")
+                    }
+                    onGetUserDataListener.onTaskSuccess(user_list)
+                } else {
+                    onGetUserDataListener.onTaskEmpty()
+                }
+
+            }
+            .addOnFailureListener { exception ->
+                onGetUserDataListener.onTaskError(exception.message)
+                Log.i("TAGTAG", "Error getting documents: ", exception)
+            }
+    }
+
+    fun getLiveUserByOrganization(
+        userId: String,
+        org_id: String?,
+        context: Context,
+        onGetUserDataListener: OnGetSameOrgUserListener
+    ) {
+        if (org_id == null || org_id == "") {
+            getSingleUser(userId, context, onGetUserDataListener)
+
+        } else {
+            DatabaseAddresses.getUsersReference()
+                .whereEqualTo("organization_id", org_id.toString())
+                .whereEqualTo("user_active", true)
+                .get()
+                .addOnSuccessListener {  value ->
+
+                    val user_list: ArrayList<UserModel> = ArrayList<UserModel>()
+                    Log.i("TAG9", "getUserByOrganization: " + value?.size())
+                    Log.i("TAG9", "getUserByid: " + org_id)
+
+                    for (doc in value!!) {
+                        val userModel: UserModel = doc.toObject(UserModel::class.java)
+                        if (doc.id != userId)
+                            user_list.add(userModel)
+                    }
+                    if (user_list.size > 0) {
+                        onGetUserDataListener.onTaskSuccess(user_list)
+                    } else {
+                        onGetUserDataListener.onTaskEmpty()
+                    }
+                }.addOnFailureListener { e ->
+                    onGetUserDataListener.onTaskError(e.localizedMessage)
+                }
+        }
+
+
+    }
+
+    fun getSingleUser(
+        userId: String,
+        context: Context,
+        onGetUserDataListener: OnGetSameOrgUserListener
+    ) {
+        DatabaseAddresses.getSingleUserReference(userId)
+            .get()
+            .addOnSuccessListener{ snapshot ->
+
+                if (snapshot != null && snapshot.exists()) {
+
+                    val userModel: UserModel = snapshot.toObject(UserModel::class.java)!!
+
+                    //  Utils.saveUserProfile(context,userModel)
+                    // Utils.saveUserProfile2(context,userModel)
+                    getLiveUserByOrganization(
+                        userId,
+                        userModel.organization_id,
+                        context,
+                        onGetUserDataListener
+                    )
+                    Log.d("TAG9", "Current data: ${snapshot.data}")
+                } else {
+                    onGetUserDataListener.onTaskEmpty()
+                    Log.d("TAG9", "Current data: null")
+                }
+            }
+
+    }
+
+
+    // to get all chat of current user
+    fun getUserChats(userId: String?, name: String, myGroupList: ArrayList<String>) {
+        chatHomeResponse.postValue(APIResponse.Loading)
+        DatabaseAddresses.getChatReference()
+            .orderBy("timestamp", Query.Direction.DESCENDING)
+            .addSnapshotListener(EventListener<QuerySnapshot?> { value, e ->
+                if (e != null) {
+                    Log.i("TAG6", "Listen failed.", e)
+                    chatHomeResponse.postValue(APIResponse.onTaskError(e.localizedMessage))
+                    return@EventListener
+                }
+
+                val user_list: ArrayList<HomeChatModel> = ArrayList()
+                Log.i("TAG6", "getUserChats: " + value?.size())
+
+                for (doc in value!!) {
+//                    val userModel: UserModel = doc.toObject(UserModel::class.java)
+//                    user_list.add(userModel)
+                    if (doc.get("type").toString() == "single") {
+                        Log.i("TAG6", "getUserChats: single : 129   id:${doc.id}")
+
+                        if (doc.get("receiver_id")
+                                .toString() == userId || doc.get("sender_id").toString() == userId
+                        ) {
+                            val userModel = HomeChatModel(
+                                user_id = if (doc.get("receiver_id")
+                                        .toString() == userId
+                                ) doc.get("sender_id").toString() else doc.get("receiver_id")
+                                    .toString(),
+                                user_name = if (doc.get("user_one_name") == name) doc.get("user_two_name")
+                                    .toString() else doc.get("user_one_name").toString(),
+                                user_bio = doc.get("message").toString(),
+                                user_image = if (doc.get("user_one_name") == name) doc.get("user_two_image")
+                                    .toString() else doc.get("user_one_image").toString(),
+                                user_token = doc.get("type").toString(),
+                                last_seen = doc.get("timestamp") as Timestamp,
+                                doc_id = doc.id
+                            )
+                            user_list.add(userModel)
+                        }
+                    } else {
+                        Log.i("TAG6", "getUserChats: group : 138   id:${doc.id}")
+                        if (myGroupList.isNotEmpty() && myGroupList.contains(doc.id)) {
+                            val userModel = HomeChatModel(
+                                user_id = doc.id,
+                                user_name = doc.get("user_name").toString(),
+                                user_bio = doc.get("message").toString(),
+                                user_image = doc.get("group_img").toString(),
+                                user_token = doc.get("type").toString(),
+                                last_seen = doc.get("timestamp") as Timestamp,
+                                doc_id = doc.id
+                            )
+                            user_list.add(userModel)
+                        }
+                    }
+                }
+
+                if (user_list.size > 0) {
+                    chatHomeResponse.postValue(
+                        APIResponse.onTaskSuccess(
+                            group_list = null,
+                            user_list = user_list,
+                            chat_list = null,
+                            myGroupList = null
+                        )
+                    )
+                } else {
+                    chatHomeResponse.postValue(APIResponse.onTaskEmpty)
+                }
+            })
+    }
+
+
+//
+//// filter the group of current user
+//    fun getGroups(user_id: String?, onGroupsLoadListener: OnGroupsLoadListener) {
+//        DatabaseAddresses.getGroupsRefrence()
+//            .addSnapshotListener(EventListener<QuerySnapshot?> { value, e ->
+//                if (e != null)
+//                {
+//                    Log.i("TAGTAGTAG", "Listen failed.", e)
+//                    onGroupsLoadListener.onTaskError(e.localizedMessage)
+//                    return@EventListener
+//                }
+//                val group_list: ArrayList<GroupModel> = ArrayList<GroupModel>()
+//                Log.i("TAGTAGTAG", "getGroups: "+group_list)
+//                for (doc in value!!) {
+//                    val groupModel: GroupModel = doc.toObject(GroupModel::class.java)
+//                    for (i in groupModel.users_list?.indices!!)
+//                    {
+//                        if (groupModel.users_list!![i].user_id==user_id)
+//                        {
+//                            group_list.add(groupModel)
+//                        }
+//                    }
+//                }
+//                if (group_list.size > 0) {
+//                    onGroupsLoadListener.onTaskSuccess(group_list)
+//                } else {
+//                    onGroupsLoadListener.onTaskEmpty()
+//                }
+//            })
+//    }
+
+
+    // filter the group of current user
+    fun getGroups(user_id: String?) {
+        groupResponse.postValue(APIResponse.Loading)
+        DatabaseAddresses.getGroupsRefrence()
+            .addSnapshotListener(EventListener<QuerySnapshot?> { value, e ->
+                if (e != null) {
+                    Log.i("TAGTAGTAG", "Listen failed.", e)
+
+                    groupResponse.postValue(APIResponse.onTaskError(e.localizedMessage))
+                    return@EventListener
+                }
+                val group_list: ArrayList<GroupModel> = ArrayList<GroupModel>()
+                val myGroup_list: ArrayList<String> = ArrayList<String>()
+
+                Log.i("TAGTAGTAG", "getGroups: " + group_list)
+                for (doc in value!!) {
+                    val groupModel: GroupModel = doc.toObject(GroupModel::class.java)
+                    for (i in groupModel.users_list?.indices!!) {
+                        if (groupModel.users_list!![i].user_id == user_id) {
+                            group_list.add(groupModel)
+                            myGroup_list.add(groupModel.group_id.toString())
+                        }
+                    }
+                }
+                if (group_list.size > 0) {
+                    groupResponse.postValue(
+                        APIResponse.onTaskSuccess(
+                            group_list = group_list,
+                            user_list = null,
+                            chat_list = null,
+                            myGroupList = myGroup_list
+                        )
+                    )
+                } else {
+                    groupResponse.postValue(APIResponse.onTaskEmpty)
+                }
+            })
+    }
+
+
+    fun getSingleGroupDetail(groupId: String?, onGetUserDataListener: OnGetGroupDataListener) {
+        groupId?.let {
+            DatabaseAddresses.getSingleGroupsRefrence(it)
+                .get()
+                .addOnSuccessListener{ snapshot ->
+
+                    if (snapshot != null && snapshot.exists()) {
+                        val groupModel: GroupModel = snapshot.toObject(GroupModel::class.java)!!
+                        onGetUserDataListener.onTaskSuccess(groupModel)
+                        Log.d("TAG", "Current data: ${snapshot.data}")
+                    } else {
+                        onGetUserDataListener.onTaskEmpty()
+                        Log.d("TAG", "Current data: null")
+                    }
+                }.addOnFailureListener { e ->
+                    onGetUserDataListener.onTaskError(e.message)
+                }
+        }
+    }
+
+
+    fun getSingleGroupDetails(groupId: String?, onGetUserDataListener: OnGetGroupDataListener) {
+        groupId?.let {
+            DatabaseAddresses.getSingleGroupsRefrence(it)
+                .get()
+                .addOnSuccessListener {
+                    if (it.exists()) {
+                        val groupModel: GroupModel = it.toObject(GroupModel::class.java)!!
+                        onGetUserDataListener.onTaskSuccess(groupModel)
+                        Log.d("TAG", "Current data: ${it.data}")
+
+                    } else {
+                        onGetUserDataListener.onTaskError("error")
+                    }
+
+
+                }
+        }
+    }
+
+
+    fun getChatMessages(groupId: String?, onGetChatMessages: OnGetChatMessages) {
+        Log.i("TAG", "getGroupMessages:xxx simpleGroupID:$groupId")
+        DatabaseAddresses.getChatMessageRefrence(groupId.toString())
+            .orderBy("timestamp", Query.Direction.ASCENDING)
+            .whereEqualTo("group_id", groupId)
+            .addSnapshotListener(EventListener<QuerySnapshot?> { value, e ->
+                if (e != null) {
+
+                    Log.i("getGroupMessages:xxx", "Listen failed.", e)
+                    onGetChatMessages.onTaskError(e.localizedMessage)
+                    return@EventListener
+                }
+
+                val chat_list: ArrayList<ChatMessage> = ArrayList<ChatMessage>()
+                for (doc in value!!) {
+                    val chatMessage: ChatMessage = doc.toObject(ChatMessage::class.java)
+                    chat_list.add(chatMessage)
+                    Log.i("TAG", "getGroupMessages:xxx doc:${chat_list.size}")
+                }
+
+                Log.i("TAG", "getGroupMessages:yyy doc:${chat_list.size}")
+
+                if (chat_list.size > 0) {
+                    onGetChatMessages.onTaskSuccess(chat_list)
+                } else {
+                    onGetChatMessages.onTaskEmpty()
+                }
+            })
+    }
+
+//    fun getSingleMessages(groupId: String?, userId: String, onGetChatMessages: OnGetChatMessages) {
+//        Log.i("TAG", "getGroupMessages:xxx simpleGroupID:$groupId")
+//        DatabaseAddresses.getChatMessageRefrence(groupId.toString())
+//            .orderBy("timestamp", Query.Direction.ASCENDING)
+//            .whereEqualTo("group_id", groupId)
+//            .addSnapshotListener(EventListener<QuerySnapshot?> { value, e ->
+//                if (e != null) {
+//
+//                    Log.i("getGroupMessages:xxx", "Listen failed.", e)
+//                    onGetChatMessages.onTaskError(e.localizedMessage)
+//                    return@EventListener
+//                }
+//
+//                val chat_list: ArrayList<ChatMessage> = ArrayList<ChatMessage>()
+//                for (doc in value!!) {
+//                    val chatMessage: ChatMessage = doc.toObject(ChatMessage::class.java)
+//                    chat_list.add(chatMessage)
+//
+//                }
+//
+//                Log.i("TAG", "getGroupMessages:yyy doc:${chat_list.size}")
+//
+//                if (chat_list.size > 0) {
+//                    onGetChatMessages.onTaskSuccess(chat_list)
+//                    // all chat receive now call to access unseen message list
+//                    //   getUnseenMessages(groupId!!,userId)
+//                } else {
+//                    onGetChatMessages.onTaskEmpty()
+//                }
+//            })
+//    }
+
+    fun getOrganizationDetails(
+        org_id: String?,
+        onOrganizationLoadListener: OnOrganizationLoadListener
+    ) {
+        DatabaseAddresses.getSingleOrganizationReference(org_id)
+            .get()
+            .addOnSuccessListener{
+                if (it.exists()) {
+                    val organization: Organization = it.toObject(Organization::class.java)!!
+                    onOrganizationLoadListener.onTaskSuccess(organization)
+                    Log.d("TAG", "Current data: ${it.data}")
+                } else {
+                    onOrganizationLoadListener.onTaskEmpty()
+                    Log.d("TAG", "Current data: null")
+                }
+            }.addOnFailureListener { e->
+                onOrganizationLoadListener.onTaskError(e.message)
+            }
+    }
+
+    fun getUnseenMessages(id: String, rid: String) {
+        Log.d("TAG7", "getUnseenMessages :id  :$id   uid: $rid")
+        chatUnSeenResponse.postValue(APIResponse.Loading)
+        DatabaseAddresses.getChatMessageRefrence(id)
+            .whereEqualTo("sender_id", rid)
+            .whereEqualTo("message_staus", "Sent")
+            .get()
+            .addOnSuccessListener {
+                if (!it.isEmpty) {
+
+                    var chat_list: List<ChatMessage> = ArrayList<ChatMessage>()
+
+                    chat_list = it.toObjects(ChatMessage::class.java)
+
+
+                    //   Log.d("TAG7", "getUnseenMessages :list :${chat_list.toString()}")
+                    if (chat_list.size > 0) {
+                        chatUnSeenResponse.postValue(
+                            APIResponse.onTaskSuccess(
+                                group_list = null,
+                                user_list = null,
+                                chat_list = chat_list as ArrayList<ChatMessage>,
+                                myGroupList = null
+                            )
+                        )
+                    } else {
+                        chatUnSeenResponse.postValue(APIResponse.onTaskEmpty)
+                    }
+                } else {
+                    chatUnSeenResponse.postValue(APIResponse.onTaskEmpty)
+                }
+            }.addOnFailureListener {
+                chatUnSeenResponse.postValue(APIResponse.onTaskError(it.localizedMessage))
+            }
+    }
+
+
+    fun updateGroupSeenReceiverStatus(groupId: String, docId: String, rid: String) {
+        val map = mapOf("msg_receivers.$rid" to "Seen")
+        DatabaseAddresses.getChatMessageReference(groupId, docId)
+            .update(map)
+    }
+
+    fun updateSingleSeenReceiverStatus(groupId: String, docId: String) {
+        DatabaseAddresses.getChatMessageReference(groupId, docId)
+            .update("message_staus", "Seen")
+    }
+
+//    fun getChatCount(userList: ) {
+//        Log.v("TAG8","getChatCount")
+//        userList.forEach {
+//            Log.v("TAG8","id :${it.user_id}")
+//            DatabaseAddresses.getChatMessageReference(groupId, docId)
+//        }
+//    }
+
+    /* Note: userId for P2P chat
+    * and rid for group chat is user id
+     */
+    fun getChatCount(
+        docId: String,
+        userId: String,
+        type: String,
+        rid: String,
+        pos:Int,
+        callBack: UnSeenMessageCount
+    ) {
+        Log.v("TAG8", "getChatCount")
+
+        Log.v("TAG8", "id :${docId}")
+        if (type == "single") {
+            DatabaseAddresses.getGroupChatReference(docId)
+                .whereEqualTo("message_staus", "Sent")
+                .whereEqualTo("sender_id", userId)
+                .get()
+                .addOnSuccessListener{ value  ->
+                    if (value != null && !value.isEmpty) {
+                        callBack.onMessageCount(pos ,value!!.toObjects(ChatMessage::class.java))
+                    } else {
+                        callBack.onMessageCount(pos ,arrayListOf<ChatMessage>())
+                    }
+                }
+        }
+        else {
+
+            Log.v("TAG8", " group id :${rid}")
+            DatabaseAddresses.getGroupChatReference(docId)
+                .whereEqualTo("message_staus", "Sent")
+                .get()
+                .addOnSuccessListener {
+                    if (it.isEmpty) {
+                        callBack.onMessageCount(pos , arrayListOf<ChatMessage>())
+                    } else {
+                        val chats = it!!.toObjects(ChatMessage::class.java)
+                        val count = chats.filter { chat ->
+                            chat.msg_receivers?.let { map ->
+                                map.containsKey(rid) && map.getValue(rid) == "Sent"
+                            }
+                                ?: false
+                        }
+
+                        callBack.onMessageCount(pos ,count)
+                    }
+
+                }
+        }
+    }
+
+//    fun getUserProfile(uid: String, callBack: OnGetUserDataListener) {
+//        DatabaseAddresses.getSingleUserReference(uid).
+//        addSnapshotListener{ snapshot , e ->
+//            if (e != null) {
+//
+//                callBack.onTaskError(e.message)
+//                return@addSnapshotListener
+//            }
+//
+//            if (snapshot != null && snapshot.exists()) {
+//                val user = snapshot.toObject(UserModel::class.java)
+//                callBack.onTaskSuccess(user)
+//
+//            } else {
+//                callBack.onTaskEmpty()
+//
+//            }
+//        }
+//    }
+
+    fun getUserProfilee(uid: String, callBack: OnGetUserDataListener) {
+        DatabaseAddresses.getSingleUserReference(uid).get()
+            .addOnSuccessListener {
+                if (it.exists()) {
+                    val user = it.toObject(UserModel::class.java)
+                    callBack.onTaskSuccess(user)
+                } else {
+                    callBack.onTaskEmpty()
+
+                }
+            }
+            .addOnFailureListener {
+                callBack.onTaskError(it.localizedMessage)
+            }
+    }
+
+    fun updateUserProfile(uid: String, uri: Uri, bio: String, callback: OnGetUserDataListener) {
+        val filepath = FirebaseStorage.getInstance().reference?.child(
+            "user/profileImages/" + uid
+        )
+        val uploadTask =
+            filepath?.putFile(uri)?.apply {
+                addOnSuccessListener {
+
+                    filepath.downloadUrl.addOnSuccessListener { uri_ ->
+                        // enter data in database
+                        DatabaseAddresses.getSingleUserReference(uid)
+                            .update("user_bio", bio)
+                        DatabaseAddresses.getSingleUserReference(uid)
+                            .update("user_image", uri_.toString())
+                            .addOnSuccessListener {
+                                callback.onTaskSuccess(null)
+                            }
+                            .addOnFailureListener {
+                                callback.onTaskError(it.localizedMessage.toString())
+                            }
+
+                    }
+
+                }
+                addOnPausedListener {
+                    callback.onTaskError(it.error.toString())
+                }
+            }
+
+
+    }
+
+    fun getSingleUser2() {
+
+    }
+
+}
\ No newline at end of file
Index: app/src/main/res/layout/fragment_chat_home.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/fragment_chat_home.xml b/app/src/main/res/layout/fragment_chat_home.xml
new file mode 100644
--- /dev/null	(date 1662958874000)
+++ b/app/src/main/res/layout/fragment_chat_home.xml	(date 1662958874000)
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<layout xmlns:app="http://schemas.android.com/apk/res-auto">
+
+
+    <androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
+        xmlns:tools="http://schemas.android.com/tools"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent">
+
+
+
+        <androidx.recyclerview.widget.RecyclerView
+            android:id="@+id/users_recyclerview"
+            android:layout_width="0dp"
+            android:layout_height="0dp"
+            app:layout_constraintStart_toStartOf="parent"
+            app:layout_constraintEnd_toEndOf="parent"
+            app:layout_constraintBottom_toBottomOf="parent"
+            app:layout_constraintTop_toTopOf="parent"
+            android:layout_margin="@dimen/_10sdp"
+            />
+
+    </androidx.constraintlayout.widget.ConstraintLayout>
+</layout>
Index: app/src/main/res/layout/fragment_details_new_group.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/fragment_details_new_group.xml b/app/src/main/res/layout/fragment_details_new_group.xml
new file mode 100644
--- /dev/null	(date 1663243008000)
+++ b/app/src/main/res/layout/fragment_details_new_group.xml	(date 1663243008000)
@@ -0,0 +1,170 @@
+<?xml version="1.0" encoding="utf-8"?>
+<layout xmlns:tools="http://schemas.android.com/tools"
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto">
+
+    <androidx.constraintlayout.widget.ConstraintLayout
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        tools:context=".ui.fragments.DetailsNewGroupFragment">
+
+
+        <RelativeLayout
+            android:id="@+id/toolbar_layout"
+            android:layout_width="match_parent"
+            android:layout_height="?actionBarSize"
+            android:background="@color/purple_700"
+            app:layout_constraintEnd_toEndOf="parent"
+            app:layout_constraintStart_toStartOf="parent"
+            app:layout_constraintTop_toTopOf="parent">
+
+            <ImageView
+                android:id="@+id/arrow_back_imgview"
+                android:layout_width="@dimen/_25sdp"
+                android:layout_height="@dimen/_20sdp"
+                android:layout_alignParentStart="true"
+                android:layout_centerVertical="true"
+                android:layout_marginStart="@dimen/_5sdp"
+                android:src="@drawable/ic_baseline_arrow_back_24" />
+
+            <LinearLayout
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_centerVertical="true"
+                android:layout_marginStart="@dimen/_5sdp"
+                android:layout_toEndOf="@id/arrow_back_imgview"
+                android:orientation="vertical">
+
+                <TextView
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:text="@string/new_group"
+                    android:textColor="@color/white"
+                    android:textSize="@dimen/_14ssp"
+                    android:textStyle="bold" />
+
+                <TextView
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:text="@string/add_subject"
+                    android:textColor="@color/white"
+                    android:textSize="@dimen/_8ssp" />
+
+            </LinearLayout>
+
+        </RelativeLayout>
+
+        <androidx.constraintlayout.widget.ConstraintLayout
+            android:id="@+id/header_layout"
+            android:layout_width="0dp"
+            android:layout_height="@dimen/_100sdp"
+            app:layout_constraintEnd_toEndOf="parent"
+            app:layout_constraintStart_toStartOf="parent"
+            app:layout_constraintTop_toBottomOf="@id/toolbar_layout">
+
+            <RelativeLayout
+                android:id="@+id/camera_layout"
+                android:layout_width="@dimen/_50sdp"
+                android:layout_height="@dimen/_50sdp"
+                android:layout_marginStart="@dimen/_15sdp"
+                android:layout_marginTop="@dimen/_15sdp"
+                android:background="@drawable/camera_back"
+                app:layout_constraintStart_toStartOf="parent"
+                app:layout_constraintTop_toTopOf="parent">
+
+                <de.hdodenhof.circleimageview.CircleImageView
+                    android:id="@+id/user_imageview"
+                    android:layout_width="match_parent"
+                    android:layout_height="match_parent"
+
+                     />
+
+                <ImageView
+                    android:id="@+id/camera_imageview"
+                    android:layout_width="@dimen/_30sdp"
+                    android:layout_height="@dimen/_30sdp"
+                    android:layout_centerInParent="true"
+                    android:src="@drawable/ic_camera_" />
+            </RelativeLayout>
+
+            <EditText
+                android:id="@+id/subject_tv"
+                android:layout_width="0dp"
+                android:layout_height="wrap_content"
+                android:layout_marginStart="@dimen/_5sdp"
+                android:layout_marginEnd="@dimen/_5sdp"
+                android:hint="@string/type_group_subject_here"
+                app:layout_constraintBottom_toBottomOf="@id/camera_layout"
+                app:layout_constraintEnd_toStartOf="@id/emoji_imageview"
+                app:layout_constraintStart_toEndOf="@id/camera_layout"
+                app:layout_constraintTop_toTopOf="@id/camera_layout" />
+
+            <ImageView
+                android:id="@+id/emoji_imageview"
+                android:layout_width="@dimen/_15sdp"
+                android:layout_height="@dimen/_15sdp"
+                android:layout_marginEnd="@dimen/_15sdp"
+                android:src="@drawable/ic_emoji"
+                app:layout_constraintBottom_toBottomOf="@id/subject_tv"
+                app:layout_constraintEnd_toEndOf="parent"
+                app:layout_constraintTop_toTopOf="@id/subject_tv" />
+
+            <TextView
+                android:layout_width="0dp"
+                android:layout_height="wrap_content"
+                android:text="@string/provide_a_group_subject_and_optional_group_icon"
+                app:layout_constraintBottom_toBottomOf="parent"
+                app:layout_constraintEnd_toEndOf="@id/emoji_imageview"
+                app:layout_constraintStart_toStartOf="@id/camera_layout"
+                app:layout_constraintTop_toBottomOf="@id/camera_layout" />
+
+            <View
+
+                android:layout_width="0dp"
+                android:layout_height="1dp"
+                android:background="@color/line_color"
+                app:layout_constraintBottom_toBottomOf="parent"
+                app:layout_constraintEnd_toEndOf="parent"
+                app:layout_constraintStart_toStartOf="parent"
+
+                />
+        </androidx.constraintlayout.widget.ConstraintLayout>
+
+        <TextView
+            android:id="@+id/participents_tv"
+            android:layout_width="0dp"
+            android:layout_height="wrap_content"
+            android:layout_marginStart="@dimen/_15sdp"
+            android:layout_marginEnd="@dimen/_15sdp"
+            android:paddingTop="@dimen/_10sdp"
+            android:paddingBottom="@dimen/_10sdp"
+            android:text="@string/participants"
+            android:textSize="@dimen/_14ssp"
+            app:layout_constraintEnd_toEndOf="parent"
+            app:layout_constraintStart_toStartOf="parent"
+            app:layout_constraintTop_toBottomOf="@id/header_layout" />
+
+        <androidx.recyclerview.widget.RecyclerView
+            android:id="@+id/particpents_recyclerviwe"
+            android:layout_width="0dp"
+            android:layout_height="0dp"
+            android:layout_marginBottom="@dimen/_10sdp"
+            app:layout_constraintBottom_toBottomOf="parent"
+            app:layout_constraintEnd_toEndOf="@id/participents_tv"
+            app:layout_constraintStart_toStartOf="@id/participents_tv"
+            app:layout_constraintTop_toBottomOf="@id/participents_tv" />
+
+        <com.google.android.material.floatingactionbutton.FloatingActionButton
+            android:id="@+id/done_btn"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            app:layout_constraintEnd_toEndOf="parent"
+            app:layout_constraintBottom_toBottomOf="parent"
+            android:layout_marginBottom="@dimen/_10sdp"
+            android:layout_marginEnd="@dimen/_10sdp"
+            app:backgroundTint="@color/purple_700"
+            android:src="@drawable/ic_baseline_done_24"
+            />
+
+    </androidx.constraintlayout.widget.ConstraintLayout>
+</layout>
Index: app/src/main/res/layout/activity_main.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/activity_main.xml b/app/src/main/res/layout/activity_main.xml
new file mode 100644
--- /dev/null	(date 1662127120000)
+++ b/app/src/main/res/layout/activity_main.xml	(date 1662127120000)
@@ -0,0 +1,34 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<layout>
+
+
+    <RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+        xmlns:app="http://schemas.android.com/apk/res-auto"
+        xmlns:tools="http://schemas.android.com/tools"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        tools:context=".ui.activities.MainActivity">
+
+        <androidx.appcompat.widget.Toolbar
+            android:id="@+id/toolbar"
+            android:layout_width="match_parent"
+            android:layout_height="?attr/actionBarSize"
+            android:background="@color/purple_700"
+            app:layout_collapseMode="parallax"
+            android:layout_alignParentTop="true"
+            android:theme="@style/ThemeOverlay.MyApp.ActionBar"
+            app:popupTheme="@style/ThemeOverlay.AppCompat.Light" />
+
+
+        <androidx.fragment.app.FragmentContainerView
+            android:id="@+id/nav_host_fragment"
+            android:name="androidx.navigation.fragment.NavHostFragment"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            app:defaultNavHost="true"
+            android:layout_below="@id/toolbar"
+            app:navGraph="@navigation/nav_graph" />
+
+    </RelativeLayout>
+</layout>
Index: app/src/main/res/layout/fragment_add_participents.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/fragment_add_participents.xml b/app/src/main/res/layout/fragment_add_participents.xml
new file mode 100644
--- /dev/null	(date 1662127120000)
+++ b/app/src/main/res/layout/fragment_add_participents.xml	(date 1662127120000)
@@ -0,0 +1,124 @@
+<?xml version="1.0" encoding="utf-8"?>
+
+<layout>
+
+
+    <androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
+        xmlns:app="http://schemas.android.com/apk/res-auto"
+        xmlns:tools="http://schemas.android.com/tools"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        tools:context=".ui.fragments.AddParticipentsFragment">
+
+        <RelativeLayout
+            android:id="@+id/toolbar_layout"
+            android:layout_width="match_parent"
+            android:layout_height="?actionBarSize"
+            android:background="@color/purple_700"
+            app:layout_constraintEnd_toEndOf="parent"
+            app:layout_constraintStart_toStartOf="parent"
+            app:layout_constraintTop_toTopOf="parent">
+
+            <ImageView
+                android:id="@+id/arrow_back_imgview"
+                android:layout_width="@dimen/_25sdp"
+                android:layout_height="@dimen/_20sdp"
+                android:layout_alignParentStart="true"
+                android:layout_centerVertical="true"
+                android:layout_marginStart="@dimen/_5sdp"
+                android:src="@drawable/ic_baseline_arrow_back_24" />
+
+            <LinearLayout
+                android:id="@+id/group_name_layout"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_centerVertical="true"
+                android:layout_marginStart="@dimen/_5sdp"
+                android:layout_toEndOf="@id/arrow_back_imgview"
+                android:orientation="vertical">
+
+                <TextView
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:text="@string/new_group"
+                    android:textColor="@color/white"
+                    android:textSize="@dimen/_14ssp"
+                    android:textStyle="bold" />
+
+                <TextView
+                    android:id="@+id/number_contacts_selected_tv"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:text=""
+                    android:textColor="@color/white"
+                    android:textSize="@dimen/_8ssp" />
+
+            </LinearLayout>
+
+            <androidx.appcompat.widget.SearchView
+                android:id="@+id/searchview"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:layout_alignTop="@id/group_name_layout"
+                android:layout_alignBottom="@id/group_name_layout"
+                android:layout_alignParentEnd="true"
+                android:layout_marginStart="@dimen/_10sdp"
+                android:layout_toEndOf="@id/group_name_layout"
+                android:layoutDirection="rtl"
+                app:searchIcon="@drawable/ic_baseline_search_24" />
+
+        </RelativeLayout>
+
+        <androidx.recyclerview.widget.RecyclerView
+            android:id="@+id/selected_contacts_recyclerview"
+            android:layout_width="0dp"
+            android:layout_height="@dimen/_50sdp"
+            android:layout_margin="@dimen/_5sdp"
+            app:layout_constraintEnd_toEndOf="parent"
+            app:layout_constraintStart_toStartOf="parent"
+            app:layout_constraintTop_toBottomOf="@id/toolbar_layout" />
+
+        <TextView
+            android:id="@+id/selected_users_tv"
+            android:layout_width="0dp"
+            android:layout_height="@dimen/_50sdp"
+            android:layout_margin="@dimen/_5sdp"
+            android:gravity="center"
+            android:text="@string/no_user_selected"
+            android:textColor="@color/purple_700"
+            android:textSize="@dimen/_14ssp"
+            app:layout_constraintEnd_toEndOf="parent"
+            app:layout_constraintStart_toStartOf="parent"
+            app:layout_constraintTop_toBottomOf="@id/toolbar_layout" />
+
+        <View
+            android:id="@+id/view1"
+            android:layout_width="0dp"
+            android:layout_height="1dp"
+            android:layout_marginTop="@dimen/_5sdp"
+            android:background="@color/line_color"
+            app:layout_constraintEnd_toEndOf="parent"
+            app:layout_constraintStart_toStartOf="parent"
+            app:layout_constraintTop_toBottomOf="@id/selected_contacts_recyclerview" />
+
+        <androidx.recyclerview.widget.RecyclerView
+            android:id="@+id/all_contacts_recyclerview"
+            android:layout_width="0dp"
+            android:layout_height="0dp"
+            android:layout_margin="@dimen/_5sdp"
+            app:layout_constraintBottom_toBottomOf="parent"
+            app:layout_constraintEnd_toEndOf="parent"
+            app:layout_constraintStart_toStartOf="parent"
+            app:layout_constraintTop_toBottomOf="@id/view1" />
+        <com.google.android.material.floatingactionbutton.FloatingActionButton
+            android:id="@+id/done_btn"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_marginEnd="@dimen/_10sdp"
+            android:layout_marginBottom="@dimen/_10sdp"
+            android:src="@drawable/ic_baseline_done_24"
+            app:backgroundTint="@color/purple_700"
+            app:layout_constraintBottom_toBottomOf="parent"
+            app:layout_constraintEnd_toEndOf="parent" />
+    </androidx.constraintlayout.widget.ConstraintLayout>
+</layout>
